package ingraph.optimization.patterns

import "http://ingraph/relalg";

/*
    parentOperator
          |
          | *input
          V
    expandOperator
          |
          | input
          V
  getVerticesOperator

*/
// [1] transformation for eliminating standard expand operators connected to a getVerticesOperator
pattern getVerticesAndExpandOperator(getVerticesOperator : GetVerticesOperator, expandOperator : ExpandOperator, parentOperator : Operator) {
  find parentOperator(expandOperator, parentOperator);
	find expandOperatorWithDefaultEdgeVariable(expandOperator);
	ExpandOperator.input(expandOperator, getVerticesOperator);
  GetVerticesOperator(getVerticesOperator);
}

/*
    parentOperator
          |
          | *input
          V
    expandOperator
*/
// [2] transformation for eliminating the remaining default expand operators
pattern defaultExpandOperator(expandOperator : ExpandOperator, parentOperator : Operator) {
	find parentOperator(expandOperator, parentOperator);
	find expandOperatorWithDefaultEdgeVariable(expandOperator);
}

pattern expandOperatorWithDefaultEdgeVariable(defaultExpandOperator : ExpandOperator) {
	ExpandOperator.edgeVariable(defaultExpandOperator, edgeVariable);
	EdgeVariable(edgeVariable);
}

// [3] transform for eliminating the rest of expand operators
pattern transitiveExpandOperator(inputOperator : Operator, expandOperator : ExpandOperator, parentOperator : Operator, edgeListVariable : EdgeListVariable) {
  find parentOperator(expandOperator, parentOperator);
  ExpandOperator.input(expandOperator, inputOperator);
  ExpandOperator.edgeVariable(expandOperator, edgeListVariable);
  EdgeListVariable(edgeListVariable);
}

/*
    parentOperator
          |
          | *input
          V
     topOperator (skips/limits a given amount of tuples)
          |
          | input
          V
     sortOperator (orders the tuples according to some variables and asc/desc directions)
*/
// [4] transformation for combining adjacent sort and top operators to a single sortAndTop operator
pattern sortAndTopOperator(sortOperator : SortOperator, topOperator : TopOperator, parentOperator : Operator) {
  find parentOperator(topOperator, parentOperator);
  TopOperator.input(topOperator, sortOperator);
}
