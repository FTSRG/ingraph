/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRelationshipPatternAccess().getAlternatives(), "rule__RelationshipPattern__Alternatives");
					put(grammarAccess.getLeftArrowHeadAccess().getAlternatives(), "rule__LeftArrowHead__Alternatives");
					put(grammarAccess.getRightArrowHeadAccess().getAlternatives(), "rule__RightArrowHead__Alternatives");
					put(grammarAccess.getDashAccess().getAlternatives(), "rule__Dash__Alternatives");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getPatternPartAccess().getGroup(), "rule__PatternPart__Group__0");
					put(grammarAccess.getNodePatternAccess().getGroup(), "rule__NodePattern__Group__0");
					put(grammarAccess.getPatternElementChainAccess().getGroup(), "rule__PatternElementChain__Group__0");
					put(grammarAccess.getRelationshipPatternAccess().getGroup_0(), "rule__RelationshipPattern__Group_0__0");
					put(grammarAccess.getRelationshipPatternAccess().getGroup_1(), "rule__RelationshipPattern__Group_1__0");
					put(grammarAccess.getRelationshipPatternAccess().getGroup_2(), "rule__RelationshipPattern__Group_2__0");
					put(grammarAccess.getRelationshipPatternAccess().getGroup_3(), "rule__RelationshipPattern__Group_3__0");
					put(grammarAccess.getRelationshipDetailAccess().getGroup(), "rule__RelationshipDetail__Group__0");
					put(grammarAccess.getCypherQueryAccess().getQueriesAssignment(), "rule__CypherQuery__QueriesAssignment");
					put(grammarAccess.getQueryAccess().getPatternAssignment_1(), "rule__Query__PatternAssignment_1");
					put(grammarAccess.getPatternAccess().getPartsAssignment(), "rule__Pattern__PartsAssignment");
					put(grammarAccess.getPatternPartAccess().getNodeAssignment_0(), "rule__PatternPart__NodeAssignment_0");
					put(grammarAccess.getPatternPartAccess().getChainAssignment_1(), "rule__PatternPart__ChainAssignment_1");
					put(grammarAccess.getNodePatternAccess().getVariableAssignment_1(), "rule__NodePattern__VariableAssignment_1");
					put(grammarAccess.getNodePatternAccess().getLabelAssignment_3(), "rule__NodePattern__LabelAssignment_3");
					put(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0(), "rule__PatternElementChain__RelationshipPatternAssignment_0");
					put(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1(), "rule__PatternElementChain__NodePatternAssignment_1");
					put(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_1(), "rule__RelationshipDetail__VariableAssignment_1");
					put(grammarAccess.getRelationshipDetailAccess().getLabelAssignment_3(), "rule__RelationshipDetail__LabelAssignment_3");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getLabelAccess().getNameAssignment(), "rule__Label__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleCypherQuery();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
