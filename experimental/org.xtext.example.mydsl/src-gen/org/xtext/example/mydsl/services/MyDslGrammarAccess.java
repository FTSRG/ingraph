/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CypherQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CypherQuery");
		private final Assignment cQueriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQueriesQueryParserRuleCall_0 = (RuleCall)cQueriesAssignment.eContents().get(0);
		
		//CypherQuery:
		//	queries+=Query+;
		@Override public ParserRule getRule() { return rule; }
		
		//queries+=Query+
		public Assignment getQueriesAssignment() { return cQueriesAssignment; }
		
		//Query
		public RuleCall getQueriesQueryParserRuleCall_0() { return cQueriesQueryParserRuleCall_0; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//Query:
		//	'CREATE' pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//'CREATE' pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0() { return cPatternPatternParserRuleCall_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Pattern");
		private final Assignment cPartsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPartsPatternPartParserRuleCall_0 = (RuleCall)cPartsAssignment.eContents().get(0);
		
		//Pattern:
		//	parts+=PatternPart+;
		@Override public ParserRule getRule() { return rule; }
		
		//parts+=PatternPart+
		public Assignment getPartsAssignment() { return cPartsAssignment; }
		
		//PatternPart
		public RuleCall getPartsPatternPartParserRuleCall_0() { return cPartsPatternPartParserRuleCall_0; }
	}
	public class PatternPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PatternPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodePatternParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Assignment cChainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChainPatternElementChainParserRuleCall_1_0 = (RuleCall)cChainAssignment_1.eContents().get(0);
		
		//PatternPart:
		//	node=NodePattern chain+=PatternElementChain+;
		@Override public ParserRule getRule() { return rule; }
		
		//node=NodePattern chain+=PatternElementChain+
		public Group getGroup() { return cGroup; }
		
		//node=NodePattern
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//NodePattern
		public RuleCall getNodeNodePatternParserRuleCall_0_0() { return cNodeNodePatternParserRuleCall_0_0; }
		
		//chain+=PatternElementChain+
		public Assignment getChainAssignment_1() { return cChainAssignment_1; }
		
		//PatternElementChain
		public RuleCall getChainPatternElementChainParserRuleCall_1_0() { return cChainPatternElementChainParserRuleCall_1_0; }
	}
	public class NodePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NodePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelLabelParserRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodePattern:
		//	'(' variable=Variable? ':' label=Label? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' variable=Variable? ':' label=Label? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//variable=Variable?
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//label=Label?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_3_0() { return cLabelLabelParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PatternElementChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PatternElementChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationshipPatternRelationshipPatternParserRuleCall_0_0 = (RuleCall)cRelationshipPatternAssignment_0.eContents().get(0);
		private final Assignment cNodePatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodePatternNodePatternParserRuleCall_1_0 = (RuleCall)cNodePatternAssignment_1.eContents().get(0);
		
		//PatternElementChain:
		//	relationshipPattern=RelationshipPattern nodePattern=NodePattern;
		@Override public ParserRule getRule() { return rule; }
		
		//relationshipPattern=RelationshipPattern nodePattern=NodePattern
		public Group getGroup() { return cGroup; }
		
		//relationshipPattern=RelationshipPattern
		public Assignment getRelationshipPatternAssignment_0() { return cRelationshipPatternAssignment_0; }
		
		//RelationshipPattern
		public RuleCall getRelationshipPatternRelationshipPatternParserRuleCall_0_0() { return cRelationshipPatternRelationshipPatternParserRuleCall_0_0; }
		
		//nodePattern=NodePattern
		public Assignment getNodePatternAssignment_1() { return cNodePatternAssignment_1; }
		
		//NodePattern
		public RuleCall getNodePatternNodePatternParserRuleCall_1_0() { return cNodePatternNodePatternParserRuleCall_1_0; }
	}
	public class RelationshipPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RelationshipPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLeftArrowHeadParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDashParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cRelationshipDetailParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cDashParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cRightArrowHeadParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLeftArrowHeadParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDashParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRelationshipDetailParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cDashParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDashParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cRelationshipDetailParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cDashParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cRightArrowHeadParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cDashParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cRelationshipDetailParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cDashParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//RelationshipPattern:
		//	leftArrowHead dash RelationshipDetail? dash rightArrowHead | leftArrowHead dash RelationshipDetail? dash | dash
		//	RelationshipDetail? dash rightArrowHead | dash RelationshipDetail? dash;
		@Override public ParserRule getRule() { return rule; }
		
		//leftArrowHead dash RelationshipDetail? dash rightArrowHead | leftArrowHead dash RelationshipDetail? dash | dash
		//RelationshipDetail? dash rightArrowHead | dash RelationshipDetail? dash
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//leftArrowHead dash RelationshipDetail? dash rightArrowHead
		public Group getGroup_0() { return cGroup_0; }
		
		//leftArrowHead
		public RuleCall getLeftArrowHeadParserRuleCall_0_0() { return cLeftArrowHeadParserRuleCall_0_0; }
		
		//dash
		public RuleCall getDashParserRuleCall_0_1() { return cDashParserRuleCall_0_1; }
		
		//RelationshipDetail?
		public RuleCall getRelationshipDetailParserRuleCall_0_2() { return cRelationshipDetailParserRuleCall_0_2; }
		
		//dash
		public RuleCall getDashParserRuleCall_0_3() { return cDashParserRuleCall_0_3; }
		
		//rightArrowHead
		public RuleCall getRightArrowHeadParserRuleCall_0_4() { return cRightArrowHeadParserRuleCall_0_4; }
		
		//leftArrowHead dash RelationshipDetail? dash
		public Group getGroup_1() { return cGroup_1; }
		
		//leftArrowHead
		public RuleCall getLeftArrowHeadParserRuleCall_1_0() { return cLeftArrowHeadParserRuleCall_1_0; }
		
		//dash
		public RuleCall getDashParserRuleCall_1_1() { return cDashParserRuleCall_1_1; }
		
		//RelationshipDetail?
		public RuleCall getRelationshipDetailParserRuleCall_1_2() { return cRelationshipDetailParserRuleCall_1_2; }
		
		//dash
		public RuleCall getDashParserRuleCall_1_3() { return cDashParserRuleCall_1_3; }
		
		//dash RelationshipDetail? dash rightArrowHead
		public Group getGroup_2() { return cGroup_2; }
		
		//dash
		public RuleCall getDashParserRuleCall_2_0() { return cDashParserRuleCall_2_0; }
		
		//RelationshipDetail?
		public RuleCall getRelationshipDetailParserRuleCall_2_1() { return cRelationshipDetailParserRuleCall_2_1; }
		
		//dash
		public RuleCall getDashParserRuleCall_2_2() { return cDashParserRuleCall_2_2; }
		
		//rightArrowHead
		public RuleCall getRightArrowHeadParserRuleCall_2_3() { return cRightArrowHeadParserRuleCall_2_3; }
		
		//dash RelationshipDetail? dash
		public Group getGroup_3() { return cGroup_3; }
		
		//dash
		public RuleCall getDashParserRuleCall_3_0() { return cDashParserRuleCall_3_0; }
		
		//RelationshipDetail?
		public RuleCall getRelationshipDetailParserRuleCall_3_1() { return cRelationshipDetailParserRuleCall_3_1; }
		
		//dash
		public RuleCall getDashParserRuleCall_3_2() { return cDashParserRuleCall_3_2; }
	}
	public class RelationshipDetailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RelationshipDetail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelLabelParserRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RelationshipDetail:
		//	'[' variable=Variable? ':' label=Label? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' variable=Variable? ':' label=Label? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//variable=Variable?
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//label=Label?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_3_0() { return cLabelLabelParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Label:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LeftArrowHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.leftArrowHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMathematicalLeftAngleBracketKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftAngleBracketKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSmallLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFullwidthLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//leftArrowHead:
		//	'<' | '⟨' | '〈' | '﹤' | '＜';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '⟨' | '〈' | '﹤' | '＜'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'⟨'
		public Keyword getMathematicalLeftAngleBracketKeyword_1() { return cMathematicalLeftAngleBracketKeyword_1; }
		
		//'〈'
		public Keyword getLeftAngleBracketKeyword_2() { return cLeftAngleBracketKeyword_2; }
		
		//'﹤'
		public Keyword getSmallLessThanSignKeyword_3() { return cSmallLessThanSignKeyword_3; }
		
		//'＜'
		public Keyword getFullwidthLessThanSignKeyword_4() { return cFullwidthLessThanSignKeyword_4; }
	}
	public class RightArrowHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.rightArrowHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMathematicalRightAngleBracketKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightAngleBracketKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSmallGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFullwidthGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//rightArrowHead:
		//	'>' | '⟩' | '〉' | '﹥' | '＞';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '⟩' | '〉' | '﹥' | '＞'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'⟩'
		public Keyword getMathematicalRightAngleBracketKeyword_1() { return cMathematicalRightAngleBracketKeyword_1; }
		
		//'〉'
		public Keyword getRightAngleBracketKeyword_2() { return cRightAngleBracketKeyword_2; }
		
		//'﹥'
		public Keyword getSmallGreaterThanSignKeyword_3() { return cSmallGreaterThanSignKeyword_3; }
		
		//'＞'
		public Keyword getFullwidthGreaterThanSignKeyword_4() { return cFullwidthGreaterThanSignKeyword_4; }
	}
	public class DashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.dash");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSoftHyphenKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNonBreakingHyphenKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFigureDashKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEnDashKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEmDashKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHorizontalBarKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMinusSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSmallEmDashKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSmallHyphenMinusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cFullwidthHyphenMinusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//dash:
		//	'-' | '­' | '‐' | '‑' | '‒' | '–' | '—' | '―' | '−' | '﹘' | '﹣' | '－';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | '­' | '‐' | '‑' | '‒' | '–' | '—' | '―' | '−' | '﹘' | '﹣' | '－'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'­'
		public Keyword getSoftHyphenKeyword_1() { return cSoftHyphenKeyword_1; }
		
		//'‐'
		public Keyword getHyphenKeyword_2() { return cHyphenKeyword_2; }
		
		//'‑'
		public Keyword getNonBreakingHyphenKeyword_3() { return cNonBreakingHyphenKeyword_3; }
		
		//'‒'
		public Keyword getFigureDashKeyword_4() { return cFigureDashKeyword_4; }
		
		//'–'
		public Keyword getEnDashKeyword_5() { return cEnDashKeyword_5; }
		
		//'—'
		public Keyword getEmDashKeyword_6() { return cEmDashKeyword_6; }
		
		//'―'
		public Keyword getHorizontalBarKeyword_7() { return cHorizontalBarKeyword_7; }
		
		//'−'
		public Keyword getMinusSignKeyword_8() { return cMinusSignKeyword_8; }
		
		//'﹘'
		public Keyword getSmallEmDashKeyword_9() { return cSmallEmDashKeyword_9; }
		
		//'﹣'
		public Keyword getSmallHyphenMinusKeyword_10() { return cSmallHyphenMinusKeyword_10; }
		
		//'－'
		public Keyword getFullwidthHyphenMinusKeyword_11() { return cFullwidthHyphenMinusKeyword_11; }
	}
	
	
	private final CypherQueryElements pCypherQuery;
	private final QueryElements pQuery;
	private final PatternElements pPattern;
	private final PatternPartElements pPatternPart;
	private final NodePatternElements pNodePattern;
	private final PatternElementChainElements pPatternElementChain;
	private final RelationshipPatternElements pRelationshipPattern;
	private final RelationshipDetailElements pRelationshipDetail;
	private final VariableElements pVariable;
	private final LabelElements pLabel;
	private final LeftArrowHeadElements pLeftArrowHead;
	private final RightArrowHeadElements pRightArrowHead;
	private final DashElements pDash;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCypherQuery = new CypherQueryElements();
		this.pQuery = new QueryElements();
		this.pPattern = new PatternElements();
		this.pPatternPart = new PatternPartElements();
		this.pNodePattern = new NodePatternElements();
		this.pPatternElementChain = new PatternElementChainElements();
		this.pRelationshipPattern = new RelationshipPatternElements();
		this.pRelationshipDetail = new RelationshipDetailElements();
		this.pVariable = new VariableElements();
		this.pLabel = new LabelElements();
		this.pLeftArrowHead = new LeftArrowHeadElements();
		this.pRightArrowHead = new RightArrowHeadElements();
		this.pDash = new DashElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CypherQuery:
	//	queries+=Query+;
	public CypherQueryElements getCypherQueryAccess() {
		return pCypherQuery;
	}
	
	public ParserRule getCypherQueryRule() {
		return getCypherQueryAccess().getRule();
	}
	
	//Query:
	//	'CREATE' pattern=Pattern;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Pattern:
	//	parts+=PatternPart+;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//PatternPart:
	//	node=NodePattern chain+=PatternElementChain+;
	public PatternPartElements getPatternPartAccess() {
		return pPatternPart;
	}
	
	public ParserRule getPatternPartRule() {
		return getPatternPartAccess().getRule();
	}
	
	//NodePattern:
	//	'(' variable=Variable? ':' label=Label? ')';
	public NodePatternElements getNodePatternAccess() {
		return pNodePattern;
	}
	
	public ParserRule getNodePatternRule() {
		return getNodePatternAccess().getRule();
	}
	
	//PatternElementChain:
	//	relationshipPattern=RelationshipPattern nodePattern=NodePattern;
	public PatternElementChainElements getPatternElementChainAccess() {
		return pPatternElementChain;
	}
	
	public ParserRule getPatternElementChainRule() {
		return getPatternElementChainAccess().getRule();
	}
	
	//RelationshipPattern:
	//	leftArrowHead dash RelationshipDetail? dash rightArrowHead | leftArrowHead dash RelationshipDetail? dash | dash
	//	RelationshipDetail? dash rightArrowHead | dash RelationshipDetail? dash;
	public RelationshipPatternElements getRelationshipPatternAccess() {
		return pRelationshipPattern;
	}
	
	public ParserRule getRelationshipPatternRule() {
		return getRelationshipPatternAccess().getRule();
	}
	
	//RelationshipDetail:
	//	'[' variable=Variable? ':' label=Label? ']';
	public RelationshipDetailElements getRelationshipDetailAccess() {
		return pRelationshipDetail;
	}
	
	public ParserRule getRelationshipDetailRule() {
		return getRelationshipDetailAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Label:
	//	name=ID;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//leftArrowHead:
	//	'<' | '⟨' | '〈' | '﹤' | '＜';
	public LeftArrowHeadElements getLeftArrowHeadAccess() {
		return pLeftArrowHead;
	}
	
	public ParserRule getLeftArrowHeadRule() {
		return getLeftArrowHeadAccess().getRule();
	}
	
	//rightArrowHead:
	//	'>' | '⟩' | '〉' | '﹥' | '＞';
	public RightArrowHeadElements getRightArrowHeadAccess() {
		return pRightArrowHead;
	}
	
	public ParserRule getRightArrowHeadRule() {
		return getRightArrowHeadAccess().getRule();
	}
	
	//dash:
	//	'-' | '­' | '‐' | '‑' | '‒' | '–' | '—' | '―' | '−' | '﹘' | '﹣' | '－';
	public DashElements getDashAccess() {
		return pDash;
	}
	
	public ParserRule getDashRule() {
		return getDashAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
