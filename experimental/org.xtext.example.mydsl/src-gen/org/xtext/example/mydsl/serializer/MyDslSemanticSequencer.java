/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.CypherQuery;
import org.xtext.example.mydsl.myDsl.Label;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NodePattern;
import org.xtext.example.mydsl.myDsl.Pattern;
import org.xtext.example.mydsl.myDsl.PatternElementChain;
import org.xtext.example.mydsl.myDsl.PatternPart;
import org.xtext.example.mydsl.myDsl.Query;
import org.xtext.example.mydsl.myDsl.RelationshipDetail;
import org.xtext.example.mydsl.myDsl.Variable;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CYPHER_QUERY:
				sequence_CypherQuery(context, (CypherQuery) semanticObject); 
				return; 
			case MyDslPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case MyDslPackage.NODE_PATTERN:
				sequence_NodePattern(context, (NodePattern) semanticObject); 
				return; 
			case MyDslPackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_ELEMENT_CHAIN:
				sequence_PatternElementChain(context, (PatternElementChain) semanticObject); 
				return; 
			case MyDslPackage.PATTERN_PART:
				sequence_PatternPart(context, (PatternPart) semanticObject); 
				return; 
			case MyDslPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case MyDslPackage.RELATIONSHIP_DETAIL:
				sequence_RelationshipDetail(context, (RelationshipDetail) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CypherQuery returns CypherQuery
	 *
	 * Constraint:
	 *     queries+=Query+
	 */
	protected void sequence_CypherQuery(ISerializationContext context, CypherQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LABEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LABEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NodePattern returns NodePattern
	 *
	 * Constraint:
	 *     (variable=Variable? label=Label?)
	 */
	protected void sequence_NodePattern(ISerializationContext context, NodePattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternElementChain returns PatternElementChain
	 *
	 * Constraint:
	 *     (relationshipPattern=RelationshipPattern nodePattern=NodePattern)
	 */
	protected void sequence_PatternElementChain(ISerializationContext context, PatternElementChain semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PATTERN_ELEMENT_CHAIN__RELATIONSHIP_PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PATTERN_ELEMENT_CHAIN__RELATIONSHIP_PATTERN));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PATTERN_ELEMENT_CHAIN__NODE_PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PATTERN_ELEMENT_CHAIN__NODE_PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0(), semanticObject.getRelationshipPattern());
		feeder.accept(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0(), semanticObject.getNodePattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PatternPart returns PatternPart
	 *
	 * Constraint:
	 *     (node=NodePattern chain+=PatternElementChain+)
	 */
	protected void sequence_PatternPart(ISerializationContext context, PatternPart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns Pattern
	 *
	 * Constraint:
	 *     parts+=PatternPart+
	 */
	protected void sequence_Pattern(ISerializationContext context, Pattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Query returns Query
	 *
	 * Constraint:
	 *     pattern=Pattern
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.QUERY__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.QUERY__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryAccess().getPatternPatternParserRuleCall_1_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationshipPattern returns RelationshipDetail
	 *     RelationshipDetail returns RelationshipDetail
	 *
	 * Constraint:
	 *     (variable=Variable? label=Label?)
	 */
	protected void sequence_RelationshipDetail(ISerializationContext context, RelationshipDetail semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
