<?xml version="1.0" encoding="UTF-8"?>
<openCypher:Cypher xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:openCypher="http://www.slizaa.org/neo4j/opencypher/OpenCypher">
  <queryOptions xsi:type="openCypher:AllOptions"/>
  <statement xsi:type="openCypher:SingleQuery">
    <clauses xsi:type="openCypher:Match">
      <pattern>
        <patterns>
          <var name="p"/>
          <part xsi:type="openCypher:PatternElement">
            <nodepattern>
              <variable name="a"/>
              <nodeLabels>
                <nodeLabels labelName="T"/>
              </nodeLabels>
              <properties xsi:type="openCypher:MapLiteral">
                <entries key="name">
                  <value xsi:type="openCypher:StringConstant" value="'a'"/>
                </entries>
              </properties>
            </nodepattern>
            <chain>
              <relationshipPattern outgoing="true">
                <detail>
                  <types>
                    <relTypeName>R</relTypeName>
                  </types>
                  <range/>
                </detail>
              </relationshipPattern>
              <nodePattern>
                <variable name="other"/>
                <nodeLabels>
                  <nodeLabels labelName="T"/>
                </nodeLabels>
              </nodePattern>
            </chain>
          </part>
        </patterns>
      </pattern>
      <where>
        <expression xsi:type="openCypher:ExpressionComparison" operator="&lt;>">
          <left xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@part/@chain.0/@nodePattern/@variable"/>
          <right xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@part/@nodepattern/@variable"/>
        </expression>
      </where>
    </clauses>
    <clauses xsi:type="openCypher:With">
      <returnBody xsi:type="openCypher:ReturnItems">
        <items>
          <expression xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@part/@nodepattern/@variable"/>
        </items>
        <items>
          <expression xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@part/@chain.0/@nodePattern/@variable"/>
        </items>
        <items>
          <expression xsi:type="openCypher:FunctionInvocation">
            <functionName name="min"/>
            <parameter xsi:type="openCypher:FunctionInvocation">
              <functionName name="length"/>
              <parameter xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@var"/>
            </parameter>
          </expression>
          <alias name="len"/>
        </items>
      </returnBody>
    </clauses>
    <clauses xsi:type="openCypher:Return" return="RETURN">
      <body xsi:type="openCypher:ReturnItems">
        <items>
          <expression xsi:type="openCypher:ExpressionNodeLabelsAndPropertyLookup">
            <left xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@part/@nodepattern/@variable"/>
            <propertyLookups propertyKeyName="name"/>
          </expression>
          <alias name="name"/>
        </items>
        <items>
          <expression xsi:type="openCypher:FunctionInvocation">
            <functionName name="collect"/>
            <parameter xsi:type="openCypher:ExpressionNodeLabelsAndPropertyLookup">
              <left xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.0/@pattern/@patterns.0/@part/@chain.0/@nodePattern/@variable"/>
              <propertyLookups propertyKeyName="name"/>
            </parameter>
          </expression>
          <alias name="others"/>
        </items>
        <items>
          <expression xsi:type="openCypher:VariableRef" variableRef="//@statement/@clauses.1/@returnBody/@items.2/@alias"/>
        </items>
      </body>
    </clauses>
  </statement>
</openCypher:Cypher>
