@GenModel(
    bundleManifest="false",
    modelDirectory="ingraph-relalg-xcore/src/main/java-gen",
    complianceLevel="8.0"
)
package relalg

class RelationalAlgebraContainer {
	contains Operator rootExpression
	contains NamedElement[] elements opposite containerr
}

abstract class NamedElement {
	String name
	refers RelationalAlgebraContainer containerr opposite elements
}

abstract class Label extends NamedElement {}
class VertexLabel extends Label {}
class EdgeLabel extends Label {}

/* Variables */
abstract class Variable extends NamedElement, ReturnableElement {
	boolean dontCare = "false"
}
class ElementVariable extends Variable {
	refers AttributeVariable[] attributes opposite element
}
class VertexVariable extends ElementVariable {
	refers VertexLabel vertexLabel
}
class EdgeVariable extends ElementVariable {
	refers EdgeLabel edgeLabel
}
class AttributeVariable extends Variable {
	refers ElementVariable element opposite attributes
}

abstract class ReturnableElement {}


/* Operators */

abstract class Operator {
	refers Variable[] schema
}

/* Nullary operators */

class GetVerticesOperator extends Operator {
	refers VertexVariable vertexVariable
}

// (sourceVertexVariable)-[edgeVariable]->(targetVertexVariable)
class GetEdgesOperator extends Operator {
	refers VertexVariable sourceVertexVariable
	refers EdgeVariable edgeVariable
	refers VertexVariable targetVertexVariable
}

/* Alpha operators */

abstract class AlphaOperator extends Operator {
	contains Operator input
}

class ProductionOperator extends AlphaOperator {}

class SelectionOperator extends AlphaOperator {
	String conditionString 
}

class ProjectionOperator extends AlphaOperator {
	refers Variable[] variables
}

class ExpandOperator extends AlphaOperator {
	Direction direction
	refers VertexVariable sourceVertexVariable
	refers EdgeVariable edgeVariable
	refers VertexVariable targetVertexVariable
}

class DuplicateEliminationOperator extends AlphaOperator {
	
}

class AllDifferentOperator extends AlphaOperator {
	refers EdgeVariable[] edgeVariables
}

/* Beta operators */

abstract class BetaOperator extends Operator {
	contains Operator leftInput
	contains Operator rightInput
}

abstract class AbstractJoinOperator extends BetaOperator {
	refers Variable[] mutualVariables
}

class JoinOperator extends AbstractJoinOperator {}

class AntiJoinOperator extends AbstractJoinOperator {}

class UnionOperator extends BetaOperator {}

/* enums */

enum Direction {
	BOTH,
	IN,
	OUT
}

enum Order {
	ASCENDING,
	DESCENDING
}

