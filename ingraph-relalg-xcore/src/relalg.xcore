@Ecore(nsURI="http://ingraph/relalg")
@GenModel(bundleManifest="false",
    modelDirectory="ingraph-relalg-xcore/build/xcore/main",
    complianceLevel="8.0")
package relalg

class RelalgContainer {
	String name
	refers Operator rootExpression
	contains NamedElement[] elements opposite ^namedElementContainer
	contains Expression[] expressions opposite ^container
}

abstract class NamedElement {
	String name
	refers RelalgContainer ^namedElementContainer opposite elements
}

abstract class Label extends NamedElement {
}

class VertexLabel extends Label {
}

class EdgeLabel extends Label {
}

/**
 * A set of labels. 
 */
abstract class LabelSet {
	LabelSetStatus status = "EMPTY"
}

/**
 * A vertex satisfies a labelset constraint iff it has all the labels in the labelset.
 * 
 * The vertex itself might has more labels, so in case of more than one labelset constraint
 * for a single vertex variable, it is always satisfiable, i.e.
 * LabelSet.status should never be LabelSetStatus.CONTRADICTING.
 */
class VertexLabelSet extends LabelSet {
	refers VertexLabel[] vertexLabels // the vertex must have *all* of these labels
}

/**
 * An edge satisfies a labelset constraint iff it has any of the labels in the labelset.
 * An edge might has at most one label.
 * 
 * For an edge variable, the combination of the following labelset constraints
 * is contradicting, thus un-satisfiable:
 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
 *  2. [edge1:C], so edge1 needs to have label C.
 * These are contradicting as a single edge instance can have at most one label.
 */
class EdgeLabelSet extends LabelSet {
	refers EdgeLabel[] edgeLabels // the edge must have *one* of these labels
}

/* Variables */
abstract class Variable extends Atom, NamedElement, ComparableExpression {
	boolean dontCare = "false"
}

abstract class ElementVariable extends Variable {
	refers AttributeVariable[] attributes opposite element
}

class VertexVariable extends ElementVariable {
	contains VertexLabelSet vertexLabelSet // the vertex must have *all* of these labels
}

class EdgeVariable extends ElementVariable {
	contains EdgeLabelSet edgeLabelSet // the edge must have *one* of these labels
}

class AttributeVariable extends Variable {
	refers ElementVariable element opposite attributes
}

class ReturnableElement {
	String alias
	refers Expression expression
}

/* Operators */
abstract class Operator {
	String description
	refers Variable[] schema
	refers Variable[] detailedSchema
	contains Cardinality cardinality
}

class Cardinality {
	double value
}

/* Nullary operators */
abstract class NullaryOperator extends Operator {
}

class GetVerticesOperator extends NullaryOperator {
	refers VertexVariable vertexVariable
}

// (sourceVertexVariable)-[edgeVariable]->(targetVertexVariable)
class GetEdgesOperator extends NullaryOperator {
	refers VertexVariable sourceVertexVariable
	refers EdgeVariable edgeVariable
	refers VertexVariable targetVertexVariable
}

/* Unary operators */
abstract class UnaryOperator extends Operator {
	contains Operator input
}

class ProductionOperator extends UnaryOperator {
}

class SelectionOperator extends UnaryOperator {
	String conditionString
	refers LogicalExpression condition
}

class ProjectionOperator extends UnaryOperator {
	contains ReturnableElement[] variables
	int[] tupleElements
}

abstract class NavigationOperator extends UnaryOperator {
	Direction direction
	refers VertexVariable sourceVertexVariable
	refers EdgeVariable edgeVariable
	refers VertexVariable targetVertexVariable
}

enum MaxHopsType {
	LIMITED, UNLIMITED
}

class MaxHops {
	MaxHopsType maxHopsType
	int hops
}

class ExpandOperator extends NavigationOperator {
	int minHops
	refers MaxHops maxHops
}

class TransitiveClosureOperator extends NavigationOperator {
}

class DuplicateEliminationOperator extends UnaryOperator {
}

class AllDifferentOperator extends UnaryOperator {
	refers EdgeVariable[] edgeVariables
	contains EdgeVariableSet edgeVariableSets
}

class EdgeVariableSet { // TODO - we should think about this a bit more
	refers EdgeVariable[] edgeVariables
}

class SortOperator extends UnaryOperator {
	contains SortEntry[] entries
}

class SortEntry {
	refers Variable variable
	OrderDirection direction
}

class TopOperator extends UnaryOperator {
	int skip
	int limit
}

class GroupingOperator extends UnaryOperator {
	contains GroupingEntry[] entries
}

class GroupingEntry {
	AggregationType aggregationType
	refers Variable variable
	refers Variable aggregatedVariable
}

class UnwindOperator extends UnaryOperator {
	// UNWIND <sourceVariable> AS <targetVariable>
	refers Variable sourceVariable
	refers Variable targetVariable
}

/* Binary operators */
abstract class BinaryOperator extends Operator {
	contains Operator leftInput
	contains Operator rightInput
}

abstract class CommutativeBinaryOperator extends BinaryOperator {
}

abstract class AssociativeBinaryOperator extends BinaryOperator {
}

abstract class AbstractJoinOperator extends BinaryOperator {
	refers Variable[] commonVariables
	int[] commonVariableIndices
}

class JoinOperator extends AbstractJoinOperator, CommutativeBinaryOperator, AssociativeBinaryOperator {
}

class LeftOuterJoinOperator extends AbstractJoinOperator {
}

class AntiJoinOperator extends AbstractJoinOperator {
}

class UnionOperator extends CommutativeBinaryOperator, AssociativeBinaryOperator {
	boolean bag // set or bag union
}

/* expression */
abstract class Expression {
	refers RelalgContainer ^container opposite expressions
	String text
}

abstract class ArithmeticExpression extends ComparableExpression {
}

abstract class UnaryExpression extends Expression {
}

abstract class BinaryExpression extends Expression {
}

// arithmetic operations evaluate to a number, hence they are arithmetic expressins
class ArithmeticOperationExpression extends BinaryExpression, ArithmeticExpression {
	BinaryArithmeticOperator operator
	refers ArithmeticExpression leftOperand
	refers ArithmeticExpression rightOperand
}

class UnaryArithmeticOperationExpression extends UnaryExpression, ArithmeticExpression {
	UnaryArithmeticOperator operator
	refers ArithmeticExpression leftOperand
}

// arithmetic comparisons evaluate to true/false, hence they are logical expressions
class ArithmeticComparisonExpression extends BinaryExpression, LogicalExpression {
	ArithmeticComparisonOperator operator
	refers ComparableExpression leftOperand
	refers ComparableExpression rightOperand
}

// not sure what we will make of this
abstract class StringExpression extends ComparableExpression {
}

abstract class LogicalExpression extends Expression {
}

class Parameter extends ComparableExpression {
    String name
}

class BinaryLogicalExpression extends BinaryExpression, LogicalExpression {
	BinaryLogicalOperator operator
	refers LogicalExpression leftOperand
	refers LogicalExpression rightOperand
}

class UnaryLogicalExpression extends UnaryExpression, LogicalExpression {
	UnaryLogicalOperator operator
	refers LogicalExpression leftOperand
}

// for conditions like "nodeVariable IS NULL"
// possibly later ElementVariable can be generalized
class UnaryNodeLogicalExpression extends UnaryExpression, LogicalExpression {
	UnaryNodeLogicalOperator operator
	refers ElementVariable leftOperand
}

abstract class ComparableExpression extends Expression {
}

abstract class Atom extends Expression {
}

abstract class Literal extends Atom {
}

class BooleanLiteral extends Literal, LogicalExpression {
	boolean value
}

class StringLiteral extends Literal, StringExpression {
	String value
}

abstract class NumberLiteral extends Literal, ArithmeticExpression {
}

class DoubleLiteral extends NumberLiteral {
	double value
}

class IntegerLiteral extends NumberLiteral {
	int value
}

/* enums */
enum Direction {
	BOTH
	IN
	OUT
}

enum OrderDirection {
	ASCENDING
	DESCENDING
}

enum BinaryArithmeticOperator {
	PLUS
	MINUS
	MULTIPLICATION
	DIVISION
	MOD
	POWER
}

enum ArithmeticComparisonOperator {
	EQUAL_TO
	NOT_EQUAL_TO
	GREATER_THAN
	GREATER_THAN_OR_EQUAL
	LESS_THAN
	LESS_THAN_OR_EQUAL
}

enum UnaryArithmeticOperator {
	MINUS
	PLUS
}

enum BinaryLogicalOperator {
	AND
	OR
	XOR
}

enum UnaryLogicalOperator {
	NOT
	IS_NULL
	IS_NOT_NULL
}

enum UnaryNodeLogicalOperator {
	IS_NULL
	IS_NOT_NULL
}

enum AggregationType {
	COUNT
	SUM
	AVG
	MAX
	MIN
}

/**
 * Indicates if the labelset represented is theoretically satisfiable or not
 * 
 * An EMP
 * 
 * If it is undefined, it matches every labels.
 * If it is defined, but empty, matching semantics differs.
 * Indicates if this labelset is theoretically satisfiable (true)
 * or non-satisfiable (false).
 *
 * A labelset can be non-satisfiable (false, also known as contradicting) if,
 * for the same edge variable edge1, the following labelset constraints
 * were given in the query:
 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
 *  2. [edge1:C], so edge1 needs to have label C.
 *  These are contradicting as a single edge instance can have at most one label.
 */
enum LabelSetStatus {
	/** Each edge and vertex satisfies an empty labelset constraint */
	EMPTY
	/**
	 * Theoretically, a non-empty labelset constraint is satisfiable,
	 * but matching semantics differ for different variables:
	 *  1. a vertex must have *all* of the labels
	 *  2. an edge must have *one* of the labels
	 */
	NON_EMPTY
	/**
	 * A labelset constraint might be non-satisfiable,
	 * in case it is a combination of multiple  labelset constraints.
	 * 
	 * For an edge variable, the combination of the following labelset constraints
	 * is contradicting, thus un-satisfiable:
	 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
	 *  2. [edge1:C], so edge1 needs to have label C.
	 * These are contradicting as a single edge instance can have at most one label.
	 */
	CONTRADICTING
}
