package org.slizaa.neo4j.opencypher.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.slizaa.neo4j.opencypher.services.OpenCypherGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalOpenCypherParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLSHORTESTPATHS", "FIELDTERMINATOR", "RELATIONSHIP", "SHORTESTPATH", "CONSTRAINT", "DESCENDING", "ASCENDING", "CONTAINS", "DISTINCT", "OPTIONAL", "PERIODIC", "EXPLAIN", "EXTRACT", "FOREACH", "HEADERS", "PROFILE", "ASSERT", "COMMIT", "CREATE", "CYPHER", "DELETE", "DETACH", "EXISTS", "FILTER", "REDUCE", "REMOVE", "RETURN", "SINGLE", "STARTS", "UNIQUE", "UNWIND", "COUNT", "FALSE", "INDEX", "LIMIT", "MATCH", "MERGE", "ORDER", "START", "UNION", "USING", "WHERE", "CASE", "DESC", "DROP", "ELSE", "ENDS", "FROM", "JOIN", "LOAD", "NODE", "NONE", "NULL", "SCAN", "SKIP", "THEN", "TRUE", "WHEN", "WITH", "ALL", "AND", "ANY", "ASC", "CSV", "END", "NOT", "REL", "SET", "XOR", "ExclamationMarkEqualsSign", "PlusSignEqualsSign", "FullStopFullStop", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignTilde", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "ExclamationMark", "DollarSign", "PercentSign", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "RULE_SYMBOLIC_NAME", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_STRING_LITERAL", "RULE_HEX", "RULE_INT", "RULE_DECIMAL"
    };
    public static final int LessThanSignGreaterThanSign=77;
    public static final int RULE_HEX=114;
    public static final int CREATE=22;
    public static final int JOIN=52;
    public static final int LessThanSign=99;
    public static final int WHEN=61;
    public static final int LeftParenthesis=89;
    public static final int EXPLAIN=15;
    public static final int PERIODIC=14;
    public static final int ELSE=49;
    public static final int EqualsSignTilde=78;
    public static final int NONE=55;
    public static final int ExclamationMark=86;
    public static final int GreaterThanSign=101;
    public static final int IN=82;
    public static final int NODE=54;
    public static final int DISTINCT=12;
    public static final int IS=83;
    public static final int WHERE=45;
    public static final int CASE=46;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int FIELDTERMINATOR=5;
    public static final int STARTS=32;
    public static final int AS=80;
    public static final int VerticalLine=107;
    public static final int PlusSign=92;
    public static final int RULE_INT=115;
    public static final int RULE_ML_COMMENT=110;
    public static final int COUNT=35;
    public static final int THEN=59;
    public static final int XOR=72;
    public static final int LeftSquareBracket=103;
    public static final int SET=71;
    public static final int MERGE=40;
    public static final int CONSTRAINT=8;
    public static final int FOREACH=17;
    public static final int ORDER=41;
    public static final int ASC=66;
    public static final int Comma=93;
    public static final int DELETE=24;
    public static final int HyphenMinus=94;
    public static final int HEADERS=18;
    public static final int BY=81;
    public static final int REMOVE=29;
    public static final int SKIP=58;
    public static final int SCAN=57;
    public static final int LessThanSignEqualsSign=76;
    public static final int Solidus=96;
    public static final int RightCurlyBracket=108;
    public static final int UNWIND=34;
    public static final int FullStop=95;
    public static final int DETACH=25;
    public static final int Semicolon=98;
    public static final int ASCENDING=10;
    public static final int QuestionMark=102;
    public static final int SHORTESTPATH=7;
    public static final int REL=70;
    public static final int CYPHER=23;
    public static final int ExclamationMarkEqualsSign=73;
    public static final int UNION=43;
    public static final int ALL=63;
    public static final int SINGLE=31;
    public static final int FROM=51;
    public static final int DESC=47;
    public static final int OPTIONAL=13;
    public static final int PercentSign=88;
    public static final int ALLSHORTESTPATHS=4;
    public static final int FullStopFullStop=75;
    public static final int DESCENDING=9;
    public static final int INDEX=37;
    public static final int RightSquareBracket=104;
    public static final int EXTRACT=16;
    public static final int NULL=56;
    public static final int UNIQUE=33;
    public static final int RightParenthesis=90;
    public static final int TRUE=60;
    public static final int USING=44;
    public static final int RULE_DECIMAL=116;
    public static final int NOT=69;
    public static final int AND=64;
    public static final int END=68;
    public static final int RELATIONSHIP=6;
    public static final int REDUCE=28;
    public static final int LOAD=53;
    public static final int LIMIT=38;
    public static final int CONTAINS=11;
    public static final int ANY=65;
    public static final int RULE_STRING_LITERAL=113;
    public static final int DROP=48;
    public static final int RULE_SL_COMMENT=111;
    public static final int RETURN=30;
    public static final int EqualsSign=100;
    public static final int PROFILE=19;
    public static final int ENDS=50;
    public static final int Colon=97;
    public static final int RULE_SYMBOLIC_NAME=109;
    public static final int EOF=-1;
    public static final int Asterisk=91;
    public static final int PlusSignEqualsSign=74;
    public static final int ON=84;
    public static final int FILTER=27;
    public static final int OR=85;
    public static final int EXISTS=26;
    public static final int ASSERT=20;
    public static final int COMMIT=21;
    public static final int RULE_WS=112;
    public static final int CSV=67;
    public static final int LeftCurlyBracket=106;
    public static final int WITH=62;
    public static final int CircumflexAccent=105;
    public static final int DollarSign=87;
    public static final int FALSE=36;
    public static final int START=42;
    public static final int MATCH=39;

    // delegates
    // delegators


        public InternalOpenCypherParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalOpenCypherParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalOpenCypherParser.tokenNames; }
    public String getGrammarFileName() { return "InternalOpenCypherParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private OpenCypherGrammarAccess grammarAccess;

        public InternalOpenCypherParser(TokenStream input, OpenCypherGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Cypher";
       	}

       	@Override
       	protected OpenCypherGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleCypher"
    // InternalOpenCypherParser.g:64:1: entryRuleCypher returns [EObject current=null] : iv_ruleCypher= ruleCypher EOF ;
    public final EObject entryRuleCypher() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCypher = null;


        try {
            // InternalOpenCypherParser.g:64:47: (iv_ruleCypher= ruleCypher EOF )
            // InternalOpenCypherParser.g:65:2: iv_ruleCypher= ruleCypher EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCypherRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCypher=ruleCypher();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCypher; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCypher"


    // $ANTLR start "ruleCypher"
    // InternalOpenCypherParser.g:71:1: ruleCypher returns [EObject current=null] : ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? ) ;
    public final EObject ruleCypher() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        EObject lv_queryOptions_1_0 = null;

        EObject lv_statement_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:77:2: ( ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? ) )
            // InternalOpenCypherParser.g:78:2: ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )
            {
            // InternalOpenCypherParser.g:78:2: ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )
            // InternalOpenCypherParser.g:79:3: () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )?
            {
            // InternalOpenCypherParser.g:79:3: ()
            // InternalOpenCypherParser.g:80:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCypherAccess().getCypherAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:89:3: ( (lv_queryOptions_1_0= ruleQueryOptions ) )
            // InternalOpenCypherParser.g:90:4: (lv_queryOptions_1_0= ruleQueryOptions )
            {
            // InternalOpenCypherParser.g:90:4: (lv_queryOptions_1_0= ruleQueryOptions )
            // InternalOpenCypherParser.g:91:5: lv_queryOptions_1_0= ruleQueryOptions
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_3);
            lv_queryOptions_1_0=ruleQueryOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCypherRule());
              					}
              					set(
              						current,
              						"queryOptions",
              						lv_queryOptions_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.QueryOptions");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:108:3: ( (lv_statement_2_0= ruleStatement ) )
            // InternalOpenCypherParser.g:109:4: (lv_statement_2_0= ruleStatement )
            {
            // InternalOpenCypherParser.g:109:4: (lv_statement_2_0= ruleStatement )
            // InternalOpenCypherParser.g:110:5: lv_statement_2_0= ruleStatement
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCypherAccess().getStatementStatementParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_4);
            lv_statement_2_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCypherRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:127:3: (otherlv_3= Semicolon )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==Semicolon) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // InternalOpenCypherParser.g:128:4: otherlv_3= Semicolon
                    {
                    otherlv_3=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getCypherAccess().getSemicolonKeyword_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCypher"


    // $ANTLR start "entryRuleQueryOptions"
    // InternalOpenCypherParser.g:137:1: entryRuleQueryOptions returns [EObject current=null] : iv_ruleQueryOptions= ruleQueryOptions EOF ;
    public final EObject entryRuleQueryOptions() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryOptions = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalOpenCypherParser.g:141:2: (iv_ruleQueryOptions= ruleQueryOptions EOF )
            // InternalOpenCypherParser.g:142:2: iv_ruleQueryOptions= ruleQueryOptions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQueryOptions=ruleQueryOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQueryOptions; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleQueryOptions"


    // $ANTLR start "ruleQueryOptions"
    // InternalOpenCypherParser.g:151:1: ruleQueryOptions returns [EObject current=null] : ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) ) ;
    public final EObject ruleQueryOptions() throws RecognitionException {
        EObject current = null;

        Token lv_explain_2_0=null;
        Token lv_profile_3_0=null;
        EObject lv_cypherOption_4_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalOpenCypherParser.g:160:2: ( ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) ) )
            // InternalOpenCypherParser.g:161:2: ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) )
            {
            // InternalOpenCypherParser.g:161:2: ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) )
            // InternalOpenCypherParser.g:162:3: () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) )
            {
            // InternalOpenCypherParser.g:162:3: ()
            // InternalOpenCypherParser.g:163:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:172:3: ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) )
            // InternalOpenCypherParser.g:173:4: ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) )
            {
            // InternalOpenCypherParser.g:173:4: ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) )
            // InternalOpenCypherParser.g:174:5: ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* )
            {
            getUnorderedGroupHelper().enter(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            // InternalOpenCypherParser.g:177:5: ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* )
            // InternalOpenCypherParser.g:178:6: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )*
            {
            // InternalOpenCypherParser.g:178:6: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )*
            loop3:
            do {
                int alt3=4;
                int LA3_0 = input.LA(1);

                if ( LA3_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                    alt3=1;
                }
                else if ( LA3_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                    alt3=2;
                }
                else if ( LA3_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                    alt3=3;
                }


                switch (alt3) {
            	case 1 :
            	    // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
            	    {
            	    // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
            	    // InternalOpenCypherParser.g:180:5: {...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
            	    }
            	    // InternalOpenCypherParser.g:180:109: ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
            	    // InternalOpenCypherParser.g:181:6: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
            	    // InternalOpenCypherParser.g:184:9: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
            	    // InternalOpenCypherParser.g:184:10: {...}? => ( (lv_explain_2_0= EXPLAIN ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    }
            	    // InternalOpenCypherParser.g:184:19: ( (lv_explain_2_0= EXPLAIN ) )
            	    // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
            	    {
            	    // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
            	    // InternalOpenCypherParser.g:185:10: lv_explain_2_0= EXPLAIN
            	    {
            	    lv_explain_2_0=(Token)match(input,EXPLAIN,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_explain_2_0, grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getQueryOptionsRule());
            	      										}
            	      										setWithLastConsumed(current, "explain", true, "EXPLAIN");
            	      									
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
            	    {
            	    // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
            	    // InternalOpenCypherParser.g:203:5: {...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
            	    }
            	    // InternalOpenCypherParser.g:203:109: ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
            	    // InternalOpenCypherParser.g:204:6: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
            	    // InternalOpenCypherParser.g:207:9: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
            	    // InternalOpenCypherParser.g:207:10: {...}? => ( (lv_profile_3_0= PROFILE ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    }
            	    // InternalOpenCypherParser.g:207:19: ( (lv_profile_3_0= PROFILE ) )
            	    // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
            	    {
            	    // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
            	    // InternalOpenCypherParser.g:208:10: lv_profile_3_0= PROFILE
            	    {
            	    lv_profile_3_0=(Token)match(input,PROFILE,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_profile_3_0, grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getQueryOptionsRule());
            	      										}
            	      										setWithLastConsumed(current, "profile", true, "PROFILE");
            	      									
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
            	    {
            	    // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
            	    // InternalOpenCypherParser.g:226:5: {...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
            	    }
            	    // InternalOpenCypherParser.g:226:109: ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
            	    // InternalOpenCypherParser.g:227:6: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
            	    // InternalOpenCypherParser.g:230:9: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
            	    int cnt2=0;
            	    loop2:
            	    do {
            	        int alt2=2;
            	        int LA2_0 = input.LA(1);

            	        if ( (LA2_0==CYPHER) ) {
            	            int LA2_2 = input.LA(2);

            	            if ( ((synpred4_InternalOpenCypherParser()&&(true))) ) {
            	                alt2=1;
            	            }


            	        }


            	        switch (alt2) {
            	    	case 1 :
            	    	    // InternalOpenCypherParser.g:230:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    	    }
            	    	    // InternalOpenCypherParser.g:230:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
            	    	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
            	    	    {
            	    	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
            	    	    // InternalOpenCypherParser.g:231:10: lv_cypherOption_4_0= ruleCypherOption
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_5);
            	    	    lv_cypherOption_4_0=ruleCypherOption();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getQueryOptionsRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"cypherOption",
            	    	      											lv_cypherOption_4_0,
            	    	      											"org.slizaa.neo4j.opencypher.OpenCypher.CypherOption");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt2 >= 1 ) break loop2;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(2, input);
            	                throw eee;
            	        }
            	        cnt2++;
            	    } while (true);

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleQueryOptions"


    // $ANTLR start "entryRuleCypherOption"
    // InternalOpenCypherParser.g:267:1: entryRuleCypherOption returns [EObject current=null] : iv_ruleCypherOption= ruleCypherOption EOF ;
    public final EObject entryRuleCypherOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCypherOption = null;


        try {
            // InternalOpenCypherParser.g:267:53: (iv_ruleCypherOption= ruleCypherOption EOF )
            // InternalOpenCypherParser.g:268:2: iv_ruleCypherOption= ruleCypherOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCypherOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCypherOption=ruleCypherOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCypherOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCypherOption"


    // $ANTLR start "ruleCypherOption"
    // InternalOpenCypherParser.g:274:1: ruleCypherOption returns [EObject current=null] : ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* ) ;
    public final EObject ruleCypherOption() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_versionNumber_2_0 = null;

        EObject lv_configurationOption_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:280:2: ( ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* ) )
            // InternalOpenCypherParser.g:281:2: ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* )
            {
            // InternalOpenCypherParser.g:281:2: ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* )
            // InternalOpenCypherParser.g:282:3: () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*
            {
            // InternalOpenCypherParser.g:282:3: ()
            // InternalOpenCypherParser.g:283:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCypherOptionAccess().getCypherOptionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,CYPHER,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:296:3: ( (lv_versionNumber_2_0= ruleVersionNumber ) )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( ((LA4_0>=RULE_HEX && LA4_0<=RULE_DECIMAL)) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // InternalOpenCypherParser.g:297:4: (lv_versionNumber_2_0= ruleVersionNumber )
                    {
                    // InternalOpenCypherParser.g:297:4: (lv_versionNumber_2_0= ruleVersionNumber )
                    // InternalOpenCypherParser.g:298:5: lv_versionNumber_2_0= ruleVersionNumber
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_7);
                    lv_versionNumber_2_0=ruleVersionNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCypherOptionRule());
                      					}
                      					set(
                      						current,
                      						"versionNumber",
                      						lv_versionNumber_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.VersionNumber");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:315:3: ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==RULE_SYMBOLIC_NAME) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // InternalOpenCypherParser.g:316:4: (lv_configurationOption_3_0= ruleConfigurationOption )
            	    {
            	    // InternalOpenCypherParser.g:316:4: (lv_configurationOption_3_0= ruleConfigurationOption )
            	    // InternalOpenCypherParser.g:317:5: lv_configurationOption_3_0= ruleConfigurationOption
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_configurationOption_3_0=ruleConfigurationOption();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCypherOptionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"configurationOption",
            	      						lv_configurationOption_3_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.ConfigurationOption");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCypherOption"


    // $ANTLR start "entryRuleVersionNumber"
    // InternalOpenCypherParser.g:338:1: entryRuleVersionNumber returns [EObject current=null] : iv_ruleVersionNumber= ruleVersionNumber EOF ;
    public final EObject entryRuleVersionNumber() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVersionNumber = null;


        try {
            // InternalOpenCypherParser.g:338:54: (iv_ruleVersionNumber= ruleVersionNumber EOF )
            // InternalOpenCypherParser.g:339:2: iv_ruleVersionNumber= ruleVersionNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVersionNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVersionNumber=ruleVersionNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVersionNumber; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVersionNumber"


    // $ANTLR start "ruleVersionNumber"
    // InternalOpenCypherParser.g:345:1: ruleVersionNumber returns [EObject current=null] : ( (lv_versionNumber_0_0= ruleNumber ) ) ;
    public final EObject ruleVersionNumber() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_versionNumber_0_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:351:2: ( ( (lv_versionNumber_0_0= ruleNumber ) ) )
            // InternalOpenCypherParser.g:352:2: ( (lv_versionNumber_0_0= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:352:2: ( (lv_versionNumber_0_0= ruleNumber ) )
            // InternalOpenCypherParser.g:353:3: (lv_versionNumber_0_0= ruleNumber )
            {
            // InternalOpenCypherParser.g:353:3: (lv_versionNumber_0_0= ruleNumber )
            // InternalOpenCypherParser.g:354:4: lv_versionNumber_0_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_versionNumber_0_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getVersionNumberRule());
              				}
              				set(
              					current,
              					"versionNumber",
              					lv_versionNumber_0_0,
              					"org.slizaa.neo4j.opencypher.OpenCypher.Number");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVersionNumber"


    // $ANTLR start "entryRuleConfigurationOption"
    // InternalOpenCypherParser.g:374:1: entryRuleConfigurationOption returns [EObject current=null] : iv_ruleConfigurationOption= ruleConfigurationOption EOF ;
    public final EObject entryRuleConfigurationOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConfigurationOption = null;


        try {
            // InternalOpenCypherParser.g:374:60: (iv_ruleConfigurationOption= ruleConfigurationOption EOF )
            // InternalOpenCypherParser.g:375:2: iv_ruleConfigurationOption= ruleConfigurationOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConfigurationOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConfigurationOption=ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConfigurationOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConfigurationOption"


    // $ANTLR start "ruleConfigurationOption"
    // InternalOpenCypherParser.g:381:1: ruleConfigurationOption returns [EObject current=null] : ( ( (lv_key_0_0= RULE_SYMBOLIC_NAME ) ) otherlv_1= EqualsSign ( (lv_value_2_0= RULE_SYMBOLIC_NAME ) ) ) ;
    public final EObject ruleConfigurationOption() throws RecognitionException {
        EObject current = null;

        Token lv_key_0_0=null;
        Token otherlv_1=null;
        Token lv_value_2_0=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:387:2: ( ( ( (lv_key_0_0= RULE_SYMBOLIC_NAME ) ) otherlv_1= EqualsSign ( (lv_value_2_0= RULE_SYMBOLIC_NAME ) ) ) )
            // InternalOpenCypherParser.g:388:2: ( ( (lv_key_0_0= RULE_SYMBOLIC_NAME ) ) otherlv_1= EqualsSign ( (lv_value_2_0= RULE_SYMBOLIC_NAME ) ) )
            {
            // InternalOpenCypherParser.g:388:2: ( ( (lv_key_0_0= RULE_SYMBOLIC_NAME ) ) otherlv_1= EqualsSign ( (lv_value_2_0= RULE_SYMBOLIC_NAME ) ) )
            // InternalOpenCypherParser.g:389:3: ( (lv_key_0_0= RULE_SYMBOLIC_NAME ) ) otherlv_1= EqualsSign ( (lv_value_2_0= RULE_SYMBOLIC_NAME ) )
            {
            // InternalOpenCypherParser.g:389:3: ( (lv_key_0_0= RULE_SYMBOLIC_NAME ) )
            // InternalOpenCypherParser.g:390:4: (lv_key_0_0= RULE_SYMBOLIC_NAME )
            {
            // InternalOpenCypherParser.g:390:4: (lv_key_0_0= RULE_SYMBOLIC_NAME )
            // InternalOpenCypherParser.g:391:5: lv_key_0_0= RULE_SYMBOLIC_NAME
            {
            lv_key_0_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_key_0_0, grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAMETerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getConfigurationOptionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:411:3: ( (lv_value_2_0= RULE_SYMBOLIC_NAME ) )
            // InternalOpenCypherParser.g:412:4: (lv_value_2_0= RULE_SYMBOLIC_NAME )
            {
            // InternalOpenCypherParser.g:412:4: (lv_value_2_0= RULE_SYMBOLIC_NAME )
            // InternalOpenCypherParser.g:413:5: lv_value_2_0= RULE_SYMBOLIC_NAME
            {
            lv_value_2_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_value_2_0, grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAMETerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getConfigurationOptionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConfigurationOption"


    // $ANTLR start "entryRuleStatement"
    // InternalOpenCypherParser.g:433:1: entryRuleStatement returns [EObject current=null] : iv_ruleStatement= ruleStatement EOF ;
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStatement = null;


        try {
            // InternalOpenCypherParser.g:433:50: (iv_ruleStatement= ruleStatement EOF )
            // InternalOpenCypherParser.g:434:2: iv_ruleStatement= ruleStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStatement"


    // $ANTLR start "ruleStatement"
    // InternalOpenCypherParser.g:440:1: ruleStatement returns [EObject current=null] : (this_Command_0= ruleCommand | this_Query_1= ruleQuery ) ;
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Command_0 = null;

        EObject this_Query_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:446:2: ( (this_Command_0= ruleCommand | this_Query_1= ruleQuery ) )
            // InternalOpenCypherParser.g:447:2: (this_Command_0= ruleCommand | this_Query_1= ruleQuery )
            {
            // InternalOpenCypherParser.g:447:2: (this_Command_0= ruleCommand | this_Query_1= ruleQuery )
            int alt6=2;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case INDEX:
                    {
                    int LA6_4 = input.LA(3);

                    if ( (LA6_4==ON) ) {
                        alt6=1;
                    }
                    else if ( (LA6_4==EqualsSign) ) {
                        alt6=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case CONSTRAINT:
                    {
                    int LA6_5 = input.LA(3);

                    if ( (LA6_5==EqualsSign) ) {
                        alt6=2;
                    }
                    else if ( (LA6_5==ON) ) {
                        alt6=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case ALLSHORTESTPATHS:
                case FIELDTERMINATOR:
                case RELATIONSHIP:
                case SHORTESTPATH:
                case DESCENDING:
                case ASCENDING:
                case CONTAINS:
                case DISTINCT:
                case OPTIONAL:
                case PERIODIC:
                case EXPLAIN:
                case EXTRACT:
                case FOREACH:
                case HEADERS:
                case PROFILE:
                case ASSERT:
                case COMMIT:
                case CREATE:
                case CYPHER:
                case DELETE:
                case DETACH:
                case EXISTS:
                case FILTER:
                case REDUCE:
                case REMOVE:
                case RETURN:
                case SINGLE:
                case STARTS:
                case UNIQUE:
                case UNWIND:
                case COUNT:
                case FALSE:
                case LIMIT:
                case MATCH:
                case MERGE:
                case ORDER:
                case START:
                case UNION:
                case USING:
                case WHERE:
                case CASE:
                case DESC:
                case DROP:
                case ELSE:
                case ENDS:
                case FROM:
                case JOIN:
                case LOAD:
                case NODE:
                case NONE:
                case NULL:
                case SCAN:
                case SKIP:
                case THEN:
                case TRUE:
                case WHEN:
                case WITH:
                case ALL:
                case AND:
                case ANY:
                case ASC:
                case CSV:
                case END:
                case NOT:
                case REL:
                case SET:
                case XOR:
                case AS:
                case BY:
                case IN:
                case IS:
                case ON:
                case OR:
                case LeftParenthesis:
                case RULE_SYMBOLIC_NAME:
                    {
                    alt6=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;
                }

                }
                break;
            case DROP:
                {
                alt6=1;
                }
                break;
            case OPTIONAL:
            case FOREACH:
            case DELETE:
            case DETACH:
            case REMOVE:
            case RETURN:
            case UNWIND:
            case MATCH:
            case MERGE:
            case START:
            case USING:
            case LOAD:
            case WITH:
            case SET:
                {
                alt6=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // InternalOpenCypherParser.g:448:3: this_Command_0= ruleCommand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getCommandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Command_0=ruleCommand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Command_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:460:3: this_Query_1= ruleQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getQueryParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Query_1=ruleQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Query_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStatement"


    // $ANTLR start "entryRuleQuery"
    // InternalOpenCypherParser.g:475:1: entryRuleQuery returns [EObject current=null] : iv_ruleQuery= ruleQuery EOF ;
    public final EObject entryRuleQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQuery = null;


        try {
            // InternalOpenCypherParser.g:475:46: (iv_ruleQuery= ruleQuery EOF )
            // InternalOpenCypherParser.g:476:2: iv_ruleQuery= ruleQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQuery=ruleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQuery"


    // $ANTLR start "ruleQuery"
    // InternalOpenCypherParser.g:482:1: ruleQuery returns [EObject current=null] : (this_RegularQuery_0= ruleRegularQuery | this_BulkImportQuery_1= ruleBulkImportQuery ) ;
    public final EObject ruleQuery() throws RecognitionException {
        EObject current = null;

        EObject this_RegularQuery_0 = null;

        EObject this_BulkImportQuery_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:488:2: ( (this_RegularQuery_0= ruleRegularQuery | this_BulkImportQuery_1= ruleBulkImportQuery ) )
            // InternalOpenCypherParser.g:489:2: (this_RegularQuery_0= ruleRegularQuery | this_BulkImportQuery_1= ruleBulkImportQuery )
            {
            // InternalOpenCypherParser.g:489:2: (this_RegularQuery_0= ruleRegularQuery | this_BulkImportQuery_1= ruleBulkImportQuery )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==OPTIONAL||LA7_0==FOREACH||LA7_0==CREATE||(LA7_0>=DELETE && LA7_0<=DETACH)||(LA7_0>=REMOVE && LA7_0<=RETURN)||LA7_0==UNWIND||(LA7_0>=MATCH && LA7_0<=MERGE)||LA7_0==START||LA7_0==LOAD||LA7_0==WITH||LA7_0==SET) ) {
                alt7=1;
            }
            else if ( (LA7_0==USING) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // InternalOpenCypherParser.g:490:3: this_RegularQuery_0= ruleRegularQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularQuery_0=ruleRegularQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RegularQuery_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:502:3: this_BulkImportQuery_1= ruleBulkImportQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BulkImportQuery_1=ruleBulkImportQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BulkImportQuery_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQuery"


    // $ANTLR start "entryRuleRegularQuery"
    // InternalOpenCypherParser.g:517:1: entryRuleRegularQuery returns [EObject current=null] : iv_ruleRegularQuery= ruleRegularQuery EOF ;
    public final EObject entryRuleRegularQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegularQuery = null;


        try {
            // InternalOpenCypherParser.g:517:53: (iv_ruleRegularQuery= ruleRegularQuery EOF )
            // InternalOpenCypherParser.g:518:2: iv_ruleRegularQuery= ruleRegularQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularQuery=ruleRegularQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRegularQuery"


    // $ANTLR start "ruleRegularQuery"
    // InternalOpenCypherParser.g:524:1: ruleRegularQuery returns [EObject current=null] : (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) ) )* ) ;
    public final EObject ruleRegularQuery() throws RecognitionException {
        EObject current = null;

        EObject this_SingleQuery_0 = null;

        EObject lv_union_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:530:2: ( (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) ) )* ) )
            // InternalOpenCypherParser.g:531:2: (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) ) )* )
            {
            // InternalOpenCypherParser.g:531:2: (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) ) )* )
            // InternalOpenCypherParser.g:532:3: this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_10);
            this_SingleQuery_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_SingleQuery_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:543:3: ( () ( (lv_union_2_0= ruleUnion ) ) )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==UNION) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // InternalOpenCypherParser.g:544:4: () ( (lv_union_2_0= ruleUnion ) )
            	    {
            	    // InternalOpenCypherParser.g:544:4: ()
            	    // InternalOpenCypherParser.g:545:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getRegularQueryAccess().getRegularQuerySingleQueryAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:554:4: ( (lv_union_2_0= ruleUnion ) )
            	    // InternalOpenCypherParser.g:555:5: (lv_union_2_0= ruleUnion )
            	    {
            	    // InternalOpenCypherParser.g:555:5: (lv_union_2_0= ruleUnion )
            	    // InternalOpenCypherParser.g:556:6: lv_union_2_0= ruleUnion
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_union_2_0=ruleUnion();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRegularQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"union",
            	      							lv_union_2_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.Union");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRegularQuery"


    // $ANTLR start "entryRuleBulkImportQuery"
    // InternalOpenCypherParser.g:578:1: entryRuleBulkImportQuery returns [EObject current=null] : iv_ruleBulkImportQuery= ruleBulkImportQuery EOF ;
    public final EObject entryRuleBulkImportQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBulkImportQuery = null;


        try {
            // InternalOpenCypherParser.g:578:56: (iv_ruleBulkImportQuery= ruleBulkImportQuery EOF )
            // InternalOpenCypherParser.g:579:2: iv_ruleBulkImportQuery= ruleBulkImportQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBulkImportQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBulkImportQuery=ruleBulkImportQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBulkImportQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBulkImportQuery"


    // $ANTLR start "ruleBulkImportQuery"
    // InternalOpenCypherParser.g:585:1: ruleBulkImportQuery returns [EObject current=null] : ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) ) ;
    public final EObject ruleBulkImportQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_periodicCommitHint_0_0 = null;

        EObject lv_loadCSVQuery_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:591:2: ( ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) ) )
            // InternalOpenCypherParser.g:592:2: ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) )
            {
            // InternalOpenCypherParser.g:592:2: ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) )
            // InternalOpenCypherParser.g:593:3: ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) )
            {
            // InternalOpenCypherParser.g:593:3: ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) )
            // InternalOpenCypherParser.g:594:4: (lv_periodicCommitHint_0_0= rulePeriodicCommitHint )
            {
            // InternalOpenCypherParser.g:594:4: (lv_periodicCommitHint_0_0= rulePeriodicCommitHint )
            // InternalOpenCypherParser.g:595:5: lv_periodicCommitHint_0_0= rulePeriodicCommitHint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_periodicCommitHint_0_0=rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBulkImportQueryRule());
              					}
              					set(
              						current,
              						"periodicCommitHint",
              						lv_periodicCommitHint_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PeriodicCommitHint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:612:3: ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) )
            // InternalOpenCypherParser.g:613:4: (lv_loadCSVQuery_1_0= ruleLoadCSVQuery )
            {
            // InternalOpenCypherParser.g:613:4: (lv_loadCSVQuery_1_0= ruleLoadCSVQuery )
            // InternalOpenCypherParser.g:614:5: lv_loadCSVQuery_1_0= ruleLoadCSVQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_loadCSVQuery_1_0=ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBulkImportQueryRule());
              					}
              					set(
              						current,
              						"loadCSVQuery",
              						lv_loadCSVQuery_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.LoadCSVQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBulkImportQuery"


    // $ANTLR start "entryRuleSingleQuery"
    // InternalOpenCypherParser.g:635:1: entryRuleSingleQuery returns [EObject current=null] : iv_ruleSingleQuery= ruleSingleQuery EOF ;
    public final EObject entryRuleSingleQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSingleQuery = null;


        try {
            // InternalOpenCypherParser.g:635:52: (iv_ruleSingleQuery= ruleSingleQuery EOF )
            // InternalOpenCypherParser.g:636:2: iv_ruleSingleQuery= ruleSingleQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleQuery=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSingleQuery"


    // $ANTLR start "ruleSingleQuery"
    // InternalOpenCypherParser.g:642:1: ruleSingleQuery returns [EObject current=null] : ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* ) ;
    public final EObject ruleSingleQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_clauses_0_0 = null;

        EObject lv_clauses_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:648:2: ( ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* ) )
            // InternalOpenCypherParser.g:649:2: ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            {
            // InternalOpenCypherParser.g:649:2: ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            // InternalOpenCypherParser.g:650:3: ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )*
            {
            // InternalOpenCypherParser.g:650:3: ( (lv_clauses_0_0= ruleClause ) )
            // InternalOpenCypherParser.g:651:4: (lv_clauses_0_0= ruleClause )
            {
            // InternalOpenCypherParser.g:651:4: (lv_clauses_0_0= ruleClause )
            // InternalOpenCypherParser.g:652:5: lv_clauses_0_0= ruleClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_12);
            lv_clauses_0_0=ruleClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSingleQueryRule());
              					}
              					add(
              						current,
              						"clauses",
              						lv_clauses_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:669:3: ( (lv_clauses_1_0= ruleClause ) )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==OPTIONAL||LA9_0==FOREACH||LA9_0==CREATE||(LA9_0>=DELETE && LA9_0<=DETACH)||(LA9_0>=REMOVE && LA9_0<=RETURN)||LA9_0==UNWIND||(LA9_0>=MATCH && LA9_0<=MERGE)||LA9_0==START||LA9_0==LOAD||LA9_0==WITH||LA9_0==SET) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // InternalOpenCypherParser.g:670:4: (lv_clauses_1_0= ruleClause )
            	    {
            	    // InternalOpenCypherParser.g:670:4: (lv_clauses_1_0= ruleClause )
            	    // InternalOpenCypherParser.g:671:5: lv_clauses_1_0= ruleClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_12);
            	    lv_clauses_1_0=ruleClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSingleQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"clauses",
            	      						lv_clauses_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSingleQuery"


    // $ANTLR start "entryRulePeriodicCommitHint"
    // InternalOpenCypherParser.g:692:1: entryRulePeriodicCommitHint returns [EObject current=null] : iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF ;
    public final EObject entryRulePeriodicCommitHint() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePeriodicCommitHint = null;


        try {
            // InternalOpenCypherParser.g:692:59: (iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF )
            // InternalOpenCypherParser.g:693:2: iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPeriodicCommitHintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePeriodicCommitHint=rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePeriodicCommitHint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePeriodicCommitHint"


    // $ANTLR start "rulePeriodicCommitHint"
    // InternalOpenCypherParser.g:699:1: rulePeriodicCommitHint returns [EObject current=null] : ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? ) ;
    public final EObject rulePeriodicCommitHint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_numberOfRowsPerCommit_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:705:2: ( ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? ) )
            // InternalOpenCypherParser.g:706:2: ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? )
            {
            // InternalOpenCypherParser.g:706:2: ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? )
            // InternalOpenCypherParser.g:707:3: () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )?
            {
            // InternalOpenCypherParser.g:707:3: ()
            // InternalOpenCypherParser.g:708:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,USING,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,PERIODIC,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,COMMIT,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:729:3: ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=RULE_HEX && LA10_0<=RULE_DECIMAL)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalOpenCypherParser.g:730:4: (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger )
                    {
                    // InternalOpenCypherParser.g:730:4: (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger )
                    // InternalOpenCypherParser.g:731:5: lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_numberOfRowsPerCommit_4_0=ruleDecimalInteger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPeriodicCommitHintRule());
                      					}
                      					set(
                      						current,
                      						"numberOfRowsPerCommit",
                      						lv_numberOfRowsPerCommit_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.DecimalInteger");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePeriodicCommitHint"


    // $ANTLR start "entryRuleLoadCSVQuery"
    // InternalOpenCypherParser.g:752:1: entryRuleLoadCSVQuery returns [EObject current=null] : iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF ;
    public final EObject entryRuleLoadCSVQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoadCSVQuery = null;


        try {
            // InternalOpenCypherParser.g:752:53: (iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF )
            // InternalOpenCypherParser.g:753:2: iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSVQuery=ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSVQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSVQuery"


    // $ANTLR start "ruleLoadCSVQuery"
    // InternalOpenCypherParser.g:759:1: ruleLoadCSVQuery returns [EObject current=null] : ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* ) ;
    public final EObject ruleLoadCSVQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_loadCSV_0_0 = null;

        EObject lv_clauses_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:765:2: ( ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* ) )
            // InternalOpenCypherParser.g:766:2: ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            {
            // InternalOpenCypherParser.g:766:2: ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            // InternalOpenCypherParser.g:767:3: ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )*
            {
            // InternalOpenCypherParser.g:767:3: ( (lv_loadCSV_0_0= ruleLoadCSV ) )
            // InternalOpenCypherParser.g:768:4: (lv_loadCSV_0_0= ruleLoadCSV )
            {
            // InternalOpenCypherParser.g:768:4: (lv_loadCSV_0_0= ruleLoadCSV )
            // InternalOpenCypherParser.g:769:5: lv_loadCSV_0_0= ruleLoadCSV
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_12);
            lv_loadCSV_0_0=ruleLoadCSV();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVQueryRule());
              					}
              					set(
              						current,
              						"loadCSV",
              						lv_loadCSV_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.LoadCSV");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:786:3: ( (lv_clauses_1_0= ruleClause ) )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==OPTIONAL||LA11_0==FOREACH||LA11_0==CREATE||(LA11_0>=DELETE && LA11_0<=DETACH)||(LA11_0>=REMOVE && LA11_0<=RETURN)||LA11_0==UNWIND||(LA11_0>=MATCH && LA11_0<=MERGE)||LA11_0==START||LA11_0==LOAD||LA11_0==WITH||LA11_0==SET) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // InternalOpenCypherParser.g:787:4: (lv_clauses_1_0= ruleClause )
            	    {
            	    // InternalOpenCypherParser.g:787:4: (lv_clauses_1_0= ruleClause )
            	    // InternalOpenCypherParser.g:788:5: lv_clauses_1_0= ruleClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getLoadCSVQueryAccess().getClausesClauseParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_12);
            	    lv_clauses_1_0=ruleClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getLoadCSVQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"clauses",
            	      						lv_clauses_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSVQuery"


    // $ANTLR start "entryRuleUnion"
    // InternalOpenCypherParser.g:809:1: entryRuleUnion returns [EObject current=null] : iv_ruleUnion= ruleUnion EOF ;
    public final EObject entryRuleUnion() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnion = null;


        try {
            // InternalOpenCypherParser.g:809:46: (iv_ruleUnion= ruleUnion EOF )
            // InternalOpenCypherParser.g:810:2: iv_ruleUnion= ruleUnion EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnion=ruleUnion();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnion; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnion"


    // $ANTLR start "ruleUnion"
    // InternalOpenCypherParser.g:816:1: ruleUnion returns [EObject current=null] : (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) ) ;
    public final EObject ruleUnion() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_all_1_0=null;
        EObject lv_singleQuery_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:822:2: ( (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) ) )
            // InternalOpenCypherParser.g:823:2: (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) )
            {
            // InternalOpenCypherParser.g:823:2: (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) )
            // InternalOpenCypherParser.g:824:3: otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) )
            {
            otherlv_0=(Token)match(input,UNION,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnionAccess().getUNIONKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:828:3: ( (lv_all_1_0= ALL ) )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ALL) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // InternalOpenCypherParser.g:829:4: (lv_all_1_0= ALL )
                    {
                    // InternalOpenCypherParser.g:829:4: (lv_all_1_0= ALL )
                    // InternalOpenCypherParser.g:830:5: lv_all_1_0= ALL
                    {
                    lv_all_1_0=(Token)match(input,ALL,FOLLOW_17); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_all_1_0, grammarAccess.getUnionAccess().getAllALLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getUnionRule());
                      					}
                      					setWithLastConsumed(current, "all", true, "ALL");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:842:3: ( (lv_singleQuery_2_0= ruleSingleQuery ) )
            // InternalOpenCypherParser.g:843:4: (lv_singleQuery_2_0= ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:843:4: (lv_singleQuery_2_0= ruleSingleQuery )
            // InternalOpenCypherParser.g:844:5: lv_singleQuery_2_0= ruleSingleQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_singleQuery_2_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionRule());
              					}
              					set(
              						current,
              						"singleQuery",
              						lv_singleQuery_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SingleQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnion"


    // $ANTLR start "entryRuleClause"
    // InternalOpenCypherParser.g:865:1: entryRuleClause returns [EObject current=null] : iv_ruleClause= ruleClause EOF ;
    public final EObject entryRuleClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleClause = null;


        try {
            // InternalOpenCypherParser.g:865:47: (iv_ruleClause= ruleClause EOF )
            // InternalOpenCypherParser.g:866:2: iv_ruleClause= ruleClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleClause=ruleClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleClause"


    // $ANTLR start "ruleClause"
    // InternalOpenCypherParser.g:872:1: ruleClause returns [EObject current=null] : (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn ) ;
    public final EObject ruleClause() throws RecognitionException {
        EObject current = null;

        EObject this_LoadCSV_0 = null;

        EObject this_Start_1 = null;

        EObject this_Match_2 = null;

        EObject this_Unwind_3 = null;

        EObject this_Merge_4 = null;

        EObject this_Create_5 = null;

        EObject this_Set_6 = null;

        EObject this_Delete_7 = null;

        EObject this_Remove_8 = null;

        EObject this_Foreach_9 = null;

        EObject this_With_10 = null;

        EObject this_Return_11 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:878:2: ( (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn ) )
            // InternalOpenCypherParser.g:879:2: (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn )
            {
            // InternalOpenCypherParser.g:879:2: (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn )
            int alt13=12;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt13=1;
                }
                break;
            case START:
                {
                alt13=2;
                }
                break;
            case OPTIONAL:
            case MATCH:
                {
                alt13=3;
                }
                break;
            case UNWIND:
                {
                alt13=4;
                }
                break;
            case MERGE:
                {
                alt13=5;
                }
                break;
            case CREATE:
                {
                alt13=6;
                }
                break;
            case SET:
                {
                alt13=7;
                }
                break;
            case DELETE:
            case DETACH:
                {
                alt13=8;
                }
                break;
            case REMOVE:
                {
                alt13=9;
                }
                break;
            case FOREACH:
                {
                alt13=10;
                }
                break;
            case WITH:
                {
                alt13=11;
                }
                break;
            case RETURN:
                {
                alt13=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // InternalOpenCypherParser.g:880:3: this_LoadCSV_0= ruleLoadCSV
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getLoadCSVParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LoadCSV_0=ruleLoadCSV();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LoadCSV_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:892:3: this_Start_1= ruleStart
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getStartParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Start_1=ruleStart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Start_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:904:3: this_Match_2= ruleMatch
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getMatchParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Match_2=ruleMatch();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Match_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:916:3: this_Unwind_3= ruleUnwind
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getUnwindParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Unwind_3=ruleUnwind();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Unwind_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:928:3: this_Merge_4= ruleMerge
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getMergeParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Merge_4=ruleMerge();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Merge_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:940:3: this_Create_5= ruleCreate
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getCreateParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Create_5=ruleCreate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Create_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:952:3: this_Set_6= ruleSet
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getSetParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Set_6=ruleSet();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Set_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:964:3: this_Delete_7= ruleDelete
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getDeleteParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Delete_7=ruleDelete();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Delete_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:976:3: this_Remove_8= ruleRemove
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getRemoveParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Remove_8=ruleRemove();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Remove_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:988:3: this_Foreach_9= ruleForeach
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getForeachParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Foreach_9=ruleForeach();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Foreach_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:1000:3: this_With_10= ruleWith
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getWithParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_With_10=ruleWith();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_With_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:1012:3: this_Return_11= ruleReturn
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getReturnParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Return_11=ruleReturn();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Return_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleClause"


    // $ANTLR start "entryRuleCommand"
    // InternalOpenCypherParser.g:1027:1: entryRuleCommand returns [EObject current=null] : iv_ruleCommand= ruleCommand EOF ;
    public final EObject entryRuleCommand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCommand = null;


        try {
            // InternalOpenCypherParser.g:1027:48: (iv_ruleCommand= ruleCommand EOF )
            // InternalOpenCypherParser.g:1028:2: iv_ruleCommand= ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCommand=ruleCommand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCommand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalOpenCypherParser.g:1034:1: ruleCommand returns [EObject current=null] : (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint ) ;
    public final EObject ruleCommand() throws RecognitionException {
        EObject current = null;

        EObject this_CreateIndex_0 = null;

        EObject this_DropIndex_1 = null;

        EObject this_CreateUniqueConstraint_2 = null;

        EObject this_DropUniqueConstraint_3 = null;

        EObject this_CreateNodePropertyExistenceConstraint_4 = null;

        EObject this_DropNodePropertyExistenceConstraint_5 = null;

        EObject this_CreateRelationshipPropertyExistenceConstraint_6 = null;

        EObject this_DropRelationshipPropertyExistenceConstraint_7 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1040:2: ( (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1041:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1041:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )
            int alt14=8;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // InternalOpenCypherParser.g:1042:3: this_CreateIndex_0= ruleCreateIndex
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateIndex_0=ruleCreateIndex();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateIndex_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:1054:3: this_DropIndex_1= ruleDropIndex
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropIndex_1=ruleDropIndex();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropIndex_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:1066:3: this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateUniqueConstraint_2=ruleCreateUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateUniqueConstraint_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:1078:3: this_DropUniqueConstraint_3= ruleDropUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropUniqueConstraint_3=ruleDropUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropUniqueConstraint_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:1090:3: this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateNodePropertyExistenceConstraint_4=ruleCreateNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateNodePropertyExistenceConstraint_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:1102:3: this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropNodePropertyExistenceConstraint_5=ruleDropNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropNodePropertyExistenceConstraint_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:1114:3: this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateRelationshipPropertyExistenceConstraint_6=ruleCreateRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateRelationshipPropertyExistenceConstraint_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:1126:3: this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropRelationshipPropertyExistenceConstraint_7=ruleDropRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropRelationshipPropertyExistenceConstraint_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRuleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:1141:1: entryRuleCreateUniqueConstraint returns [EObject current=null] : iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF ;
    public final EObject entryRuleCreateUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateUniqueConstraint = null;


        try {
            // InternalOpenCypherParser.g:1141:63: (iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF )
            // InternalOpenCypherParser.g:1142:2: iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateUniqueConstraint=ruleCreateUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateUniqueConstraint"


    // $ANTLR start "ruleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:1148:1: ruleCreateUniqueConstraint returns [EObject current=null] : (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint ) ;
    public final EObject ruleCreateUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_UniqueConstraint_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1154:2: ( (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:1155:2: (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:1155:2: (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint )
            // InternalOpenCypherParser.g:1156:3: otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_UniqueConstraint_1=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UniqueConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateUniqueConstraint"


    // $ANTLR start "entryRuleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1175:1: entryRuleCreateNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateNodePropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1175:78: (iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1176:2: iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateNodePropertyExistenceConstraint=ruleCreateNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "ruleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1182:1: ruleCreateNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint ) ;
    public final EObject ruleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_NodePropertyExistenceConstraint_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1188:2: ( (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1189:2: (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1189:2: (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1190:3: otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_NodePropertyExistenceConstraint_1=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_NodePropertyExistenceConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1209:1: entryRuleCreateRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1209:86: (iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1210:2: iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateRelationshipPropertyExistenceConstraint=ruleCreateRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1216:1: ruleCreateRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint ) ;
    public final EObject ruleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_RelationshipPropertyExistenceConstraint_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1222:2: ( (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1223:2: (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1223:2: (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1224:3: otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_RelationshipPropertyExistenceConstraint_1=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationshipPropertyExistenceConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateIndex"
    // InternalOpenCypherParser.g:1243:1: entryRuleCreateIndex returns [EObject current=null] : iv_ruleCreateIndex= ruleCreateIndex EOF ;
    public final EObject entryRuleCreateIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateIndex = null;


        try {
            // InternalOpenCypherParser.g:1243:52: (iv_ruleCreateIndex= ruleCreateIndex EOF )
            // InternalOpenCypherParser.g:1244:2: iv_ruleCreateIndex= ruleCreateIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateIndex=ruleCreateIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateIndex"


    // $ANTLR start "ruleCreateIndex"
    // InternalOpenCypherParser.g:1250:1: ruleCreateIndex returns [EObject current=null] : (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) ) ;
    public final EObject ruleCreateIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1256:2: ( (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) ) )
            // InternalOpenCypherParser.g:1257:2: (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) )
            {
            // InternalOpenCypherParser.g:1257:2: (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) )
            // InternalOpenCypherParser.g:1258:3: otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateIndexAccess().getCREATEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1262:3: ( (lv_index_1_0= ruleIndex ) )
            // InternalOpenCypherParser.g:1263:4: (lv_index_1_0= ruleIndex )
            {
            // InternalOpenCypherParser.g:1263:4: (lv_index_1_0= ruleIndex )
            // InternalOpenCypherParser.g:1264:5: lv_index_1_0= ruleIndex
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_index_1_0=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateIndexRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Index");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateIndex"


    // $ANTLR start "entryRuleDropUniqueConstraint"
    // InternalOpenCypherParser.g:1285:1: entryRuleDropUniqueConstraint returns [EObject current=null] : iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF ;
    public final EObject entryRuleDropUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropUniqueConstraint = null;


        try {
            // InternalOpenCypherParser.g:1285:61: (iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF )
            // InternalOpenCypherParser.g:1286:2: iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropUniqueConstraint=ruleDropUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropUniqueConstraint"


    // $ANTLR start "ruleDropUniqueConstraint"
    // InternalOpenCypherParser.g:1292:1: ruleDropUniqueConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) ) ;
    public final EObject ruleDropUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_uniqueConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1298:2: ( (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) ) )
            // InternalOpenCypherParser.g:1299:2: (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) )
            {
            // InternalOpenCypherParser.g:1299:2: (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) )
            // InternalOpenCypherParser.g:1300:3: otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1304:3: ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:1305:4: (lv_uniqueConstraint_1_0= ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:1305:4: (lv_uniqueConstraint_1_0= ruleUniqueConstraint )
            // InternalOpenCypherParser.g:1306:5: lv_uniqueConstraint_1_0= ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_uniqueConstraint_1_0=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropUniqueConstraintRule());
              					}
              					set(
              						current,
              						"uniqueConstraint",
              						lv_uniqueConstraint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.UniqueConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropUniqueConstraint"


    // $ANTLR start "entryRuleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1327:1: entryRuleDropNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleDropNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropNodePropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1327:76: (iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1328:2: iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropNodePropertyExistenceConstraint=ruleDropNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropNodePropertyExistenceConstraint"


    // $ANTLR start "ruleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1334:1: ruleDropNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) ) ;
    public final EObject ruleDropNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_nodePropertyExistenceConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1340:2: ( (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) ) )
            // InternalOpenCypherParser.g:1341:2: (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) )
            {
            // InternalOpenCypherParser.g:1341:2: (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) )
            // InternalOpenCypherParser.g:1342:3: otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1346:3: ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1347:4: (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1347:4: (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1348:5: lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_nodePropertyExistenceConstraint_1_0=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"nodePropertyExistenceConstraint",
              						lv_nodePropertyExistenceConstraint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodePropertyExistenceConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1369:1: entryRuleDropRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1369:84: (iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1370:2: iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropRelationshipPropertyExistenceConstraint=ruleDropRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1376:1: ruleDropRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) ) ;
    public final EObject ruleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_relationshipPropertyExistenceConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1382:2: ( (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) ) )
            // InternalOpenCypherParser.g:1383:2: (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) )
            {
            // InternalOpenCypherParser.g:1383:2: (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) )
            // InternalOpenCypherParser.g:1384:3: otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1388:3: ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1389:4: (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1389:4: (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1390:5: lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_relationshipPropertyExistenceConstraint_1_0=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"relationshipPropertyExistenceConstraint",
              						lv_relationshipPropertyExistenceConstraint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipPropertyExistenceConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropIndex"
    // InternalOpenCypherParser.g:1411:1: entryRuleDropIndex returns [EObject current=null] : iv_ruleDropIndex= ruleDropIndex EOF ;
    public final EObject entryRuleDropIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropIndex = null;


        try {
            // InternalOpenCypherParser.g:1411:50: (iv_ruleDropIndex= ruleDropIndex EOF )
            // InternalOpenCypherParser.g:1412:2: iv_ruleDropIndex= ruleDropIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropIndex=ruleDropIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropIndex"


    // $ANTLR start "ruleDropIndex"
    // InternalOpenCypherParser.g:1418:1: ruleDropIndex returns [EObject current=null] : (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) ) ;
    public final EObject ruleDropIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1424:2: ( (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) ) )
            // InternalOpenCypherParser.g:1425:2: (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) )
            {
            // InternalOpenCypherParser.g:1425:2: (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) )
            // InternalOpenCypherParser.g:1426:3: otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropIndexAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1430:3: ( (lv_index_1_0= ruleIndex ) )
            // InternalOpenCypherParser.g:1431:4: (lv_index_1_0= ruleIndex )
            {
            // InternalOpenCypherParser.g:1431:4: (lv_index_1_0= ruleIndex )
            // InternalOpenCypherParser.g:1432:5: lv_index_1_0= ruleIndex
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_index_1_0=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropIndexRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Index");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropIndex"


    // $ANTLR start "entryRuleIndex"
    // InternalOpenCypherParser.g:1453:1: entryRuleIndex returns [EObject current=null] : iv_ruleIndex= ruleIndex EOF ;
    public final EObject entryRuleIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIndex = null;


        try {
            // InternalOpenCypherParser.g:1453:46: (iv_ruleIndex= ruleIndex EOF )
            // InternalOpenCypherParser.g:1454:2: iv_ruleIndex= ruleIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIndex=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndex"


    // $ANTLR start "ruleIndex"
    // InternalOpenCypherParser.g:1460:1: ruleIndex returns [EObject current=null] : (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_nodeLabel_2_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1466:2: ( (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:1467:2: (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1467:2: (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:1468:3: otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,INDEX,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getINDEXKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIndexAccess().getONKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:1476:3: ( (lv_nodeLabel_2_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:1477:4: (lv_nodeLabel_2_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:1477:4: (lv_nodeLabel_2_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:1478:5: lv_nodeLabel_2_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_nodeLabel_2_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:1499:3: ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:1500:4: (lv_propertyKeyName_4_0= rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:1500:4: (lv_propertyKeyName_4_0= rulePropertyKeyName )
            // InternalOpenCypherParser.g:1501:5: lv_propertyKeyName_4_0= rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_propertyKeyName_4_0=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexRule());
              					}
              					set(
              						current,
              						"propertyKeyName",
              						lv_propertyKeyName_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getIndexAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndex"


    // $ANTLR start "entryRuleUniqueConstraint"
    // InternalOpenCypherParser.g:1526:1: entryRuleUniqueConstraint returns [EObject current=null] : iv_ruleUniqueConstraint= ruleUniqueConstraint EOF ;
    public final EObject entryRuleUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUniqueConstraint = null;


        try {
            // InternalOpenCypherParser.g:1526:57: (iv_ruleUniqueConstraint= ruleUniqueConstraint EOF )
            // InternalOpenCypherParser.g:1527:2: iv_ruleUniqueConstraint= ruleUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUniqueConstraint=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUniqueConstraint"


    // $ANTLR start "ruleUniqueConstraint"
    // InternalOpenCypherParser.g:1533:1: ruleUniqueConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE ) ;
    public final EObject ruleUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_variable_3_0 = null;

        EObject lv_nodeLabel_4_0 = null;

        EObject lv_propertyExpression_7_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1539:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE ) )
            // InternalOpenCypherParser.g:1540:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE )
            {
            // InternalOpenCypherParser.g:1540:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE )
            // InternalOpenCypherParser.g:1541:3: otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUniqueConstraintAccess().getONKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:1553:3: ( (lv_variable_3_0= ruleVariable ) )
            // InternalOpenCypherParser.g:1554:4: (lv_variable_3_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:1554:4: (lv_variable_3_0= ruleVariable )
            // InternalOpenCypherParser.g:1555:5: lv_variable_3_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getVariableVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_variable_3_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:1572:3: ( (lv_nodeLabel_4_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:1573:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:1573:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:1574:5: lv_nodeLabel_4_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_nodeLabel_4_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,ASSERT,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6());
              		
            }
            // InternalOpenCypherParser.g:1599:3: ( (lv_propertyExpression_7_0= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:1600:4: (lv_propertyExpression_7_0= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:1600:4: (lv_propertyExpression_7_0= rulePropertyExpression )
            // InternalOpenCypherParser.g:1601:5: lv_propertyExpression_7_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_27);
            lv_propertyExpression_7_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_7_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,IS,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getUniqueConstraintAccess().getISKeyword_8());
              		
            }
            otherlv_9=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUniqueConstraint"


    // $ANTLR start "entryRuleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1630:1: entryRuleNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodePropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1630:72: (iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1631:2: iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodePropertyExistenceConstraint=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodePropertyExistenceConstraint"


    // $ANTLR start "ruleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1637:1: ruleNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis ) ;
    public final EObject ruleNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        EObject lv_variable_3_0 = null;

        EObject lv_nodeLabel_4_0 = null;

        EObject lv_propertyExpression_9_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1643:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis ) )
            // InternalOpenCypherParser.g:1644:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1644:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis )
            // InternalOpenCypherParser.g:1645:3: otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariable ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:1657:3: ( (lv_variable_3_0= ruleVariable ) )
            // InternalOpenCypherParser.g:1658:4: (lv_variable_3_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:1658:4: (lv_variable_3_0= ruleVariable )
            // InternalOpenCypherParser.g:1659:5: lv_variable_3_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_variable_3_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:1676:3: ( (lv_nodeLabel_4_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:1677:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:1677:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:1678:5: lv_nodeLabel_4_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_nodeLabel_4_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,ASSERT,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6());
              		
            }
            otherlv_7=(Token)match(input,EXISTS,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7());
              		
            }
            otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8());
              		
            }
            // InternalOpenCypherParser.g:1711:3: ( (lv_propertyExpression_9_0= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:1712:4: (lv_propertyExpression_9_0= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:1712:4: (lv_propertyExpression_9_0= rulePropertyExpression )
            // InternalOpenCypherParser.g:1713:5: lv_propertyExpression_9_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_propertyExpression_9_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_9_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1738:1: entryRuleRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1738:80: (iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1739:2: iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPropertyExistenceConstraint=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1745:1: ruleRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis ) ;
    public final EObject ruleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_relationshipPattern_2_0 = null;

        EObject lv_propertyExpression_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1751:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis ) )
            // InternalOpenCypherParser.g:1752:2: (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1752:2: (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis )
            // InternalOpenCypherParser.g:1753:3: otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:1761:3: ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) )
            // InternalOpenCypherParser.g:1762:4: (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax )
            {
            // InternalOpenCypherParser.g:1762:4: (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax )
            // InternalOpenCypherParser.g:1763:5: lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_relationshipPattern_2_0=ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"relationshipPattern",
              						lv_relationshipPattern_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipPatternSyntax");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,ASSERT,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,EXISTS,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5());
              		
            }
            // InternalOpenCypherParser.g:1792:3: ( (lv_propertyExpression_6_0= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:1793:4: (lv_propertyExpression_6_0= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:1793:4: (lv_propertyExpression_6_0= rulePropertyExpression )
            // InternalOpenCypherParser.g:1794:5: lv_propertyExpression_6_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_propertyExpression_6_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:1819:1: entryRuleRelationshipPatternSyntax returns [EObject current=null] : iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF ;
    public final EObject entryRuleRelationshipPatternSyntax() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPatternSyntax = null;


        try {
            // InternalOpenCypherParser.g:1819:66: (iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF )
            // InternalOpenCypherParser.g:1820:2: iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPatternSyntax=ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPatternSyntax; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPatternSyntax"


    // $ANTLR start "ruleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:1826:1: ruleRelationshipPatternSyntax returns [EObject current=null] : (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariable ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis ) ;
    public final EObject ruleRelationshipPatternSyntax() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        AntlrDatatypeRuleToken lv_incoming_2_0 = null;

        EObject lv_variable_5_0 = null;

        AntlrDatatypeRuleToken lv_relType_6_0 = null;

        AntlrDatatypeRuleToken lv_outgoing_9_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1832:2: ( (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariable ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis ) )
            // InternalOpenCypherParser.g:1833:2: (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariable ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1833:2: (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariable ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis )
            // InternalOpenCypherParser.g:1834:3: otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariable ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,RightParenthesis,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:1842:3: ( (lv_incoming_2_0= ruleLeftArrowHead ) )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==LessThanSign) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // InternalOpenCypherParser.g:1843:4: (lv_incoming_2_0= ruleLeftArrowHead )
                    {
                    // InternalOpenCypherParser.g:1843:4: (lv_incoming_2_0= ruleLeftArrowHead )
                    // InternalOpenCypherParser.g:1844:5: lv_incoming_2_0= ruleLeftArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_30);
                    lv_incoming_2_0=ruleLeftArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
                      					}
                      					set(
                      						current,
                      						"incoming",
                      						true,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.LeftArrowHead");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_31);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:1875:3: ( (lv_variable_5_0= ruleVariable ) )
            // InternalOpenCypherParser.g:1876:4: (lv_variable_5_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:1876:4: (lv_variable_5_0= ruleVariable )
            // InternalOpenCypherParser.g:1877:5: lv_variable_5_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_variable_5_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_5_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:1894:3: ( (lv_relType_6_0= ruleRelType ) )
            // InternalOpenCypherParser.g:1895:4: (lv_relType_6_0= ruleRelType )
            {
            // InternalOpenCypherParser.g:1895:4: (lv_relType_6_0= ruleRelType )
            // InternalOpenCypherParser.g:1896:5: lv_relType_6_0= ruleRelType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_32);
            lv_relType_6_0=ruleRelType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
              					}
              					set(
              						current,
              						"relType",
              						lv_relType_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8());
              		
            }
            pushFollow(FOLLOW_33);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:1927:3: ( (lv_outgoing_9_0= ruleRightArrowHead ) )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==GreaterThanSign) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // InternalOpenCypherParser.g:1928:4: (lv_outgoing_9_0= ruleRightArrowHead )
                    {
                    // InternalOpenCypherParser.g:1928:4: (lv_outgoing_9_0= ruleRightArrowHead )
                    // InternalOpenCypherParser.g:1929:5: lv_outgoing_9_0= ruleRightArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0());
                      				
                    }
                    pushFollow(FOLLOW_22);
                    lv_outgoing_9_0=ruleRightArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
                      					}
                      					set(
                      						current,
                      						"outgoing",
                      						true,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.RightArrowHead");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_10=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10());
              		
            }
            otherlv_11=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPatternSyntax"


    // $ANTLR start "entryRuleLoadCSV"
    // InternalOpenCypherParser.g:1958:1: entryRuleLoadCSV returns [EObject current=null] : iv_ruleLoadCSV= ruleLoadCSV EOF ;
    public final EObject entryRuleLoadCSV() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoadCSV = null;


        try {
            // InternalOpenCypherParser.g:1958:48: (iv_ruleLoadCSV= ruleLoadCSV EOF )
            // InternalOpenCypherParser.g:1959:2: iv_ruleLoadCSV= ruleLoadCSV EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSV=ruleLoadCSV();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSV; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSV"


    // $ANTLR start "ruleLoadCSV"
    // InternalOpenCypherParser.g:1965:1: ruleLoadCSV returns [EObject current=null] : ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariable ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? ) ;
    public final EObject ruleLoadCSV() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token lv_fieldterminator_9_0=null;
        AntlrDatatypeRuleToken lv_withHeaders_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject lv_variable_7_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1971:2: ( ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariable ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? ) )
            // InternalOpenCypherParser.g:1972:2: ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariable ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? )
            {
            // InternalOpenCypherParser.g:1972:2: ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariable ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? )
            // InternalOpenCypherParser.g:1973:3: () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariable ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )?
            {
            // InternalOpenCypherParser.g:1973:3: ()
            // InternalOpenCypherParser.g:1974:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLoadCSVAccess().getLoadCSVAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LOAD,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getLoadCSVAccess().getLOADKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,CSV,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getLoadCSVAccess().getCSVKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:1991:3: ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==WITH) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // InternalOpenCypherParser.g:1992:4: (lv_withHeaders_3_0= ruleLoadCSVWithHeaders )
                    {
                    // InternalOpenCypherParser.g:1992:4: (lv_withHeaders_3_0= ruleLoadCSVWithHeaders )
                    // InternalOpenCypherParser.g:1993:5: lv_withHeaders_3_0= ruleLoadCSVWithHeaders
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_36);
                    lv_withHeaders_3_0=ruleLoadCSVWithHeaders();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
                      					}
                      					set(
                      						current,
                      						"withHeaders",
                      						true,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.LoadCSVWithHeaders");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,FROM,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getLoadCSVAccess().getFROMKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:2014:3: ( (lv_expression_5_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2015:4: (lv_expression_5_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2015:4: (lv_expression_5_0= ruleExpression )
            // InternalOpenCypherParser.g:2016:5: lv_expression_5_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_38);
            lv_expression_5_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,AS,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getLoadCSVAccess().getASKeyword_6());
              		
            }
            // InternalOpenCypherParser.g:2037:3: ( (lv_variable_7_0= ruleVariable ) )
            // InternalOpenCypherParser.g:2038:4: (lv_variable_7_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:2038:4: (lv_variable_7_0= ruleVariable )
            // InternalOpenCypherParser.g:2039:5: lv_variable_7_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVAccess().getVariableVariableParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_39);
            lv_variable_7_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_7_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2056:3: (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FIELDTERMINATOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // InternalOpenCypherParser.g:2057:4: otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) )
                    {
                    otherlv_8=(Token)match(input,FIELDTERMINATOR,FOLLOW_40); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0());
                      			
                    }
                    // InternalOpenCypherParser.g:2061:4: ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:2062:5: (lv_fieldterminator_9_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:2062:5: (lv_fieldterminator_9_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:2063:6: lv_fieldterminator_9_0= RULE_STRING_LITERAL
                    {
                    lv_fieldterminator_9_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_fieldterminator_9_0, grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLoadCSVRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"fieldterminator",
                      							lv_fieldterminator_9_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSV"


    // $ANTLR start "entryRuleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:2084:1: entryRuleLoadCSVWithHeaders returns [String current=null] : iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF ;
    public final String entryRuleLoadCSVWithHeaders() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLoadCSVWithHeaders = null;


        try {
            // InternalOpenCypherParser.g:2084:58: (iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF )
            // InternalOpenCypherParser.g:2085:2: iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSVWithHeaders=ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSVWithHeaders.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSVWithHeaders"


    // $ANTLR start "ruleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:2091:1: ruleLoadCSVWithHeaders returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= WITH kw= HEADERS ) ;
    public final AntlrDatatypeRuleToken ruleLoadCSVWithHeaders() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:2097:2: ( (kw= WITH kw= HEADERS ) )
            // InternalOpenCypherParser.g:2098:2: (kw= WITH kw= HEADERS )
            {
            // InternalOpenCypherParser.g:2098:2: (kw= WITH kw= HEADERS )
            // InternalOpenCypherParser.g:2099:3: kw= WITH kw= HEADERS
            {
            kw=(Token)match(input,WITH,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0());
              		
            }
            kw=(Token)match(input,HEADERS,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSVWithHeaders"


    // $ANTLR start "entryRuleMatch"
    // InternalOpenCypherParser.g:2113:1: entryRuleMatch returns [EObject current=null] : iv_ruleMatch= ruleMatch EOF ;
    public final EObject entryRuleMatch() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatch = null;


        try {
            // InternalOpenCypherParser.g:2113:46: (iv_ruleMatch= ruleMatch EOF )
            // InternalOpenCypherParser.g:2114:2: iv_ruleMatch= ruleMatch EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatchRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatch=ruleMatch();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatch; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatch"


    // $ANTLR start "ruleMatch"
    // InternalOpenCypherParser.g:2120:1: ruleMatch returns [EObject current=null] : ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? ) ;
    public final EObject ruleMatch() throws RecognitionException {
        EObject current = null;

        Token lv_optional_0_0=null;
        Token otherlv_1=null;
        EObject lv_pattern_2_0 = null;

        EObject lv_hints_3_0 = null;

        EObject lv_where_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2126:2: ( ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:2127:2: ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:2127:2: ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:2128:3: ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )?
            {
            // InternalOpenCypherParser.g:2128:3: ( (lv_optional_0_0= OPTIONAL ) )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==OPTIONAL) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // InternalOpenCypherParser.g:2129:4: (lv_optional_0_0= OPTIONAL )
                    {
                    // InternalOpenCypherParser.g:2129:4: (lv_optional_0_0= OPTIONAL )
                    // InternalOpenCypherParser.g:2130:5: lv_optional_0_0= OPTIONAL
                    {
                    lv_optional_0_0=(Token)match(input,OPTIONAL,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_0_0, grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getMatchRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "OPTIONAL");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,MATCH,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMatchAccess().getMATCHKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:2146:3: ( (lv_pattern_2_0= rulePattern ) )
            // InternalOpenCypherParser.g:2147:4: (lv_pattern_2_0= rulePattern )
            {
            // InternalOpenCypherParser.g:2147:4: (lv_pattern_2_0= rulePattern )
            // InternalOpenCypherParser.g:2148:5: lv_pattern_2_0= rulePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_44);
            lv_pattern_2_0=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMatchRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Pattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2165:3: ( (lv_hints_3_0= ruleHint ) )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==USING) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2166:4: (lv_hints_3_0= ruleHint )
            	    {
            	    // InternalOpenCypherParser.g:2166:4: (lv_hints_3_0= ruleHint )
            	    // InternalOpenCypherParser.g:2167:5: lv_hints_3_0= ruleHint
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_44);
            	    lv_hints_3_0=ruleHint();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMatchRule());
            	      					}
            	      					add(
            	      						current,
            	      						"hints",
            	      						lv_hints_3_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Hint");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // InternalOpenCypherParser.g:2184:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // InternalOpenCypherParser.g:2185:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:2185:4: (lv_where_4_0= ruleWhere )
                    // InternalOpenCypherParser.g:2186:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMatchRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatch"


    // $ANTLR start "entryRuleUnwind"
    // InternalOpenCypherParser.g:2207:1: entryRuleUnwind returns [EObject current=null] : iv_ruleUnwind= ruleUnwind EOF ;
    public final EObject entryRuleUnwind() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnwind = null;


        try {
            // InternalOpenCypherParser.g:2207:47: (iv_ruleUnwind= ruleUnwind EOF )
            // InternalOpenCypherParser.g:2208:2: iv_ruleUnwind= ruleUnwind EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnwindRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnwind=ruleUnwind();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnwind; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnwind"


    // $ANTLR start "ruleUnwind"
    // InternalOpenCypherParser.g:2214:1: ruleUnwind returns [EObject current=null] : (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariable ) ) ) ;
    public final EObject ruleUnwind() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_variable_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2220:2: ( (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariable ) ) ) )
            // InternalOpenCypherParser.g:2221:2: (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariable ) ) )
            {
            // InternalOpenCypherParser.g:2221:2: (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariable ) ) )
            // InternalOpenCypherParser.g:2222:3: otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariable ) )
            {
            otherlv_0=(Token)match(input,UNWIND,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnwindAccess().getUNWINDKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2226:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2227:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2227:4: (lv_expression_1_0= ruleExpression )
            // InternalOpenCypherParser.g:2228:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_38);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnwindRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AS,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnwindAccess().getASKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:2249:3: ( (lv_variable_3_0= ruleVariable ) )
            // InternalOpenCypherParser.g:2250:4: (lv_variable_3_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:2250:4: (lv_variable_3_0= ruleVariable )
            // InternalOpenCypherParser.g:2251:5: lv_variable_3_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnwindAccess().getVariableVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_variable_3_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnwindRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnwind"


    // $ANTLR start "entryRuleMerge"
    // InternalOpenCypherParser.g:2272:1: entryRuleMerge returns [EObject current=null] : iv_ruleMerge= ruleMerge EOF ;
    public final EObject entryRuleMerge() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMerge = null;


        try {
            // InternalOpenCypherParser.g:2272:46: (iv_ruleMerge= ruleMerge EOF )
            // InternalOpenCypherParser.g:2273:2: iv_ruleMerge= ruleMerge EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMergeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMerge=ruleMerge();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMerge; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMerge"


    // $ANTLR start "ruleMerge"
    // InternalOpenCypherParser.g:2279:1: ruleMerge returns [EObject current=null] : (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* ) ;
    public final EObject ruleMerge() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_patternPart_1_0 = null;

        EObject lv_mergeActions_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2285:2: ( (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* ) )
            // InternalOpenCypherParser.g:2286:2: (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* )
            {
            // InternalOpenCypherParser.g:2286:2: (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* )
            // InternalOpenCypherParser.g:2287:3: otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )*
            {
            otherlv_0=(Token)match(input,MERGE,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMergeAccess().getMERGEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2291:3: ( (lv_patternPart_1_0= rulePatternPart ) )
            // InternalOpenCypherParser.g:2292:4: (lv_patternPart_1_0= rulePatternPart )
            {
            // InternalOpenCypherParser.g:2292:4: (lv_patternPart_1_0= rulePatternPart )
            // InternalOpenCypherParser.g:2293:5: lv_patternPart_1_0= rulePatternPart
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_45);
            lv_patternPart_1_0=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMergeRule());
              					}
              					set(
              						current,
              						"patternPart",
              						lv_patternPart_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PatternPart");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2310:3: ( (lv_mergeActions_2_0= ruleMergeAction ) )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==ON) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2311:4: (lv_mergeActions_2_0= ruleMergeAction )
            	    {
            	    // InternalOpenCypherParser.g:2311:4: (lv_mergeActions_2_0= ruleMergeAction )
            	    // InternalOpenCypherParser.g:2312:5: lv_mergeActions_2_0= ruleMergeAction
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_45);
            	    lv_mergeActions_2_0=ruleMergeAction();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMergeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"mergeActions",
            	      						lv_mergeActions_2_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.MergeAction");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMerge"


    // $ANTLR start "entryRuleMergeAction"
    // InternalOpenCypherParser.g:2333:1: entryRuleMergeAction returns [EObject current=null] : iv_ruleMergeAction= ruleMergeAction EOF ;
    public final EObject entryRuleMergeAction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMergeAction = null;


        try {
            // InternalOpenCypherParser.g:2333:52: (iv_ruleMergeAction= ruleMergeAction EOF )
            // InternalOpenCypherParser.g:2334:2: iv_ruleMergeAction= ruleMergeAction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMergeActionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMergeAction=ruleMergeAction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMergeAction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMergeAction"


    // $ANTLR start "ruleMergeAction"
    // InternalOpenCypherParser.g:2340:1: ruleMergeAction returns [EObject current=null] : (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) ) ;
    public final EObject ruleMergeAction() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_action_1_1=null;
        Token lv_action_1_2=null;
        EObject lv_set_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2346:2: ( (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) ) )
            // InternalOpenCypherParser.g:2347:2: (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) )
            {
            // InternalOpenCypherParser.g:2347:2: (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) )
            // InternalOpenCypherParser.g:2348:3: otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) )
            {
            otherlv_0=(Token)match(input,ON,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMergeActionAccess().getONKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2352:3: ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) )
            // InternalOpenCypherParser.g:2353:4: ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) )
            {
            // InternalOpenCypherParser.g:2353:4: ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) )
            // InternalOpenCypherParser.g:2354:5: (lv_action_1_1= MATCH | lv_action_1_2= CREATE )
            {
            // InternalOpenCypherParser.g:2354:5: (lv_action_1_1= MATCH | lv_action_1_2= CREATE )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==MATCH) ) {
                alt23=1;
            }
            else if ( (LA23_0==CREATE) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // InternalOpenCypherParser.g:2355:6: lv_action_1_1= MATCH
                    {
                    lv_action_1_1=(Token)match(input,MATCH,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_action_1_1, grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getMergeActionRule());
                      						}
                      						setWithLastConsumed(current, "action", lv_action_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:2366:6: lv_action_1_2= CREATE
                    {
                    lv_action_1_2=(Token)match(input,CREATE,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_action_1_2, grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getMergeActionRule());
                      						}
                      						setWithLastConsumed(current, "action", lv_action_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalOpenCypherParser.g:2379:3: ( (lv_set_2_0= ruleSet ) )
            // InternalOpenCypherParser.g:2380:4: (lv_set_2_0= ruleSet )
            {
            // InternalOpenCypherParser.g:2380:4: (lv_set_2_0= ruleSet )
            // InternalOpenCypherParser.g:2381:5: lv_set_2_0= ruleSet
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_set_2_0=ruleSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMergeActionRule());
              					}
              					set(
              						current,
              						"set",
              						lv_set_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Set");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMergeAction"


    // $ANTLR start "entryRuleCreate"
    // InternalOpenCypherParser.g:2402:1: entryRuleCreate returns [EObject current=null] : iv_ruleCreate= ruleCreate EOF ;
    public final EObject entryRuleCreate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreate = null;


        try {
            // InternalOpenCypherParser.g:2402:47: (iv_ruleCreate= ruleCreate EOF )
            // InternalOpenCypherParser.g:2403:2: iv_ruleCreate= ruleCreate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreate=ruleCreate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreate"


    // $ANTLR start "ruleCreate"
    // InternalOpenCypherParser.g:2409:1: ruleCreate returns [EObject current=null] : (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) ) ;
    public final EObject ruleCreate() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_unique_1_0=null;
        EObject lv_pattern_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2415:2: ( (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) ) )
            // InternalOpenCypherParser.g:2416:2: (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) )
            {
            // InternalOpenCypherParser.g:2416:2: (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) )
            // InternalOpenCypherParser.g:2417:3: otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateAccess().getCREATEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2421:3: ( (lv_unique_1_0= UNIQUE ) )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==UNIQUE) ) {
                int LA24_1 = input.LA(2);

                if ( ((LA24_1>=ALLSHORTESTPATHS && LA24_1<=XOR)||(LA24_1>=AS && LA24_1<=OR)||LA24_1==LeftParenthesis||LA24_1==RULE_SYMBOLIC_NAME) ) {
                    alt24=1;
                }
            }
            switch (alt24) {
                case 1 :
                    // InternalOpenCypherParser.g:2422:4: (lv_unique_1_0= UNIQUE )
                    {
                    // InternalOpenCypherParser.g:2422:4: (lv_unique_1_0= UNIQUE )
                    // InternalOpenCypherParser.g:2423:5: lv_unique_1_0= UNIQUE
                    {
                    lv_unique_1_0=(Token)match(input,UNIQUE,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_unique_1_0, grammarAccess.getCreateAccess().getUniqueUNIQUEKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getCreateRule());
                      					}
                      					setWithLastConsumed(current, "unique", true, "UNIQUE");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:2435:3: ( (lv_pattern_2_0= rulePattern ) )
            // InternalOpenCypherParser.g:2436:4: (lv_pattern_2_0= rulePattern )
            {
            // InternalOpenCypherParser.g:2436:4: (lv_pattern_2_0= rulePattern )
            // InternalOpenCypherParser.g:2437:5: lv_pattern_2_0= rulePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_pattern_2_0=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Pattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreate"


    // $ANTLR start "entryRuleSet"
    // InternalOpenCypherParser.g:2458:1: entryRuleSet returns [EObject current=null] : iv_ruleSet= ruleSet EOF ;
    public final EObject entryRuleSet() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSet = null;


        try {
            // InternalOpenCypherParser.g:2458:44: (iv_ruleSet= ruleSet EOF )
            // InternalOpenCypherParser.g:2459:2: iv_ruleSet= ruleSet EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSet=ruleSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSet; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSet"


    // $ANTLR start "ruleSet"
    // InternalOpenCypherParser.g:2465:1: ruleSet returns [EObject current=null] : (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* ) ;
    public final EObject ruleSet() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_setItems_1_0 = null;

        EObject lv_setItems_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2471:2: ( (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* ) )
            // InternalOpenCypherParser.g:2472:2: (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* )
            {
            // InternalOpenCypherParser.g:2472:2: (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* )
            // InternalOpenCypherParser.g:2473:3: otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )*
            {
            otherlv_0=(Token)match(input,SET,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSetAccess().getSETKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2477:3: ( (lv_setItems_1_0= ruleSetItem ) )
            // InternalOpenCypherParser.g:2478:4: (lv_setItems_1_0= ruleSetItem )
            {
            // InternalOpenCypherParser.g:2478:4: (lv_setItems_1_0= ruleSetItem )
            // InternalOpenCypherParser.g:2479:5: lv_setItems_1_0= ruleSetItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_48);
            lv_setItems_1_0=ruleSetItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSetRule());
              					}
              					add(
              						current,
              						"setItems",
              						lv_setItems_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SetItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2496:3: (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==Comma) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2497:4: otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getSetAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:2501:4: ( (lv_setItems_3_0= ruleSetItem ) )
            	    // InternalOpenCypherParser.g:2502:5: (lv_setItems_3_0= ruleSetItem )
            	    {
            	    // InternalOpenCypherParser.g:2502:5: (lv_setItems_3_0= ruleSetItem )
            	    // InternalOpenCypherParser.g:2503:6: lv_setItems_3_0= ruleSetItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_48);
            	    lv_setItems_3_0=ruleSetItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSetRule());
            	      						}
            	      						add(
            	      							current,
            	      							"setItems",
            	      							lv_setItems_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.SetItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSet"


    // $ANTLR start "entryRuleSetItem"
    // InternalOpenCypherParser.g:2525:1: entryRuleSetItem returns [EObject current=null] : iv_ruleSetItem= ruleSetItem EOF ;
    public final EObject entryRuleSetItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSetItem = null;


        try {
            // InternalOpenCypherParser.g:2525:48: (iv_ruleSetItem= ruleSetItem EOF )
            // InternalOpenCypherParser.g:2526:2: iv_ruleSetItem= ruleSetItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSetItem=ruleSetItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSetItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSetItem"


    // $ANTLR start "ruleSetItem"
    // InternalOpenCypherParser.g:2532:1: ruleSetItem returns [EObject current=null] : ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) ) ;
    public final EObject ruleSetItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        EObject lv_propertyExpression_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_variable_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject lv_variable_6_0 = null;

        EObject lv_expression_8_0 = null;

        EObject lv_variable_9_0 = null;

        EObject lv_nodeLabels_10_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2538:2: ( ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) ) )
            // InternalOpenCypherParser.g:2539:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) )
            {
            // InternalOpenCypherParser.g:2539:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) )
            int alt26=4;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // InternalOpenCypherParser.g:2540:3: ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2540:3: ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) )
                    // InternalOpenCypherParser.g:2541:4: ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) )
                    {
                    // InternalOpenCypherParser.g:2541:4: ( (lv_propertyExpression_0_0= rulePropertyExpression ) )
                    // InternalOpenCypherParser.g:2542:5: (lv_propertyExpression_0_0= rulePropertyExpression )
                    {
                    // InternalOpenCypherParser.g:2542:5: (lv_propertyExpression_0_0= rulePropertyExpression )
                    // InternalOpenCypherParser.g:2543:6: lv_propertyExpression_0_0= rulePropertyExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_propertyExpression_0_0=rulePropertyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"propertyExpression",
                      							lv_propertyExpression_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1());
                      			
                    }
                    // InternalOpenCypherParser.g:2564:4: ( (lv_expression_2_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:2565:5: (lv_expression_2_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:2565:5: (lv_expression_2_0= ruleExpression )
                    // InternalOpenCypherParser.g:2566:6: lv_expression_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:2585:3: ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2585:3: ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) )
                    // InternalOpenCypherParser.g:2586:4: ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) )
                    {
                    // InternalOpenCypherParser.g:2586:4: ( (lv_variable_3_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:2587:5: (lv_variable_3_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:2587:5: (lv_variable_3_0= ruleVariable )
                    // InternalOpenCypherParser.g:2588:6: lv_variable_3_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_variable_3_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1());
                      			
                    }
                    // InternalOpenCypherParser.g:2609:4: ( (lv_expression_5_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:2610:5: (lv_expression_5_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:2610:5: (lv_expression_5_0= ruleExpression )
                    // InternalOpenCypherParser.g:2611:6: lv_expression_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:2630:3: ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2630:3: ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) )
                    // InternalOpenCypherParser.g:2631:4: ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) )
                    {
                    // InternalOpenCypherParser.g:2631:4: ( (lv_variable_6_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:2632:5: (lv_variable_6_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:2632:5: (lv_variable_6_0= ruleVariable )
                    // InternalOpenCypherParser.g:2633:6: lv_variable_6_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_49);
                    lv_variable_6_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_7=(Token)match(input,PlusSignEqualsSign,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1());
                      			
                    }
                    // InternalOpenCypherParser.g:2654:4: ( (lv_expression_8_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:2655:5: (lv_expression_8_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:2655:5: (lv_expression_8_0= ruleExpression )
                    // InternalOpenCypherParser.g:2656:6: lv_expression_8_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_8_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_8_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:2675:3: ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) )
                    {
                    // InternalOpenCypherParser.g:2675:3: ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) )
                    // InternalOpenCypherParser.g:2676:4: ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) )
                    {
                    // InternalOpenCypherParser.g:2676:4: ( (lv_variable_9_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:2677:5: (lv_variable_9_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:2677:5: (lv_variable_9_0= ruleVariable )
                    // InternalOpenCypherParser.g:2678:6: lv_variable_9_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_9_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_9_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:2695:4: ( (lv_nodeLabels_10_0= ruleNodeLabels ) )
                    // InternalOpenCypherParser.g:2696:5: (lv_nodeLabels_10_0= ruleNodeLabels )
                    {
                    // InternalOpenCypherParser.g:2696:5: (lv_nodeLabels_10_0= ruleNodeLabels )
                    // InternalOpenCypherParser.g:2697:6: lv_nodeLabels_10_0= ruleNodeLabels
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getNodeLabelsNodeLabelsParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabels_10_0=ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabels",
                      							lv_nodeLabels_10_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabels");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSetItem"


    // $ANTLR start "entryRuleDelete"
    // InternalOpenCypherParser.g:2719:1: entryRuleDelete returns [EObject current=null] : iv_ruleDelete= ruleDelete EOF ;
    public final EObject entryRuleDelete() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDelete = null;


        try {
            // InternalOpenCypherParser.g:2719:47: (iv_ruleDelete= ruleDelete EOF )
            // InternalOpenCypherParser.g:2720:2: iv_ruleDelete= ruleDelete EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDeleteRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDelete=ruleDelete();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDelete; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDelete"


    // $ANTLR start "ruleDelete"
    // InternalOpenCypherParser.g:2726:1: ruleDelete returns [EObject current=null] : ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* ) ;
    public final EObject ruleDelete() throws RecognitionException {
        EObject current = null;

        Token lv_detach_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expressions_2_0 = null;

        EObject lv_expressions_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2732:2: ( ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* ) )
            // InternalOpenCypherParser.g:2733:2: ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )
            {
            // InternalOpenCypherParser.g:2733:2: ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )
            // InternalOpenCypherParser.g:2734:3: ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
            {
            // InternalOpenCypherParser.g:2734:3: ( (lv_detach_0_0= DETACH ) )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==DETACH) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // InternalOpenCypherParser.g:2735:4: (lv_detach_0_0= DETACH )
                    {
                    // InternalOpenCypherParser.g:2735:4: (lv_detach_0_0= DETACH )
                    // InternalOpenCypherParser.g:2736:5: lv_detach_0_0= DETACH
                    {
                    lv_detach_0_0=(Token)match(input,DETACH,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_detach_0_0, grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDeleteRule());
                      					}
                      					setWithLastConsumed(current, "detach", true, "DETACH");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,DELETE,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDeleteAccess().getDELETEKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:2752:3: ( (lv_expressions_2_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2753:4: (lv_expressions_2_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2753:4: (lv_expressions_2_0= ruleExpression )
            // InternalOpenCypherParser.g:2754:5: lv_expressions_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_48);
            lv_expressions_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDeleteRule());
              					}
              					add(
              						current,
              						"expressions",
              						lv_expressions_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2771:3: (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==Comma) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2772:4: otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getDeleteAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:2776:4: ( (lv_expressions_4_0= ruleExpression ) )
            	    // InternalOpenCypherParser.g:2777:5: (lv_expressions_4_0= ruleExpression )
            	    {
            	    // InternalOpenCypherParser.g:2777:5: (lv_expressions_4_0= ruleExpression )
            	    // InternalOpenCypherParser.g:2778:6: lv_expressions_4_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_48);
            	    lv_expressions_4_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDeleteRule());
            	      						}
            	      						add(
            	      							current,
            	      							"expressions",
            	      							lv_expressions_4_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDelete"


    // $ANTLR start "entryRuleRemove"
    // InternalOpenCypherParser.g:2800:1: entryRuleRemove returns [EObject current=null] : iv_ruleRemove= ruleRemove EOF ;
    public final EObject entryRuleRemove() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRemove = null;


        try {
            // InternalOpenCypherParser.g:2800:47: (iv_ruleRemove= ruleRemove EOF )
            // InternalOpenCypherParser.g:2801:2: iv_ruleRemove= ruleRemove EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRemoveRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRemove=ruleRemove();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRemove; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRemove"


    // $ANTLR start "ruleRemove"
    // InternalOpenCypherParser.g:2807:1: ruleRemove returns [EObject current=null] : (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* ) ;
    public final EObject ruleRemove() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_removeItems_1_0 = null;

        EObject lv_removeItems_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2813:2: ( (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* ) )
            // InternalOpenCypherParser.g:2814:2: (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* )
            {
            // InternalOpenCypherParser.g:2814:2: (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* )
            // InternalOpenCypherParser.g:2815:3: otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )*
            {
            otherlv_0=(Token)match(input,REMOVE,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRemoveAccess().getREMOVEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2819:3: ( (lv_removeItems_1_0= ruleRemoveItem ) )
            // InternalOpenCypherParser.g:2820:4: (lv_removeItems_1_0= ruleRemoveItem )
            {
            // InternalOpenCypherParser.g:2820:4: (lv_removeItems_1_0= ruleRemoveItem )
            // InternalOpenCypherParser.g:2821:5: lv_removeItems_1_0= ruleRemoveItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_48);
            lv_removeItems_1_0=ruleRemoveItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRemoveRule());
              					}
              					add(
              						current,
              						"removeItems",
              						lv_removeItems_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RemoveItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2838:3: (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==Comma) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2839:4: otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getRemoveAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:2843:4: ( (lv_removeItems_3_0= ruleRemoveItem ) )
            	    // InternalOpenCypherParser.g:2844:5: (lv_removeItems_3_0= ruleRemoveItem )
            	    {
            	    // InternalOpenCypherParser.g:2844:5: (lv_removeItems_3_0= ruleRemoveItem )
            	    // InternalOpenCypherParser.g:2845:6: lv_removeItems_3_0= ruleRemoveItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_48);
            	    lv_removeItems_3_0=ruleRemoveItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRemoveRule());
            	      						}
            	      						add(
            	      							current,
            	      							"removeItems",
            	      							lv_removeItems_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.RemoveItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRemove"


    // $ANTLR start "entryRuleRemoveItem"
    // InternalOpenCypherParser.g:2867:1: entryRuleRemoveItem returns [EObject current=null] : iv_ruleRemoveItem= ruleRemoveItem EOF ;
    public final EObject entryRuleRemoveItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRemoveItem = null;


        try {
            // InternalOpenCypherParser.g:2867:51: (iv_ruleRemoveItem= ruleRemoveItem EOF )
            // InternalOpenCypherParser.g:2868:2: iv_ruleRemoveItem= ruleRemoveItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRemoveItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRemoveItem=ruleRemoveItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRemoveItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRemoveItem"


    // $ANTLR start "ruleRemoveItem"
    // InternalOpenCypherParser.g:2874:1: ruleRemoveItem returns [EObject current=null] : ( ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) ) | this_PropertyExpression_2= rulePropertyExpression ) ;
    public final EObject ruleRemoveItem() throws RecognitionException {
        EObject current = null;

        EObject lv_variable_0_0 = null;

        EObject lv_nodeLabels_1_0 = null;

        EObject this_PropertyExpression_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2880:2: ( ( ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) ) | this_PropertyExpression_2= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:2881:2: ( ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) ) | this_PropertyExpression_2= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:2881:2: ( ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) ) | this_PropertyExpression_2= rulePropertyExpression )
            int alt30=2;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // InternalOpenCypherParser.g:2882:3: ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) )
                    {
                    // InternalOpenCypherParser.g:2882:3: ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) )
                    // InternalOpenCypherParser.g:2883:4: ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) )
                    {
                    // InternalOpenCypherParser.g:2883:4: ( (lv_variable_0_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:2884:5: (lv_variable_0_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:2884:5: (lv_variable_0_0= ruleVariable )
                    // InternalOpenCypherParser.g:2885:6: lv_variable_0_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getVariableVariableParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_0_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:2902:4: ( (lv_nodeLabels_1_0= ruleNodeLabels ) )
                    // InternalOpenCypherParser.g:2903:5: (lv_nodeLabels_1_0= ruleNodeLabels )
                    {
                    // InternalOpenCypherParser.g:2903:5: (lv_nodeLabels_1_0= ruleNodeLabels )
                    // InternalOpenCypherParser.g:2904:6: lv_nodeLabels_1_0= ruleNodeLabels
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getNodeLabelsNodeLabelsParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabels_1_0=ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabels",
                      							lv_nodeLabels_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabels");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:2923:3: this_PropertyExpression_2= rulePropertyExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRemoveItemAccess().getPropertyExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyExpression_2=rulePropertyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertyExpression_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRemoveItem"


    // $ANTLR start "entryRuleForeach"
    // InternalOpenCypherParser.g:2938:1: entryRuleForeach returns [EObject current=null] : iv_ruleForeach= ruleForeach EOF ;
    public final EObject entryRuleForeach() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleForeach = null;


        try {
            // InternalOpenCypherParser.g:2938:48: (iv_ruleForeach= ruleForeach EOF )
            // InternalOpenCypherParser.g:2939:2: iv_ruleForeach= ruleForeach EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForeachRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForeach=ruleForeach();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForeach; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleForeach"


    // $ANTLR start "ruleForeach"
    // InternalOpenCypherParser.g:2945:1: ruleForeach returns [EObject current=null] : (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clause_6_0= ruleClause ) )+ otherlv_7= RightParenthesis ) ;
    public final EObject ruleForeach() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_variable_2_0 = null;

        EObject lv_expression_4_0 = null;

        EObject lv_clause_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2951:2: ( (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clause_6_0= ruleClause ) )+ otherlv_7= RightParenthesis ) )
            // InternalOpenCypherParser.g:2952:2: (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clause_6_0= ruleClause ) )+ otherlv_7= RightParenthesis )
            {
            // InternalOpenCypherParser.g:2952:2: (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clause_6_0= ruleClause ) )+ otherlv_7= RightParenthesis )
            // InternalOpenCypherParser.g:2953:3: otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clause_6_0= ruleClause ) )+ otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,FOREACH,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getFOREACHKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:2961:3: ( (lv_variable_2_0= ruleVariable ) )
            // InternalOpenCypherParser.g:2962:4: (lv_variable_2_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:2962:4: (lv_variable_2_0= ruleVariable )
            // InternalOpenCypherParser.g:2963:5: lv_variable_2_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForeachAccess().getVariableVariableParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_variable_2_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForeachRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,IN,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getForeachAccess().getINKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:2984:3: ( (lv_expression_4_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2985:4: (lv_expression_4_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2985:4: (lv_expression_4_0= ruleExpression )
            // InternalOpenCypherParser.g:2986:5: lv_expression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_52);
            lv_expression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForeachRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,VerticalLine,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getForeachAccess().getVerticalLineKeyword_5());
              		
            }
            // InternalOpenCypherParser.g:3007:3: ( (lv_clause_6_0= ruleClause ) )+
            int cnt31=0;
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==OPTIONAL||LA31_0==FOREACH||LA31_0==CREATE||(LA31_0>=DELETE && LA31_0<=DETACH)||(LA31_0>=REMOVE && LA31_0<=RETURN)||LA31_0==UNWIND||(LA31_0>=MATCH && LA31_0<=MERGE)||LA31_0==START||LA31_0==LOAD||LA31_0==WITH||LA31_0==SET) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // InternalOpenCypherParser.g:3008:4: (lv_clause_6_0= ruleClause )
            	    {
            	    // InternalOpenCypherParser.g:3008:4: (lv_clause_6_0= ruleClause )
            	    // InternalOpenCypherParser.g:3009:5: lv_clause_6_0= ruleClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getForeachAccess().getClauseClauseParserRuleCall_6_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_clause_6_0=ruleClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getForeachRule());
            	      					}
            	      					add(
            	      						current,
            	      						"clause",
            	      						lv_clause_6_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt31 >= 1 ) break loop31;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(31, input);
                        throw eee;
                }
                cnt31++;
            } while (true);

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getForeachAccess().getRightParenthesisKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleForeach"


    // $ANTLR start "entryRuleWith"
    // InternalOpenCypherParser.g:3034:1: entryRuleWith returns [EObject current=null] : iv_ruleWith= ruleWith EOF ;
    public final EObject entryRuleWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWith = null;


        try {
            // InternalOpenCypherParser.g:3034:45: (iv_ruleWith= ruleWith EOF )
            // InternalOpenCypherParser.g:3035:2: iv_ruleWith= ruleWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWith=ruleWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWith"


    // $ANTLR start "ruleWith"
    // InternalOpenCypherParser.g:3041:1: ruleWith returns [EObject current=null] : (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? ) ;
    public final EObject ruleWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_distint_1_0=null;
        EObject lv_returnBody_2_0 = null;

        EObject lv_where_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3047:2: ( (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:3048:2: (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:3048:2: (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:3049:3: otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )?
            {
            otherlv_0=(Token)match(input,WITH,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithAccess().getWITHKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3053:3: ( (lv_distint_1_0= DISTINCT ) )?
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // InternalOpenCypherParser.g:3054:4: (lv_distint_1_0= DISTINCT )
                    {
                    // InternalOpenCypherParser.g:3054:4: (lv_distint_1_0= DISTINCT )
                    // InternalOpenCypherParser.g:3055:5: lv_distint_1_0= DISTINCT
                    {
                    lv_distint_1_0=(Token)match(input,DISTINCT,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distint_1_0, grammarAccess.getWithAccess().getDistintDISTINCTKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getWithRule());
                      					}
                      					setWithLastConsumed(current, "distint", true, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3067:3: ( (lv_returnBody_2_0= ruleReturnBody ) )
            // InternalOpenCypherParser.g:3068:4: (lv_returnBody_2_0= ruleReturnBody )
            {
            // InternalOpenCypherParser.g:3068:4: (lv_returnBody_2_0= ruleReturnBody )
            // InternalOpenCypherParser.g:3069:5: lv_returnBody_2_0= ruleReturnBody
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_55);
            lv_returnBody_2_0=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithRule());
              					}
              					set(
              						current,
              						"returnBody",
              						lv_returnBody_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ReturnBody");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3086:3: ( (lv_where_3_0= ruleWhere ) )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==WHERE) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalOpenCypherParser.g:3087:4: (lv_where_3_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:3087:4: (lv_where_3_0= ruleWhere )
                    // InternalOpenCypherParser.g:3088:5: lv_where_3_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_3_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWithRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_3_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWith"


    // $ANTLR start "entryRuleReturn"
    // InternalOpenCypherParser.g:3109:1: entryRuleReturn returns [EObject current=null] : iv_ruleReturn= ruleReturn EOF ;
    public final EObject entryRuleReturn() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturn = null;


        try {
            // InternalOpenCypherParser.g:3109:47: (iv_ruleReturn= ruleReturn EOF )
            // InternalOpenCypherParser.g:3110:2: iv_ruleReturn= ruleReturn EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturn=ruleReturn();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturn; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturn"


    // $ANTLR start "ruleReturn"
    // InternalOpenCypherParser.g:3116:1: ruleReturn returns [EObject current=null] : ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) ) ;
    public final EObject ruleReturn() throws RecognitionException {
        EObject current = null;

        Token lv_return_0_0=null;
        Token lv_distinct_1_0=null;
        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3122:2: ( ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) ) )
            // InternalOpenCypherParser.g:3123:2: ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) )
            {
            // InternalOpenCypherParser.g:3123:2: ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) )
            // InternalOpenCypherParser.g:3124:3: ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) )
            {
            // InternalOpenCypherParser.g:3124:3: ( (lv_return_0_0= RETURN ) )
            // InternalOpenCypherParser.g:3125:4: (lv_return_0_0= RETURN )
            {
            // InternalOpenCypherParser.g:3125:4: (lv_return_0_0= RETURN )
            // InternalOpenCypherParser.g:3126:5: lv_return_0_0= RETURN
            {
            lv_return_0_0=(Token)match(input,RETURN,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_return_0_0, grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getReturnRule());
              					}
              					setWithLastConsumed(current, "return", lv_return_0_0, "RETURN");
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3138:3: ( (lv_distinct_1_0= DISTINCT ) )?
            int alt34=2;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // InternalOpenCypherParser.g:3139:4: (lv_distinct_1_0= DISTINCT )
                    {
                    // InternalOpenCypherParser.g:3139:4: (lv_distinct_1_0= DISTINCT )
                    // InternalOpenCypherParser.g:3140:5: lv_distinct_1_0= DISTINCT
                    {
                    lv_distinct_1_0=(Token)match(input,DISTINCT,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distinct_1_0, grammarAccess.getReturnAccess().getDistinctDISTINCTKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getReturnRule());
                      					}
                      					setWithLastConsumed(current, "distinct", true, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3152:3: ( (lv_body_2_0= ruleReturnBody ) )
            // InternalOpenCypherParser.g:3153:4: (lv_body_2_0= ruleReturnBody )
            {
            // InternalOpenCypherParser.g:3153:4: (lv_body_2_0= ruleReturnBody )
            // InternalOpenCypherParser.g:3154:5: lv_body_2_0= ruleReturnBody
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ReturnBody");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturn"


    // $ANTLR start "entryRuleReturnBody"
    // InternalOpenCypherParser.g:3175:1: entryRuleReturnBody returns [EObject current=null] : iv_ruleReturnBody= ruleReturnBody EOF ;
    public final EObject entryRuleReturnBody() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnBody = null;


        try {
            // InternalOpenCypherParser.g:3175:51: (iv_ruleReturnBody= ruleReturnBody EOF )
            // InternalOpenCypherParser.g:3176:2: iv_ruleReturnBody= ruleReturnBody EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnBodyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnBody=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnBody; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnBody"


    // $ANTLR start "ruleReturnBody"
    // InternalOpenCypherParser.g:3182:1: ruleReturnBody returns [EObject current=null] : (this_ReturnItems_0= ruleReturnItems ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? ) ;
    public final EObject ruleReturnBody() throws RecognitionException {
        EObject current = null;

        EObject this_ReturnItems_0 = null;

        EObject lv_order_1_0 = null;

        EObject lv_skip_2_0 = null;

        EObject lv_limit_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3188:2: ( (this_ReturnItems_0= ruleReturnItems ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? ) )
            // InternalOpenCypherParser.g:3189:2: (this_ReturnItems_0= ruleReturnItems ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? )
            {
            // InternalOpenCypherParser.g:3189:2: (this_ReturnItems_0= ruleReturnItems ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? )
            // InternalOpenCypherParser.g:3190:3: this_ReturnItems_0= ruleReturnItems ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getReturnBodyAccess().getReturnItemsParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_ReturnItems_0=ruleReturnItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ReturnItems_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:3201:3: ( (lv_order_1_0= ruleOrder ) )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==ORDER) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // InternalOpenCypherParser.g:3202:4: (lv_order_1_0= ruleOrder )
                    {
                    // InternalOpenCypherParser.g:3202:4: (lv_order_1_0= ruleOrder )
                    // InternalOpenCypherParser.g:3203:5: lv_order_1_0= ruleOrder
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_57);
                    lv_order_1_0=ruleOrder();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"order",
                      						lv_order_1_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Order");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3220:3: ( (lv_skip_2_0= ruleSkip ) )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==SKIP) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // InternalOpenCypherParser.g:3221:4: (lv_skip_2_0= ruleSkip )
                    {
                    // InternalOpenCypherParser.g:3221:4: (lv_skip_2_0= ruleSkip )
                    // InternalOpenCypherParser.g:3222:5: lv_skip_2_0= ruleSkip
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_58);
                    lv_skip_2_0=ruleSkip();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"skip",
                      						lv_skip_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Skip");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3239:3: ( (lv_limit_3_0= ruleLimit ) )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==LIMIT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // InternalOpenCypherParser.g:3240:4: (lv_limit_3_0= ruleLimit )
                    {
                    // InternalOpenCypherParser.g:3240:4: (lv_limit_3_0= ruleLimit )
                    // InternalOpenCypherParser.g:3241:5: lv_limit_3_0= ruleLimit
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_limit_3_0=ruleLimit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"limit",
                      						lv_limit_3_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Limit");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnBody"


    // $ANTLR start "entryRuleReturnItems"
    // InternalOpenCypherParser.g:3262:1: entryRuleReturnItems returns [EObject current=null] : iv_ruleReturnItems= ruleReturnItems EOF ;
    public final EObject entryRuleReturnItems() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnItems = null;


        try {
            // InternalOpenCypherParser.g:3262:52: (iv_ruleReturnItems= ruleReturnItems EOF )
            // InternalOpenCypherParser.g:3263:2: iv_ruleReturnItems= ruleReturnItems EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnItems=ruleReturnItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnItems; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnItems"


    // $ANTLR start "ruleReturnItems"
    // InternalOpenCypherParser.g:3269:1: ruleReturnItems returns [EObject current=null] : ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) ) ;
    public final EObject ruleReturnItems() throws RecognitionException {
        EObject current = null;

        Token lv_all_1_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        EObject lv_items_3_0 = null;

        EObject lv_items_4_0 = null;

        EObject lv_items_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3275:2: ( ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) ) )
            // InternalOpenCypherParser.g:3276:2: ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) )
            {
            // InternalOpenCypherParser.g:3276:2: ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==Asterisk) ) {
                alt40=1;
            }
            else if ( ((LA40_0>=ALLSHORTESTPATHS && LA40_0<=XOR)||(LA40_0>=AS && LA40_0<=OR)||LA40_0==DollarSign||LA40_0==LeftParenthesis||LA40_0==PlusSign||LA40_0==HyphenMinus||LA40_0==LeftSquareBracket||LA40_0==LeftCurlyBracket||LA40_0==RULE_SYMBOLIC_NAME||(LA40_0>=RULE_STRING_LITERAL && LA40_0<=RULE_DECIMAL)) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // InternalOpenCypherParser.g:3277:3: ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) )
                    {
                    // InternalOpenCypherParser.g:3277:3: ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) )
                    // InternalOpenCypherParser.g:3278:4: () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* )
                    {
                    // InternalOpenCypherParser.g:3278:4: ()
                    // InternalOpenCypherParser.g:3279:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:3288:4: ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* )
                    // InternalOpenCypherParser.g:3289:5: ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )*
                    {
                    // InternalOpenCypherParser.g:3289:5: ( (lv_all_1_0= Asterisk ) )
                    // InternalOpenCypherParser.g:3290:6: (lv_all_1_0= Asterisk )
                    {
                    // InternalOpenCypherParser.g:3290:6: (lv_all_1_0= Asterisk )
                    // InternalOpenCypherParser.g:3291:7: lv_all_1_0= Asterisk
                    {
                    lv_all_1_0=(Token)match(input,Asterisk,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_all_1_0, grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getReturnItemsRule());
                      							}
                      							setWithLastConsumed(current, "all", lv_all_1_0, "*");
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3303:5: (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==Comma) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:3304:6: otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_2, grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0());
                    	      					
                    	    }
                    	    // InternalOpenCypherParser.g:3308:6: ( (lv_items_3_0= ruleReturnItem ) )
                    	    // InternalOpenCypherParser.g:3309:7: (lv_items_3_0= ruleReturnItem )
                    	    {
                    	    // InternalOpenCypherParser.g:3309:7: (lv_items_3_0= ruleReturnItem )
                    	    // InternalOpenCypherParser.g:3310:8: lv_items_3_0= ruleReturnItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_48);
                    	    lv_items_3_0=ruleReturnItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"items",
                    	      									lv_items_3_0,
                    	      									"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItem");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3331:3: ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* )
                    {
                    // InternalOpenCypherParser.g:3331:3: ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* )
                    // InternalOpenCypherParser.g:3332:4: ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )*
                    {
                    // InternalOpenCypherParser.g:3332:4: ( (lv_items_4_0= ruleReturnItem ) )
                    // InternalOpenCypherParser.g:3333:5: (lv_items_4_0= ruleReturnItem )
                    {
                    // InternalOpenCypherParser.g:3333:5: (lv_items_4_0= ruleReturnItem )
                    // InternalOpenCypherParser.g:3334:6: lv_items_4_0= ruleReturnItem
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_48);
                    lv_items_4_0=ruleReturnItem();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                      						}
                      						add(
                      							current,
                      							"items",
                      							lv_items_4_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItem");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3351:4: (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==Comma) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:3352:5: otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) )
                    	    {
                    	    otherlv_5=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_5, grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:3356:5: ( (lv_items_6_0= ruleReturnItem ) )
                    	    // InternalOpenCypherParser.g:3357:6: (lv_items_6_0= ruleReturnItem )
                    	    {
                    	    // InternalOpenCypherParser.g:3357:6: (lv_items_6_0= ruleReturnItem )
                    	    // InternalOpenCypherParser.g:3358:7: lv_items_6_0= ruleReturnItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_48);
                    	    lv_items_6_0=ruleReturnItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"items",
                    	      								lv_items_6_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItem");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnItems"


    // $ANTLR start "entryRuleReturnItem"
    // InternalOpenCypherParser.g:3381:1: entryRuleReturnItem returns [EObject current=null] : iv_ruleReturnItem= ruleReturnItem EOF ;
    public final EObject entryRuleReturnItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnItem = null;


        try {
            // InternalOpenCypherParser.g:3381:51: (iv_ruleReturnItem= ruleReturnItem EOF )
            // InternalOpenCypherParser.g:3382:2: iv_ruleReturnItem= ruleReturnItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnItem=ruleReturnItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnItem"


    // $ANTLR start "ruleReturnItem"
    // InternalOpenCypherParser.g:3388:1: ruleReturnItem returns [EObject current=null] : ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) ) )? ) ;
    public final EObject ruleReturnItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_0_0 = null;

        EObject lv_alias_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3394:2: ( ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) ) )? ) )
            // InternalOpenCypherParser.g:3395:2: ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) ) )? )
            {
            // InternalOpenCypherParser.g:3395:2: ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) ) )? )
            // InternalOpenCypherParser.g:3396:3: ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) ) )?
            {
            // InternalOpenCypherParser.g:3396:3: ( (lv_expression_0_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3397:4: (lv_expression_0_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3397:4: (lv_expression_0_0= ruleExpression )
            // InternalOpenCypherParser.g:3398:5: lv_expression_0_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_59);
            lv_expression_0_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnItemRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3415:3: (otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) ) )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // InternalOpenCypherParser.g:3416:4: otherlv_1= AS ( (lv_alias_2_0= ruleVariable ) )
                    {
                    otherlv_1=(Token)match(input,AS,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getReturnItemAccess().getASKeyword_1_0());
                      			
                    }
                    // InternalOpenCypherParser.g:3420:4: ( (lv_alias_2_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:3421:5: (lv_alias_2_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:3421:5: (lv_alias_2_0= ruleVariable )
                    // InternalOpenCypherParser.g:3422:6: lv_alias_2_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getReturnItemAccess().getAliasVariableParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getReturnItemRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnItem"


    // $ANTLR start "entryRuleOrder"
    // InternalOpenCypherParser.g:3444:1: entryRuleOrder returns [EObject current=null] : iv_ruleOrder= ruleOrder EOF ;
    public final EObject entryRuleOrder() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrder = null;


        try {
            // InternalOpenCypherParser.g:3444:46: (iv_ruleOrder= ruleOrder EOF )
            // InternalOpenCypherParser.g:3445:2: iv_ruleOrder= ruleOrder EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrder=ruleOrder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrder; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrder"


    // $ANTLR start "ruleOrder"
    // InternalOpenCypherParser.g:3451:1: ruleOrder returns [EObject current=null] : (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* ) ;
    public final EObject ruleOrder() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_orderBy_2_0 = null;

        EObject lv_orderBy_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3457:2: ( (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* ) )
            // InternalOpenCypherParser.g:3458:2: (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* )
            {
            // InternalOpenCypherParser.g:3458:2: (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* )
            // InternalOpenCypherParser.g:3459:3: otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )*
            {
            otherlv_0=(Token)match(input,ORDER,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOrderAccess().getORDERKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,BY,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOrderAccess().getBYKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:3467:3: ( (lv_orderBy_2_0= ruleSortItem ) )
            // InternalOpenCypherParser.g:3468:4: (lv_orderBy_2_0= ruleSortItem )
            {
            // InternalOpenCypherParser.g:3468:4: (lv_orderBy_2_0= ruleSortItem )
            // InternalOpenCypherParser.g:3469:5: lv_orderBy_2_0= ruleSortItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_48);
            lv_orderBy_2_0=ruleSortItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderRule());
              					}
              					add(
              						current,
              						"orderBy",
              						lv_orderBy_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SortItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3486:3: (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==Comma) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // InternalOpenCypherParser.g:3487:4: otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getOrderAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:3491:4: ( (lv_orderBy_4_0= ruleSortItem ) )
            	    // InternalOpenCypherParser.g:3492:5: (lv_orderBy_4_0= ruleSortItem )
            	    {
            	    // InternalOpenCypherParser.g:3492:5: (lv_orderBy_4_0= ruleSortItem )
            	    // InternalOpenCypherParser.g:3493:6: lv_orderBy_4_0= ruleSortItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_48);
            	    lv_orderBy_4_0=ruleSortItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOrderRule());
            	      						}
            	      						add(
            	      							current,
            	      							"orderBy",
            	      							lv_orderBy_4_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.SortItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrder"


    // $ANTLR start "entryRuleSkip"
    // InternalOpenCypherParser.g:3515:1: entryRuleSkip returns [EObject current=null] : iv_ruleSkip= ruleSkip EOF ;
    public final EObject entryRuleSkip() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSkip = null;


        try {
            // InternalOpenCypherParser.g:3515:45: (iv_ruleSkip= ruleSkip EOF )
            // InternalOpenCypherParser.g:3516:2: iv_ruleSkip= ruleSkip EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSkipRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSkip=ruleSkip();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSkip; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSkip"


    // $ANTLR start "ruleSkip"
    // InternalOpenCypherParser.g:3522:1: ruleSkip returns [EObject current=null] : (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) ) ;
    public final EObject ruleSkip() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_skip_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3528:2: ( (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:3529:2: (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:3529:2: (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:3530:3: otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,SKIP,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSkipAccess().getSKIPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3534:3: ( (lv_skip_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3535:4: (lv_skip_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3535:4: (lv_skip_1_0= ruleExpression )
            // InternalOpenCypherParser.g:3536:5: lv_skip_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_skip_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSkipRule());
              					}
              					set(
              						current,
              						"skip",
              						lv_skip_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSkip"


    // $ANTLR start "entryRuleLimit"
    // InternalOpenCypherParser.g:3557:1: entryRuleLimit returns [EObject current=null] : iv_ruleLimit= ruleLimit EOF ;
    public final EObject entryRuleLimit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLimit = null;


        try {
            // InternalOpenCypherParser.g:3557:46: (iv_ruleLimit= ruleLimit EOF )
            // InternalOpenCypherParser.g:3558:2: iv_ruleLimit= ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLimit=ruleLimit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLimit; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalOpenCypherParser.g:3564:1: ruleLimit returns [EObject current=null] : (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) ) ;
    public final EObject ruleLimit() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_limit_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3570:2: ( (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:3571:2: (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:3571:2: (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:3572:3: otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,LIMIT,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getLimitAccess().getLIMITKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3576:3: ( (lv_limit_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3577:4: (lv_limit_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3577:4: (lv_limit_1_0= ruleExpression )
            // InternalOpenCypherParser.g:3578:5: lv_limit_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_limit_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLimitRule());
              					}
              					set(
              						current,
              						"limit",
              						lv_limit_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSortItem"
    // InternalOpenCypherParser.g:3599:1: entryRuleSortItem returns [EObject current=null] : iv_ruleSortItem= ruleSortItem EOF ;
    public final EObject entryRuleSortItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSortItem = null;


        try {
            // InternalOpenCypherParser.g:3599:49: (iv_ruleSortItem= ruleSortItem EOF )
            // InternalOpenCypherParser.g:3600:2: iv_ruleSortItem= ruleSortItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSortItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSortItem=ruleSortItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSortItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSortItem"


    // $ANTLR start "ruleSortItem"
    // InternalOpenCypherParser.g:3606:1: ruleSortItem returns [EObject current=null] : ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? ) ;
    public final EObject ruleSortItem() throws RecognitionException {
        EObject current = null;

        Token lv_sort_1_1=null;
        Token lv_sort_1_2=null;
        Token lv_sort_1_3=null;
        Token lv_sort_1_4=null;
        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3612:2: ( ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? ) )
            // InternalOpenCypherParser.g:3613:2: ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? )
            {
            // InternalOpenCypherParser.g:3613:2: ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? )
            // InternalOpenCypherParser.g:3614:3: ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )?
            {
            // InternalOpenCypherParser.g:3614:3: ( (lv_expression_0_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3615:4: (lv_expression_0_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3615:4: (lv_expression_0_0= ruleExpression )
            // InternalOpenCypherParser.g:3616:5: lv_expression_0_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_61);
            lv_expression_0_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSortItemRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3633:3: ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( ((LA44_0>=DESCENDING && LA44_0<=ASCENDING)||LA44_0==DESC||LA44_0==ASC) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalOpenCypherParser.g:3634:4: ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) )
                    {
                    // InternalOpenCypherParser.g:3634:4: ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) )
                    // InternalOpenCypherParser.g:3635:5: (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC )
                    {
                    // InternalOpenCypherParser.g:3635:5: (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC )
                    int alt43=4;
                    switch ( input.LA(1) ) {
                    case DESCENDING:
                        {
                        alt43=1;
                        }
                        break;
                    case DESC:
                        {
                        alt43=2;
                        }
                        break;
                    case ASCENDING:
                        {
                        alt43=3;
                        }
                        break;
                    case ASC:
                        {
                        alt43=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 43, 0, input);

                        throw nvae;
                    }

                    switch (alt43) {
                        case 1 :
                            // InternalOpenCypherParser.g:3636:6: lv_sort_1_1= DESCENDING
                            {
                            lv_sort_1_1=(Token)match(input,DESCENDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_1, grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:3647:6: lv_sort_1_2= DESC
                            {
                            lv_sort_1_2=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_2, grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_2, null);
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalOpenCypherParser.g:3658:6: lv_sort_1_3= ASCENDING
                            {
                            lv_sort_1_3=(Token)match(input,ASCENDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_3, grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_3, null);
                              					
                            }

                            }
                            break;
                        case 4 :
                            // InternalOpenCypherParser.g:3669:6: lv_sort_1_4= ASC
                            {
                            lv_sort_1_4=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_4, grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_4, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSortItem"


    // $ANTLR start "entryRuleHint"
    // InternalOpenCypherParser.g:3686:1: entryRuleHint returns [EObject current=null] : iv_ruleHint= ruleHint EOF ;
    public final EObject entryRuleHint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHint = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:3688:2: (iv_ruleHint= ruleHint EOF )
            // InternalOpenCypherParser.g:3689:2: iv_ruleHint= ruleHint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHint=ruleHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleHint"


    // $ANTLR start "ruleHint"
    // InternalOpenCypherParser.g:3698:1: ruleHint returns [EObject current=null] : ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) ) ;
    public final EObject ruleHint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_WS_2=null;
        Token otherlv_3=null;
        Token this_WS_4=null;
        Token this_WS_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token this_WS_13=null;
        Token otherlv_14=null;
        Token this_WS_15=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_21=null;
        Token this_WS_22=null;
        Token otherlv_23=null;
        Token this_WS_24=null;
        EObject lv_variable_5_0 = null;

        EObject lv_nodeLabel_6_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_9_0 = null;

        EObject lv_variables_17_0 = null;

        EObject lv_variables_19_0 = null;

        EObject lv_variable_25_0 = null;

        EObject lv_nodeLabel_26_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:3705:2: ( ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) ) )
            // InternalOpenCypherParser.g:3706:2: ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) )
            {
            // InternalOpenCypherParser.g:3706:2: ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) )
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==USING) ) {
                int LA46_1 = input.LA(2);

                if ( (LA46_1==RULE_WS) ) {
                    switch ( input.LA(3) ) {
                    case INDEX:
                        {
                        alt46=1;
                        }
                        break;
                    case JOIN:
                        {
                        alt46=2;
                        }
                        break;
                    case SCAN:
                        {
                        alt46=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // InternalOpenCypherParser.g:3707:3: ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:3707:3: ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis )
                    // InternalOpenCypherParser.g:3708:4: () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariable ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:3708:4: ()
                    // InternalOpenCypherParser.g:3709:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getIndexHintAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,USING,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getHintAccess().getUSINGKeyword_0_1());
                      			
                    }
                    this_WS_2=(Token)match(input,RULE_WS,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_2, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2());
                      			
                    }
                    otherlv_3=(Token)match(input,INDEX,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getHintAccess().getINDEXKeyword_0_3());
                      			
                    }
                    this_WS_4=(Token)match(input,RULE_WS,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_4, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4());
                      			
                    }
                    // InternalOpenCypherParser.g:3734:4: ( (lv_variable_5_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:3735:5: (lv_variable_5_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:3735:5: (lv_variable_5_0= ruleVariable )
                    // InternalOpenCypherParser.g:3736:6: lv_variable_5_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getVariableVariableParserRuleCall_0_5_0());
                      					
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_5_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_5_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3753:4: ( (lv_nodeLabel_6_0= ruleNodeLabel ) )
                    // InternalOpenCypherParser.g:3754:5: (lv_nodeLabel_6_0= ruleNodeLabel )
                    {
                    // InternalOpenCypherParser.g:3754:5: (lv_nodeLabel_6_0= ruleNodeLabel )
                    // InternalOpenCypherParser.g:3755:6: lv_nodeLabel_6_0= ruleNodeLabel
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0());
                      					
                    }
                    pushFollow(FOLLOW_62);
                    lv_nodeLabel_6_0=ruleNodeLabel();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabel",
                      							lv_nodeLabel_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    this_WS_7=(Token)match(input,RULE_WS,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_7, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7());
                      			
                    }
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8());
                      			
                    }
                    // InternalOpenCypherParser.g:3780:4: ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) )
                    // InternalOpenCypherParser.g:3781:5: (lv_propertyKeyName_9_0= rulePropertyKeyName )
                    {
                    // InternalOpenCypherParser.g:3781:5: (lv_propertyKeyName_9_0= rulePropertyKeyName )
                    // InternalOpenCypherParser.g:3782:6: lv_propertyKeyName_9_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_propertyKeyName_9_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"propertyKeyName",
                      							lv_propertyKeyName_9_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3805:3: ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* ) )
                    {
                    // InternalOpenCypherParser.g:3805:3: ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* ) )
                    // InternalOpenCypherParser.g:3806:4: () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* )
                    {
                    // InternalOpenCypherParser.g:3806:4: ()
                    // InternalOpenCypherParser.g:3807:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getJoinHintAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:3816:4: (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )* )
                    // InternalOpenCypherParser.g:3817:5: otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariable ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )*
                    {
                    otherlv_12=(Token)match(input,USING,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_12, grammarAccess.getHintAccess().getUSINGKeyword_1_1_0());
                      				
                    }
                    this_WS_13=(Token)match(input,RULE_WS,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_13, grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1());
                      				
                    }
                    otherlv_14=(Token)match(input,JOIN,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_14, grammarAccess.getHintAccess().getJOINKeyword_1_1_2());
                      				
                    }
                    this_WS_15=(Token)match(input,RULE_WS,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_15, grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3());
                      				
                    }
                    otherlv_16=(Token)match(input,ON,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_16, grammarAccess.getHintAccess().getONKeyword_1_1_4());
                      				
                    }
                    // InternalOpenCypherParser.g:3837:5: ( (lv_variables_17_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:3838:6: (lv_variables_17_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:3838:6: (lv_variables_17_0= ruleVariable )
                    // InternalOpenCypherParser.g:3839:7: lv_variables_17_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getVariablesVariableParserRuleCall_1_1_5_0());
                      						
                    }
                    pushFollow(FOLLOW_48);
                    lv_variables_17_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							add(
                      								current,
                      								"variables",
                      								lv_variables_17_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3856:5: (otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) ) )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==Comma) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:3857:6: otherlv_18= Comma ( (lv_variables_19_0= ruleVariable ) )
                    	    {
                    	    otherlv_18=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_18, grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0());
                    	      					
                    	    }
                    	    // InternalOpenCypherParser.g:3861:6: ( (lv_variables_19_0= ruleVariable ) )
                    	    // InternalOpenCypherParser.g:3862:7: (lv_variables_19_0= ruleVariable )
                    	    {
                    	    // InternalOpenCypherParser.g:3862:7: (lv_variables_19_0= ruleVariable )
                    	    // InternalOpenCypherParser.g:3863:8: lv_variables_19_0= ruleVariable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getHintAccess().getVariablesVariableParserRuleCall_1_1_6_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_48);
                    	    lv_variables_19_0=ruleVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getHintRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"variables",
                    	      									lv_variables_19_0,
                    	      									"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3884:3: ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) )
                    {
                    // InternalOpenCypherParser.g:3884:3: ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) )
                    // InternalOpenCypherParser.g:3885:4: () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) )
                    {
                    // InternalOpenCypherParser.g:3885:4: ()
                    // InternalOpenCypherParser.g:3886:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getScanHintAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:3895:4: (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) )
                    // InternalOpenCypherParser.g:3896:5: otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariable ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) )
                    {
                    otherlv_21=(Token)match(input,USING,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_21, grammarAccess.getHintAccess().getUSINGKeyword_2_1_0());
                      				
                    }
                    this_WS_22=(Token)match(input,RULE_WS,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_22, grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1());
                      				
                    }
                    otherlv_23=(Token)match(input,SCAN,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_23, grammarAccess.getHintAccess().getSCANKeyword_2_1_2());
                      				
                    }
                    this_WS_24=(Token)match(input,RULE_WS,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_24, grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3());
                      				
                    }
                    // InternalOpenCypherParser.g:3912:5: ( (lv_variable_25_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:3913:6: (lv_variable_25_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:3913:6: (lv_variable_25_0= ruleVariable )
                    // InternalOpenCypherParser.g:3914:7: lv_variable_25_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getVariableVariableParserRuleCall_2_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_25_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							set(
                      								current,
                      								"variable",
                      								lv_variable_25_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3931:5: ( (lv_nodeLabel_26_0= ruleNodeLabel ) )
                    // InternalOpenCypherParser.g:3932:6: (lv_nodeLabel_26_0= ruleNodeLabel )
                    {
                    // InternalOpenCypherParser.g:3932:6: (lv_nodeLabel_26_0= ruleNodeLabel )
                    // InternalOpenCypherParser.g:3933:7: lv_nodeLabel_26_0= ruleNodeLabel
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabel_26_0=ruleNodeLabel();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							set(
                      								current,
                      								"nodeLabel",
                      								lv_nodeLabel_26_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleHint"


    // $ANTLR start "entryRuleStart"
    // InternalOpenCypherParser.g:3959:1: entryRuleStart returns [EObject current=null] : iv_ruleStart= ruleStart EOF ;
    public final EObject entryRuleStart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStart = null;


        try {
            // InternalOpenCypherParser.g:3959:46: (iv_ruleStart= ruleStart EOF )
            // InternalOpenCypherParser.g:3960:2: iv_ruleStart= ruleStart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStart=ruleStart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStart"


    // $ANTLR start "ruleStart"
    // InternalOpenCypherParser.g:3966:1: ruleStart returns [EObject current=null] : (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? ) ;
    public final EObject ruleStart() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_startPoint_1_0 = null;

        EObject lv_startPoint_3_0 = null;

        EObject lv_where_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3972:2: ( (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:3973:2: (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:3973:2: (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:3974:3: otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )?
            {
            otherlv_0=(Token)match(input,START,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStartAccess().getSTARTKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3978:3: ( (lv_startPoint_1_0= ruleStartPoint ) )
            // InternalOpenCypherParser.g:3979:4: (lv_startPoint_1_0= ruleStartPoint )
            {
            // InternalOpenCypherParser.g:3979:4: (lv_startPoint_1_0= ruleStartPoint )
            // InternalOpenCypherParser.g:3980:5: lv_startPoint_1_0= ruleStartPoint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_startPoint_1_0=ruleStartPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartRule());
              					}
              					add(
              						current,
              						"startPoint",
              						lv_startPoint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.StartPoint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3997:3: (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==Comma) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // InternalOpenCypherParser.g:3998:4: otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getStartAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:4002:4: ( (lv_startPoint_3_0= ruleStartPoint ) )
            	    // InternalOpenCypherParser.g:4003:5: (lv_startPoint_3_0= ruleStartPoint )
            	    {
            	    // InternalOpenCypherParser.g:4003:5: (lv_startPoint_3_0= ruleStartPoint )
            	    // InternalOpenCypherParser.g:4004:6: lv_startPoint_3_0= ruleStartPoint
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_65);
            	    lv_startPoint_3_0=ruleStartPoint();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getStartRule());
            	      						}
            	      						add(
            	      							current,
            	      							"startPoint",
            	      							lv_startPoint_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.StartPoint");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            // InternalOpenCypherParser.g:4022:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==WHERE) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // InternalOpenCypherParser.g:4023:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:4023:4: (lv_where_4_0= ruleWhere )
                    // InternalOpenCypherParser.g:4024:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getStartRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStart"


    // $ANTLR start "entryRuleStartPoint"
    // InternalOpenCypherParser.g:4045:1: entryRuleStartPoint returns [EObject current=null] : iv_ruleStartPoint= ruleStartPoint EOF ;
    public final EObject entryRuleStartPoint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStartPoint = null;


        try {
            // InternalOpenCypherParser.g:4045:51: (iv_ruleStartPoint= ruleStartPoint EOF )
            // InternalOpenCypherParser.g:4046:2: iv_ruleStartPoint= ruleStartPoint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartPointRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStartPoint=ruleStartPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStartPoint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStartPoint"


    // $ANTLR start "ruleStartPoint"
    // InternalOpenCypherParser.g:4052:1: ruleStartPoint returns [EObject current=null] : ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) ) ;
    public final EObject ruleStartPoint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_variable_0_0 = null;

        EObject lv_lookup_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4058:2: ( ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) ) )
            // InternalOpenCypherParser.g:4059:2: ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) )
            {
            // InternalOpenCypherParser.g:4059:2: ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) )
            // InternalOpenCypherParser.g:4060:3: ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) )
            {
            // InternalOpenCypherParser.g:4060:3: ( (lv_variable_0_0= ruleVariable ) )
            // InternalOpenCypherParser.g:4061:4: (lv_variable_0_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:4061:4: (lv_variable_0_0= ruleVariable )
            // InternalOpenCypherParser.g:4062:5: lv_variable_0_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartPointAccess().getVariableVariableParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_variable_0_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartPointRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStartPointAccess().getEqualsSignKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:4083:3: ( (lv_lookup_2_0= ruleLookup ) )
            // InternalOpenCypherParser.g:4084:4: (lv_lookup_2_0= ruleLookup )
            {
            // InternalOpenCypherParser.g:4084:4: (lv_lookup_2_0= ruleLookup )
            // InternalOpenCypherParser.g:4085:5: lv_lookup_2_0= ruleLookup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_lookup_2_0=ruleLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartPointRule());
              					}
              					set(
              						current,
              						"lookup",
              						lv_lookup_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Lookup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStartPoint"


    // $ANTLR start "entryRuleLookup"
    // InternalOpenCypherParser.g:4106:1: entryRuleLookup returns [EObject current=null] : iv_ruleLookup= ruleLookup EOF ;
    public final EObject entryRuleLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLookup = null;


        try {
            // InternalOpenCypherParser.g:4106:47: (iv_ruleLookup= ruleLookup EOF )
            // InternalOpenCypherParser.g:4107:2: iv_ruleLookup= ruleLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLookup=ruleLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLookup"


    // $ANTLR start "ruleLookup"
    // InternalOpenCypherParser.g:4113:1: ruleLookup returns [EObject current=null] : (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup ) ;
    public final EObject ruleLookup() throws RecognitionException {
        EObject current = null;

        EObject this_NodeLookup_0 = null;

        EObject this_RelationshipLookup_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4119:2: ( (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup ) )
            // InternalOpenCypherParser.g:4120:2: (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup )
            {
            // InternalOpenCypherParser.g:4120:2: (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==NODE) ) {
                alt49=1;
            }
            else if ( (LA49_0==RELATIONSHIP||LA49_0==REL) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // InternalOpenCypherParser.g:4121:3: this_NodeLookup_0= ruleNodeLookup
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NodeLookup_0=ruleNodeLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NodeLookup_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4133:3: this_RelationshipLookup_1= ruleRelationshipLookup
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RelationshipLookup_1=ruleRelationshipLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RelationshipLookup_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLookup"


    // $ANTLR start "entryRuleNodeLookup"
    // InternalOpenCypherParser.g:4148:1: entryRuleNodeLookup returns [EObject current=null] : iv_ruleNodeLookup= ruleNodeLookup EOF ;
    public final EObject entryRuleNodeLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLookup = null;


        try {
            // InternalOpenCypherParser.g:4148:51: (iv_ruleNodeLookup= ruleNodeLookup EOF )
            // InternalOpenCypherParser.g:4149:2: iv_ruleNodeLookup= ruleNodeLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLookup=ruleNodeLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLookup"


    // $ANTLR start "ruleNodeLookup"
    // InternalOpenCypherParser.g:4155:1: ruleNodeLookup returns [EObject current=null] : (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) ) ;
    public final EObject ruleNodeLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_IdentifiedIndexLookup_1 = null;

        EObject this_IndexQuery_2 = null;

        EObject this_IdLookup_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4161:2: ( (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) ) )
            // InternalOpenCypherParser.g:4162:2: (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) )
            {
            // InternalOpenCypherParser.g:4162:2: (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) )
            // InternalOpenCypherParser.g:4163:3: otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )
            {
            otherlv_0=(Token)match(input,NODE,FOLLOW_67); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodeLookupAccess().getNODEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4167:3: (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==Colon) ) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==RULE_SYMBOLIC_NAME) ) {
                    int LA50_3 = input.LA(3);

                    if ( (LA50_3==LeftParenthesis) ) {
                        int LA50_4 = input.LA(4);

                        if ( (LA50_4==DollarSign||LA50_4==RULE_STRING_LITERAL) ) {
                            alt50=2;
                        }
                        else if ( (LA50_4==RULE_SYMBOLIC_NAME) ) {
                            alt50=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA50_0==LeftParenthesis) ) {
                alt50=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // InternalOpenCypherParser.g:4168:4: this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifiedIndexLookup_1=ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdentifiedIndexLookup_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4180:4: this_IndexQuery_2= ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IndexQuery_2=ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IndexQuery_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4192:4: this_IdLookup_3= ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdLookup_3=ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdLookup_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLookup"


    // $ANTLR start "entryRuleRelationshipLookup"
    // InternalOpenCypherParser.g:4208:1: entryRuleRelationshipLookup returns [EObject current=null] : iv_ruleRelationshipLookup= ruleRelationshipLookup EOF ;
    public final EObject entryRuleRelationshipLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipLookup = null;


        try {
            // InternalOpenCypherParser.g:4208:59: (iv_ruleRelationshipLookup= ruleRelationshipLookup EOF )
            // InternalOpenCypherParser.g:4209:2: iv_ruleRelationshipLookup= ruleRelationshipLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipLookup=ruleRelationshipLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipLookup"


    // $ANTLR start "ruleRelationshipLookup"
    // InternalOpenCypherParser.g:4215:1: ruleRelationshipLookup returns [EObject current=null] : ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) ) ;
    public final EObject ruleRelationshipLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_IdentifiedIndexLookup_2 = null;

        EObject this_IndexQuery_3 = null;

        EObject this_IdLookup_4 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4221:2: ( ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) ) )
            // InternalOpenCypherParser.g:4222:2: ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) )
            {
            // InternalOpenCypherParser.g:4222:2: ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) )
            // InternalOpenCypherParser.g:4223:3: (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )
            {
            // InternalOpenCypherParser.g:4223:3: (otherlv_0= RELATIONSHIP | otherlv_1= REL )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==RELATIONSHIP) ) {
                alt51=1;
            }
            else if ( (LA51_0==REL) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // InternalOpenCypherParser.g:4224:4: otherlv_0= RELATIONSHIP
                    {
                    otherlv_0=(Token)match(input,RELATIONSHIP,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4229:4: otherlv_1= REL
                    {
                    otherlv_1=(Token)match(input,REL,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalOpenCypherParser.g:4234:3: (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )
            int alt52=3;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==Colon) ) {
                int LA52_1 = input.LA(2);

                if ( (LA52_1==RULE_SYMBOLIC_NAME) ) {
                    int LA52_3 = input.LA(3);

                    if ( (LA52_3==LeftParenthesis) ) {
                        int LA52_4 = input.LA(4);

                        if ( (LA52_4==DollarSign||LA52_4==RULE_STRING_LITERAL) ) {
                            alt52=2;
                        }
                        else if ( (LA52_4==RULE_SYMBOLIC_NAME) ) {
                            alt52=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 52, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 52, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA52_0==LeftParenthesis) ) {
                alt52=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // InternalOpenCypherParser.g:4235:4: this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifiedIndexLookup_2=ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdentifiedIndexLookup_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4247:4: this_IndexQuery_3= ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IndexQuery_3=ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IndexQuery_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4259:4: this_IdLookup_4= ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdLookup_4=ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdLookup_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipLookup"


    // $ANTLR start "entryRuleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:4275:1: entryRuleIdentifiedIndexLookup returns [EObject current=null] : iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF ;
    public final EObject entryRuleIdentifiedIndexLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentifiedIndexLookup = null;


        try {
            // InternalOpenCypherParser.g:4275:62: (iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF )
            // InternalOpenCypherParser.g:4276:2: iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifiedIndexLookup=ruleIdentifiedIndexLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifiedIndexLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdentifiedIndexLookup"


    // $ANTLR start "ruleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:4282:1: ruleIdentifiedIndexLookup returns [EObject current=null] : (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= RULE_SYMBOLIC_NAME ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis ) ;
    public final EObject ruleIdentifiedIndexLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_indexName_1_0=null;
        Token otherlv_2=null;
        Token lv_key_3_0=null;
        Token otherlv_4=null;
        Token lv_value_5_0=null;
        Token otherlv_7=null;
        EObject lv_legacyParameter_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4288:2: ( (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= RULE_SYMBOLIC_NAME ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis ) )
            // InternalOpenCypherParser.g:4289:2: (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= RULE_SYMBOLIC_NAME ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis )
            {
            // InternalOpenCypherParser.g:4289:2: (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= RULE_SYMBOLIC_NAME ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis )
            // InternalOpenCypherParser.g:4290:3: otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= RULE_SYMBOLIC_NAME ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4294:3: ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) )
            // InternalOpenCypherParser.g:4295:4: (lv_indexName_1_0= RULE_SYMBOLIC_NAME )
            {
            // InternalOpenCypherParser.g:4295:4: (lv_indexName_1_0= RULE_SYMBOLIC_NAME )
            // InternalOpenCypherParser.g:4296:5: lv_indexName_1_0= RULE_SYMBOLIC_NAME
            {
            lv_indexName_1_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_indexName_1_0, grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAMETerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getIdentifiedIndexLookupRule());
              					}
              					setWithLastConsumed(
              						current,
              						"indexName",
              						lv_indexName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:4316:3: ( (lv_key_3_0= RULE_SYMBOLIC_NAME ) )
            // InternalOpenCypherParser.g:4317:4: (lv_key_3_0= RULE_SYMBOLIC_NAME )
            {
            // InternalOpenCypherParser.g:4317:4: (lv_key_3_0= RULE_SYMBOLIC_NAME )
            // InternalOpenCypherParser.g:4318:5: lv_key_3_0= RULE_SYMBOLIC_NAME
            {
            lv_key_3_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_key_3_0, grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAMETerminalRuleCall_3_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getIdentifiedIndexLookupRule());
              					}
              					setWithLastConsumed(
              						current,
              						"key",
              						lv_key_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
              				
            }

            }


            }

            otherlv_4=(Token)match(input,EqualsSign,FOLLOW_68); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:4338:3: ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==RULE_STRING_LITERAL) ) {
                alt53=1;
            }
            else if ( (LA53_0==LeftCurlyBracket) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // InternalOpenCypherParser.g:4339:4: ( (lv_value_5_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalOpenCypherParser.g:4339:4: ( (lv_value_5_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:4340:5: (lv_value_5_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:4340:5: (lv_value_5_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:4341:6: lv_value_5_0= RULE_STRING_LITERAL
                    {
                    lv_value_5_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_5_0, grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifiedIndexLookupRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_5_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4358:4: ( (lv_legacyParameter_6_0= ruleLegacyParameter ) )
                    {
                    // InternalOpenCypherParser.g:4358:4: ( (lv_legacyParameter_6_0= ruleLegacyParameter ) )
                    // InternalOpenCypherParser.g:4359:5: (lv_legacyParameter_6_0= ruleLegacyParameter )
                    {
                    // InternalOpenCypherParser.g:4359:5: (lv_legacyParameter_6_0= ruleLegacyParameter )
                    // InternalOpenCypherParser.g:4360:6: lv_legacyParameter_6_0= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_legacyParameter_6_0=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
                      						}
                      						set(
                      							current,
                      							"legacyParameter",
                      							lv_legacyParameter_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.LegacyParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdentifiedIndexLookup"


    // $ANTLR start "entryRuleIndexQuery"
    // InternalOpenCypherParser.g:4386:1: entryRuleIndexQuery returns [EObject current=null] : iv_ruleIndexQuery= ruleIndexQuery EOF ;
    public final EObject entryRuleIndexQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIndexQuery = null;


        try {
            // InternalOpenCypherParser.g:4386:51: (iv_ruleIndexQuery= ruleIndexQuery EOF )
            // InternalOpenCypherParser.g:4387:2: iv_ruleIndexQuery= ruleIndexQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIndexQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIndexQuery=ruleIndexQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIndexQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndexQuery"


    // $ANTLR start "ruleIndexQuery"
    // InternalOpenCypherParser.g:4393:1: ruleIndexQuery returns [EObject current=null] : (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleIndexQuery() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_indexName_1_0=null;
        Token otherlv_2=null;
        Token lv_query_3_0=null;
        Token otherlv_5=null;
        EObject lv_parameter_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4399:2: ( (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:4400:2: (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:4400:2: (otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:4401:3: otherlv_0= Colon ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexQueryAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4405:3: ( (lv_indexName_1_0= RULE_SYMBOLIC_NAME ) )
            // InternalOpenCypherParser.g:4406:4: (lv_indexName_1_0= RULE_SYMBOLIC_NAME )
            {
            // InternalOpenCypherParser.g:4406:4: (lv_indexName_1_0= RULE_SYMBOLIC_NAME )
            // InternalOpenCypherParser.g:4407:5: lv_indexName_1_0= RULE_SYMBOLIC_NAME
            {
            lv_indexName_1_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_indexName_1_0, grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAMETerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getIndexQueryRule());
              					}
              					setWithLastConsumed(
              						current,
              						"indexName",
              						lv_indexName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:4427:3: ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==RULE_STRING_LITERAL) ) {
                alt54=1;
            }
            else if ( (LA54_0==DollarSign) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // InternalOpenCypherParser.g:4428:4: ( (lv_query_3_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalOpenCypherParser.g:4428:4: ( (lv_query_3_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:4429:5: (lv_query_3_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:4429:5: (lv_query_3_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:4430:6: lv_query_3_0= RULE_STRING_LITERAL
                    {
                    lv_query_3_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_query_3_0, grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIndexQueryRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"query",
                      							lv_query_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4447:4: ( (lv_parameter_4_0= ruleParameter ) )
                    {
                    // InternalOpenCypherParser.g:4447:4: ( (lv_parameter_4_0= ruleParameter ) )
                    // InternalOpenCypherParser.g:4448:5: (lv_parameter_4_0= ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4448:5: (lv_parameter_4_0= ruleParameter )
                    // InternalOpenCypherParser.g:4449:6: lv_parameter_4_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_parameter_4_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIndexQueryRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_4_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndexQuery"


    // $ANTLR start "entryRuleIdLookup"
    // InternalOpenCypherParser.g:4475:1: entryRuleIdLookup returns [EObject current=null] : iv_ruleIdLookup= ruleIdLookup EOF ;
    public final EObject entryRuleIdLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdLookup = null;


        try {
            // InternalOpenCypherParser.g:4475:49: (iv_ruleIdLookup= ruleIdLookup EOF )
            // InternalOpenCypherParser.g:4476:2: iv_ruleIdLookup= ruleIdLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdLookup=ruleIdLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdLookup"


    // $ANTLR start "ruleIdLookup"
    // InternalOpenCypherParser.g:4482:1: ruleIdLookup returns [EObject current=null] : (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleIdLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_wildcard_3_0=null;
        Token otherlv_4=null;
        EObject lv_ids_1_0 = null;

        EObject lv_legacyParameter_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4488:2: ( (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis ) )
            // InternalOpenCypherParser.g:4489:2: (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis )
            {
            // InternalOpenCypherParser.g:4489:2: (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis )
            // InternalOpenCypherParser.g:4490:3: otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4494:3: ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) )
            int alt55=3;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt55=1;
                }
                break;
            case DollarSign:
                {
                alt55=2;
                }
                break;
            case Asterisk:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // InternalOpenCypherParser.g:4495:4: ( (lv_ids_1_0= ruleLiteralIds ) )
                    {
                    // InternalOpenCypherParser.g:4495:4: ( (lv_ids_1_0= ruleLiteralIds ) )
                    // InternalOpenCypherParser.g:4496:5: (lv_ids_1_0= ruleLiteralIds )
                    {
                    // InternalOpenCypherParser.g:4496:5: (lv_ids_1_0= ruleLiteralIds )
                    // InternalOpenCypherParser.g:4497:6: lv_ids_1_0= ruleLiteralIds
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_ids_1_0=ruleLiteralIds();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdLookupRule());
                      						}
                      						set(
                      							current,
                      							"ids",
                      							lv_ids_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.LiteralIds");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4515:4: ( (lv_legacyParameter_2_0= ruleParameter ) )
                    {
                    // InternalOpenCypherParser.g:4515:4: ( (lv_legacyParameter_2_0= ruleParameter ) )
                    // InternalOpenCypherParser.g:4516:5: (lv_legacyParameter_2_0= ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4516:5: (lv_legacyParameter_2_0= ruleParameter )
                    // InternalOpenCypherParser.g:4517:6: lv_legacyParameter_2_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_legacyParameter_2_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdLookupRule());
                      						}
                      						set(
                      							current,
                      							"legacyParameter",
                      							lv_legacyParameter_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4535:4: ( (lv_wildcard_3_0= Asterisk ) )
                    {
                    // InternalOpenCypherParser.g:4535:4: ( (lv_wildcard_3_0= Asterisk ) )
                    // InternalOpenCypherParser.g:4536:5: (lv_wildcard_3_0= Asterisk )
                    {
                    // InternalOpenCypherParser.g:4536:5: (lv_wildcard_3_0= Asterisk )
                    // InternalOpenCypherParser.g:4537:6: lv_wildcard_3_0= Asterisk
                    {
                    lv_wildcard_3_0=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_wildcard_3_0, grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdLookupRule());
                      						}
                      						setWithLastConsumed(current, "wildcard", lv_wildcard_3_0, "*");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdLookup"


    // $ANTLR start "entryRuleLiteralIds"
    // InternalOpenCypherParser.g:4558:1: entryRuleLiteralIds returns [EObject current=null] : iv_ruleLiteralIds= ruleLiteralIds EOF ;
    public final EObject entryRuleLiteralIds() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralIds = null;


        try {
            // InternalOpenCypherParser.g:4558:51: (iv_ruleLiteralIds= ruleLiteralIds EOF )
            // InternalOpenCypherParser.g:4559:2: iv_ruleLiteralIds= ruleLiteralIds EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralIdsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralIds=ruleLiteralIds();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralIds; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteralIds"


    // $ANTLR start "ruleLiteralIds"
    // InternalOpenCypherParser.g:4565:1: ruleLiteralIds returns [EObject current=null] : ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* ) ;
    public final EObject ruleLiteralIds() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_ids_0_0 = null;

        EObject lv_ids_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4571:2: ( ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* ) )
            // InternalOpenCypherParser.g:4572:2: ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* )
            {
            // InternalOpenCypherParser.g:4572:2: ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* )
            // InternalOpenCypherParser.g:4573:3: ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )*
            {
            // InternalOpenCypherParser.g:4573:3: ( (lv_ids_0_0= ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:4574:4: (lv_ids_0_0= ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:4574:4: (lv_ids_0_0= ruleDecimalInteger )
            // InternalOpenCypherParser.g:4575:5: lv_ids_0_0= ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_48);
            lv_ids_0_0=ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLiteralIdsRule());
              					}
              					add(
              						current,
              						"ids",
              						lv_ids_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.DecimalInteger");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:4592:3: (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==Comma) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // InternalOpenCypherParser.g:4593:4: otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_71); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:4597:4: ( (lv_ids_2_0= ruleDecimalInteger ) )
            	    // InternalOpenCypherParser.g:4598:5: (lv_ids_2_0= ruleDecimalInteger )
            	    {
            	    // InternalOpenCypherParser.g:4598:5: (lv_ids_2_0= ruleDecimalInteger )
            	    // InternalOpenCypherParser.g:4599:6: lv_ids_2_0= ruleDecimalInteger
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_48);
            	    lv_ids_2_0=ruleDecimalInteger();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLiteralIdsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"ids",
            	      							lv_ids_2_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.DecimalInteger");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteralIds"


    // $ANTLR start "entryRuleWhere"
    // InternalOpenCypherParser.g:4621:1: entryRuleWhere returns [EObject current=null] : iv_ruleWhere= ruleWhere EOF ;
    public final EObject entryRuleWhere() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhere = null;


        try {
            // InternalOpenCypherParser.g:4621:46: (iv_ruleWhere= ruleWhere EOF )
            // InternalOpenCypherParser.g:4622:2: iv_ruleWhere= ruleWhere EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhereRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhere=ruleWhere();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhere; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWhere"


    // $ANTLR start "ruleWhere"
    // InternalOpenCypherParser.g:4628:1: ruleWhere returns [EObject current=null] : (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) ) ;
    public final EObject ruleWhere() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4634:2: ( (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:4635:2: (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:4635:2: (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:4636:3: otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,WHERE,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWHEREKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4640:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:4641:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:4641:4: (lv_expression_1_0= ruleExpression )
            // InternalOpenCypherParser.g:4642:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhereRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWhere"


    // $ANTLR start "entryRulePattern"
    // InternalOpenCypherParser.g:4663:1: entryRulePattern returns [EObject current=null] : iv_rulePattern= rulePattern EOF ;
    public final EObject entryRulePattern() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePattern = null;


        try {
            // InternalOpenCypherParser.g:4663:48: (iv_rulePattern= rulePattern EOF )
            // InternalOpenCypherParser.g:4664:2: iv_rulePattern= rulePattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePattern=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePattern"


    // $ANTLR start "rulePattern"
    // InternalOpenCypherParser.g:4670:1: rulePattern returns [EObject current=null] : ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* ) ;
    public final EObject rulePattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_patterns_0_0 = null;

        EObject lv_patterns_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4676:2: ( ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* ) )
            // InternalOpenCypherParser.g:4677:2: ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* )
            {
            // InternalOpenCypherParser.g:4677:2: ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* )
            // InternalOpenCypherParser.g:4678:3: ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )*
            {
            // InternalOpenCypherParser.g:4678:3: ( (lv_patterns_0_0= rulePatternPart ) )
            // InternalOpenCypherParser.g:4679:4: (lv_patterns_0_0= rulePatternPart )
            {
            // InternalOpenCypherParser.g:4679:4: (lv_patterns_0_0= rulePatternPart )
            // InternalOpenCypherParser.g:4680:5: lv_patterns_0_0= rulePatternPart
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_48);
            lv_patterns_0_0=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternRule());
              					}
              					add(
              						current,
              						"patterns",
              						lv_patterns_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PatternPart");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:4697:3: (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==Comma) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // InternalOpenCypherParser.g:4698:4: otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:4702:4: ( (lv_patterns_2_0= rulePatternPart ) )
            	    // InternalOpenCypherParser.g:4703:5: (lv_patterns_2_0= rulePatternPart )
            	    {
            	    // InternalOpenCypherParser.g:4703:5: (lv_patterns_2_0= rulePatternPart )
            	    // InternalOpenCypherParser.g:4704:6: lv_patterns_2_0= rulePatternPart
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_48);
            	    lv_patterns_2_0=rulePatternPart();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getPatternRule());
            	      						}
            	      						add(
            	      							current,
            	      							"patterns",
            	      							lv_patterns_2_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternPart");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePattern"


    // $ANTLR start "entryRulePatternPart"
    // InternalOpenCypherParser.g:4726:1: entryRulePatternPart returns [EObject current=null] : iv_rulePatternPart= rulePatternPart EOF ;
    public final EObject entryRulePatternPart() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternPart = null;


        try {
            // InternalOpenCypherParser.g:4726:52: (iv_rulePatternPart= rulePatternPart EOF )
            // InternalOpenCypherParser.g:4727:2: iv_rulePatternPart= rulePatternPart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternPart=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternPart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternPart"


    // $ANTLR start "rulePatternPart"
    // InternalOpenCypherParser.g:4733:1: rulePatternPart returns [EObject current=null] : ( ( ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart ) ;
    public final EObject rulePatternPart() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_var_0_0 = null;

        EObject lv_part_2_0 = null;

        EObject this_AnonymousPatternPart_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4739:2: ( ( ( ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart ) )
            // InternalOpenCypherParser.g:4740:2: ( ( ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart )
            {
            // InternalOpenCypherParser.g:4740:2: ( ( ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart )
            int alt58=2;
            switch ( input.LA(1) ) {
            case FIELDTERMINATOR:
            case RELATIONSHIP:
            case CONSTRAINT:
            case DESCENDING:
            case ASCENDING:
            case CONTAINS:
            case DISTINCT:
            case OPTIONAL:
            case PERIODIC:
            case EXPLAIN:
            case EXTRACT:
            case FOREACH:
            case HEADERS:
            case PROFILE:
            case ASSERT:
            case COMMIT:
            case CREATE:
            case CYPHER:
            case DELETE:
            case DETACH:
            case EXISTS:
            case FILTER:
            case REDUCE:
            case REMOVE:
            case RETURN:
            case SINGLE:
            case STARTS:
            case UNIQUE:
            case UNWIND:
            case COUNT:
            case FALSE:
            case INDEX:
            case LIMIT:
            case MATCH:
            case MERGE:
            case ORDER:
            case START:
            case UNION:
            case USING:
            case WHERE:
            case CASE:
            case DESC:
            case DROP:
            case ELSE:
            case ENDS:
            case FROM:
            case JOIN:
            case LOAD:
            case NODE:
            case NONE:
            case NULL:
            case SCAN:
            case SKIP:
            case THEN:
            case TRUE:
            case WHEN:
            case WITH:
            case ALL:
            case AND:
            case ANY:
            case ASC:
            case CSV:
            case END:
            case NOT:
            case REL:
            case SET:
            case XOR:
            case AS:
            case BY:
            case IN:
            case IS:
            case ON:
            case OR:
            case RULE_SYMBOLIC_NAME:
                {
                alt58=1;
                }
                break;
            case SHORTESTPATH:
                {
                int LA58_2 = input.LA(2);

                if ( (LA58_2==LeftParenthesis) ) {
                    alt58=2;
                }
                else if ( (LA58_2==EqualsSign) ) {
                    alt58=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 2, input);

                    throw nvae;
                }
                }
                break;
            case ALLSHORTESTPATHS:
                {
                int LA58_3 = input.LA(2);

                if ( (LA58_3==EqualsSign) ) {
                    alt58=1;
                }
                else if ( (LA58_3==LeftParenthesis) ) {
                    alt58=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 3, input);

                    throw nvae;
                }
                }
                break;
            case LeftParenthesis:
                {
                alt58=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    // InternalOpenCypherParser.g:4741:3: ( ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) )
                    {
                    // InternalOpenCypherParser.g:4741:3: ( ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) )
                    // InternalOpenCypherParser.g:4742:4: ( (lv_var_0_0= ruleVariable ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) )
                    {
                    // InternalOpenCypherParser.g:4742:4: ( (lv_var_0_0= ruleVariable ) )
                    // InternalOpenCypherParser.g:4743:5: (lv_var_0_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:4743:5: (lv_var_0_0= ruleVariable )
                    // InternalOpenCypherParser.g:4744:6: lv_var_0_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternPartAccess().getVarVariableParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_var_0_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternPartRule());
                      						}
                      						set(
                      							current,
                      							"var",
                      							lv_var_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1());
                      			
                    }
                    // InternalOpenCypherParser.g:4765:4: ( (lv_part_2_0= ruleAnonymousPatternPart ) )
                    // InternalOpenCypherParser.g:4766:5: (lv_part_2_0= ruleAnonymousPatternPart )
                    {
                    // InternalOpenCypherParser.g:4766:5: (lv_part_2_0= ruleAnonymousPatternPart )
                    // InternalOpenCypherParser.g:4767:6: lv_part_2_0= ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_part_2_0=ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternPartRule());
                      						}
                      						set(
                      							current,
                      							"part",
                      							lv_part_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.AnonymousPatternPart");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4786:3: this_AnonymousPatternPart_3= ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnonymousPatternPart_3=ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnonymousPatternPart_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternPart"


    // $ANTLR start "entryRuleAnonymousPatternPart"
    // InternalOpenCypherParser.g:4801:1: entryRuleAnonymousPatternPart returns [EObject current=null] : iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF ;
    public final EObject entryRuleAnonymousPatternPart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnonymousPatternPart = null;


        try {
            // InternalOpenCypherParser.g:4801:61: (iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF )
            // InternalOpenCypherParser.g:4802:2: iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnonymousPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnonymousPatternPart=ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnonymousPatternPart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnonymousPatternPart"


    // $ANTLR start "ruleAnonymousPatternPart"
    // InternalOpenCypherParser.g:4808:1: ruleAnonymousPatternPart returns [EObject current=null] : (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement ) ;
    public final EObject ruleAnonymousPatternPart() throws RecognitionException {
        EObject current = null;

        EObject this_ShortestPathPattern_0 = null;

        EObject this_PatternElement_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4814:2: ( (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement ) )
            // InternalOpenCypherParser.g:4815:2: (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement )
            {
            // InternalOpenCypherParser.g:4815:2: (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ALLSHORTESTPATHS||LA59_0==SHORTESTPATH) ) {
                alt59=1;
            }
            else if ( (LA59_0==LeftParenthesis) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // InternalOpenCypherParser.g:4816:3: this_ShortestPathPattern_0= ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ShortestPathPattern_0=ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortestPathPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4828:3: this_PatternElement_1= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PatternElement_1=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PatternElement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnonymousPatternPart"


    // $ANTLR start "entryRuleShortestPathPattern"
    // InternalOpenCypherParser.g:4843:1: entryRuleShortestPathPattern returns [EObject current=null] : iv_ruleShortestPathPattern= ruleShortestPathPattern EOF ;
    public final EObject entryRuleShortestPathPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShortestPathPattern = null;


        try {
            // InternalOpenCypherParser.g:4843:60: (iv_ruleShortestPathPattern= ruleShortestPathPattern EOF )
            // InternalOpenCypherParser.g:4844:2: iv_ruleShortestPathPattern= ruleShortestPathPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShortestPathPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShortestPathPattern=ruleShortestPathPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShortestPathPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleShortestPathPattern"


    // $ANTLR start "ruleShortestPathPattern"
    // InternalOpenCypherParser.g:4850:1: ruleShortestPathPattern returns [EObject current=null] : ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) ) ;
    public final EObject ruleShortestPathPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_patternElement_3_0 = null;

        EObject lv_patternElement_8_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4856:2: ( ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) ) )
            // InternalOpenCypherParser.g:4857:2: ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) )
            {
            // InternalOpenCypherParser.g:4857:2: ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==SHORTESTPATH) ) {
                alt60=1;
            }
            else if ( (LA60_0==ALLSHORTESTPATHS) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // InternalOpenCypherParser.g:4858:3: ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:4858:3: ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis )
                    // InternalOpenCypherParser.g:4859:4: () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:4859:4: ()
                    // InternalOpenCypherParser.g:4860:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,SHORTESTPATH,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1());
                      			
                    }
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2());
                      			
                    }
                    // InternalOpenCypherParser.g:4877:4: ( (lv_patternElement_3_0= rulePatternElement ) )
                    // InternalOpenCypherParser.g:4878:5: (lv_patternElement_3_0= rulePatternElement )
                    {
                    // InternalOpenCypherParser.g:4878:5: (lv_patternElement_3_0= rulePatternElement )
                    // InternalOpenCypherParser.g:4879:6: lv_patternElement_3_0= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_patternElement_3_0=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getShortestPathPatternRule());
                      						}
                      						set(
                      							current,
                      							"patternElement",
                      							lv_patternElement_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4902:3: ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:4902:3: ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis )
                    // InternalOpenCypherParser.g:4903:4: () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:4903:4: ()
                    // InternalOpenCypherParser.g:4904:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getShortestPathPatternAccess().getAllShortestPathAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_6=(Token)match(input,ALLSHORTESTPATHS,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1());
                      			
                    }
                    otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2());
                      			
                    }
                    // InternalOpenCypherParser.g:4921:4: ( (lv_patternElement_8_0= rulePatternElement ) )
                    // InternalOpenCypherParser.g:4922:5: (lv_patternElement_8_0= rulePatternElement )
                    {
                    // InternalOpenCypherParser.g:4922:5: (lv_patternElement_8_0= rulePatternElement )
                    // InternalOpenCypherParser.g:4923:6: lv_patternElement_8_0= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_patternElement_8_0=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getShortestPathPatternRule());
                      						}
                      						set(
                      							current,
                      							"patternElement",
                      							lv_patternElement_8_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleShortestPathPattern"


    // $ANTLR start "entryRulePatternElement"
    // InternalOpenCypherParser.g:4949:1: entryRulePatternElement returns [EObject current=null] : iv_rulePatternElement= rulePatternElement EOF ;
    public final EObject entryRulePatternElement() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternElement = null;


        try {
            // InternalOpenCypherParser.g:4949:55: (iv_rulePatternElement= rulePatternElement EOF )
            // InternalOpenCypherParser.g:4950:2: iv_rulePatternElement= rulePatternElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternElement=rulePatternElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternElement"


    // $ANTLR start "rulePatternElement"
    // InternalOpenCypherParser.g:4956:1: rulePatternElement returns [EObject current=null] : ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) ) ;
    public final EObject rulePatternElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_nodepattern_0_0 = null;

        EObject lv_chain_1_0 = null;

        EObject this_PatternElement_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4962:2: ( ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) ) )
            // InternalOpenCypherParser.g:4963:2: ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) )
            {
            // InternalOpenCypherParser.g:4963:2: ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LeftParenthesis) ) {
                int LA62_1 = input.LA(2);

                if ( ((LA62_1>=ALLSHORTESTPATHS && LA62_1<=XOR)||(LA62_1>=AS && LA62_1<=OR)||LA62_1==DollarSign||LA62_1==RightParenthesis||LA62_1==Colon||LA62_1==LeftCurlyBracket||LA62_1==RULE_SYMBOLIC_NAME) ) {
                    alt62=1;
                }
                else if ( (LA62_1==LeftParenthesis) ) {
                    alt62=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // InternalOpenCypherParser.g:4964:3: ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* )
                    {
                    // InternalOpenCypherParser.g:4964:3: ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* )
                    // InternalOpenCypherParser.g:4965:4: ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )*
                    {
                    // InternalOpenCypherParser.g:4965:4: ( (lv_nodepattern_0_0= ruleNodePattern ) )
                    // InternalOpenCypherParser.g:4966:5: (lv_nodepattern_0_0= ruleNodePattern )
                    {
                    // InternalOpenCypherParser.g:4966:5: (lv_nodepattern_0_0= ruleNodePattern )
                    // InternalOpenCypherParser.g:4967:6: lv_nodepattern_0_0= ruleNodePattern
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_72);
                    lv_nodepattern_0_0=ruleNodePattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternElementRule());
                      						}
                      						set(
                      							current,
                      							"nodepattern",
                      							lv_nodepattern_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodePattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:4984:4: ( (lv_chain_1_0= rulePatternElementChain ) )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==HyphenMinus||LA61_0==LessThanSign) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:4985:5: (lv_chain_1_0= rulePatternElementChain )
                    	    {
                    	    // InternalOpenCypherParser.g:4985:5: (lv_chain_1_0= rulePatternElementChain )
                    	    // InternalOpenCypherParser.g:4986:6: lv_chain_1_0= rulePatternElementChain
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_72);
                    	    lv_chain_1_0=rulePatternElementChain();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getPatternElementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"chain",
                    	      							lv_chain_1_0,
                    	      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternElementChain");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5005:3: (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:5005:3: (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis )
                    // InternalOpenCypherParser.g:5006:4: otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_23);
                    this_PatternElement_3=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PatternElement_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternElement"


    // $ANTLR start "entryRuleNodePattern"
    // InternalOpenCypherParser.g:5030:1: entryRuleNodePattern returns [EObject current=null] : iv_ruleNodePattern= ruleNodePattern EOF ;
    public final EObject entryRuleNodePattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodePattern = null;


        try {
            // InternalOpenCypherParser.g:5030:52: (iv_ruleNodePattern= ruleNodePattern EOF )
            // InternalOpenCypherParser.g:5031:2: iv_ruleNodePattern= ruleNodePattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodePatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodePattern=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodePattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodePattern"


    // $ANTLR start "ruleNodePattern"
    // InternalOpenCypherParser.g:5037:1: ruleNodePattern returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleNodePattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject lv_variable_2_0 = null;

        EObject lv_nodeLabels_3_0 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5043:2: ( ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:5044:2: ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:5044:2: ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:5045:3: () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariable ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis
            {
            // InternalOpenCypherParser.g:5045:3: ()
            // InternalOpenCypherParser.g:5046:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNodePatternAccess().getNodePatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:5059:3: ( (lv_variable_2_0= ruleVariable ) )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=ALLSHORTESTPATHS && LA63_0<=XOR)||(LA63_0>=AS && LA63_0<=OR)||LA63_0==RULE_SYMBOLIC_NAME) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalOpenCypherParser.g:5060:4: (lv_variable_2_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:5060:4: (lv_variable_2_0= ruleVariable )
                    // InternalOpenCypherParser.g:5061:5: lv_variable_2_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getVariableVariableParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_74);
                    lv_variable_2_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"variable",
                      						lv_variable_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5078:3: ( (lv_nodeLabels_3_0= ruleNodeLabels ) )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Colon) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // InternalOpenCypherParser.g:5079:4: (lv_nodeLabels_3_0= ruleNodeLabels )
                    {
                    // InternalOpenCypherParser.g:5079:4: (lv_nodeLabels_3_0= ruleNodeLabels )
                    // InternalOpenCypherParser.g:5080:5: lv_nodeLabels_3_0= ruleNodeLabels
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getNodeLabelsNodeLabelsParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_75);
                    lv_nodeLabels_3_0=ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"nodeLabels",
                      						lv_nodeLabels_3_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabels");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5097:3: ( (lv_properties_4_0= ruleProperties ) )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DollarSign||LA65_0==LeftCurlyBracket) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // InternalOpenCypherParser.g:5098:4: (lv_properties_4_0= ruleProperties )
                    {
                    // InternalOpenCypherParser.g:5098:4: (lv_properties_4_0= ruleProperties )
                    // InternalOpenCypherParser.g:5099:5: lv_properties_4_0= ruleProperties
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_23);
                    lv_properties_4_0=ruleProperties();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"properties",
                      						lv_properties_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Properties");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodePattern"


    // $ANTLR start "entryRulePatternElementChain"
    // InternalOpenCypherParser.g:5124:1: entryRulePatternElementChain returns [EObject current=null] : iv_rulePatternElementChain= rulePatternElementChain EOF ;
    public final EObject entryRulePatternElementChain() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternElementChain = null;


        try {
            // InternalOpenCypherParser.g:5124:60: (iv_rulePatternElementChain= rulePatternElementChain EOF )
            // InternalOpenCypherParser.g:5125:2: iv_rulePatternElementChain= rulePatternElementChain EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternElementChainRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternElementChain=rulePatternElementChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternElementChain; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternElementChain"


    // $ANTLR start "rulePatternElementChain"
    // InternalOpenCypherParser.g:5131:1: rulePatternElementChain returns [EObject current=null] : ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) ) ;
    public final EObject rulePatternElementChain() throws RecognitionException {
        EObject current = null;

        EObject lv_relationshipPattern_0_0 = null;

        EObject lv_nodePattern_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5137:2: ( ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) ) )
            // InternalOpenCypherParser.g:5138:2: ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) )
            {
            // InternalOpenCypherParser.g:5138:2: ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) )
            // InternalOpenCypherParser.g:5139:3: ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) )
            {
            // InternalOpenCypherParser.g:5139:3: ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) )
            // InternalOpenCypherParser.g:5140:4: (lv_relationshipPattern_0_0= ruleRelationshipPattern )
            {
            // InternalOpenCypherParser.g:5140:4: (lv_relationshipPattern_0_0= ruleRelationshipPattern )
            // InternalOpenCypherParser.g:5141:5: lv_relationshipPattern_0_0= ruleRelationshipPattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_relationshipPattern_0_0=ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternElementChainRule());
              					}
              					set(
              						current,
              						"relationshipPattern",
              						lv_relationshipPattern_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5158:3: ( (lv_nodePattern_1_0= ruleNodePattern ) )
            // InternalOpenCypherParser.g:5159:4: (lv_nodePattern_1_0= ruleNodePattern )
            {
            // InternalOpenCypherParser.g:5159:4: (lv_nodePattern_1_0= ruleNodePattern )
            // InternalOpenCypherParser.g:5160:5: lv_nodePattern_1_0= ruleNodePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_nodePattern_1_0=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternElementChainRule());
              					}
              					set(
              						current,
              						"nodePattern",
              						lv_nodePattern_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodePattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternElementChain"


    // $ANTLR start "entryRuleRelationshipPattern"
    // InternalOpenCypherParser.g:5181:1: entryRuleRelationshipPattern returns [EObject current=null] : iv_ruleRelationshipPattern= ruleRelationshipPattern EOF ;
    public final EObject entryRuleRelationshipPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPattern = null;


        try {
            // InternalOpenCypherParser.g:5181:60: (iv_ruleRelationshipPattern= ruleRelationshipPattern EOF )
            // InternalOpenCypherParser.g:5182:2: iv_ruleRelationshipPattern= ruleRelationshipPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPattern=ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPattern"


    // $ANTLR start "ruleRelationshipPattern"
    // InternalOpenCypherParser.g:5188:1: ruleRelationshipPattern returns [EObject current=null] : ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) ) ;
    public final EObject ruleRelationshipPattern() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_incoming_1_0 = null;

        EObject lv_detail_3_0 = null;

        AntlrDatatypeRuleToken lv_outgoing_5_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5194:2: ( ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) ) )
            // InternalOpenCypherParser.g:5195:2: ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) )
            {
            // InternalOpenCypherParser.g:5195:2: ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) )
            // InternalOpenCypherParser.g:5196:3: () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? )
            {
            // InternalOpenCypherParser.g:5196:3: ()
            // InternalOpenCypherParser.g:5197:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:5206:3: ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? )
            // InternalOpenCypherParser.g:5207:4: ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )?
            {
            // InternalOpenCypherParser.g:5207:4: ( (lv_incoming_1_0= ruleLeftArrowHead ) )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==LessThanSign) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // InternalOpenCypherParser.g:5208:5: (lv_incoming_1_0= ruleLeftArrowHead )
                    {
                    // InternalOpenCypherParser.g:5208:5: (lv_incoming_1_0= ruleLeftArrowHead )
                    // InternalOpenCypherParser.g:5209:6: lv_incoming_1_0= ruleLeftArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_incoming_1_0=ruleLeftArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"incoming",
                      							true,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.LeftArrowHead");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1());
              			
            }
            pushFollow(FOLLOW_76);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }
            // InternalOpenCypherParser.g:5236:4: ( (lv_detail_3_0= ruleRelationshipDetail ) )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LeftSquareBracket) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalOpenCypherParser.g:5237:5: (lv_detail_3_0= ruleRelationshipDetail )
                    {
                    // InternalOpenCypherParser.g:5237:5: (lv_detail_3_0= ruleRelationshipDetail )
                    // InternalOpenCypherParser.g:5238:6: lv_detail_3_0= ruleRelationshipDetail
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_detail_3_0=ruleRelationshipDetail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"detail",
                      							lv_detail_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipDetail");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3());
              			
            }
            pushFollow(FOLLOW_77);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }
            // InternalOpenCypherParser.g:5265:4: ( (lv_outgoing_5_0= ruleRightArrowHead ) )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==GreaterThanSign) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // InternalOpenCypherParser.g:5266:5: (lv_outgoing_5_0= ruleRightArrowHead )
                    {
                    // InternalOpenCypherParser.g:5266:5: (lv_outgoing_5_0= ruleRightArrowHead )
                    // InternalOpenCypherParser.g:5267:6: lv_outgoing_5_0= ruleRightArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_outgoing_5_0=ruleRightArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"outgoing",
                      							true,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.RightArrowHead");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPattern"


    // $ANTLR start "entryRuleRelationshipDetail"
    // InternalOpenCypherParser.g:5289:1: entryRuleRelationshipDetail returns [EObject current=null] : iv_ruleRelationshipDetail= ruleRelationshipDetail EOF ;
    public final EObject entryRuleRelationshipDetail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipDetail = null;


        try {
            // InternalOpenCypherParser.g:5289:59: (iv_ruleRelationshipDetail= ruleRelationshipDetail EOF )
            // InternalOpenCypherParser.g:5290:2: iv_ruleRelationshipDetail= ruleRelationshipDetail EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipDetailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipDetail=ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipDetail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipDetail"


    // $ANTLR start "ruleRelationshipDetail"
    // InternalOpenCypherParser.g:5296:1: ruleRelationshipDetail returns [EObject current=null] : ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariable ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket ) ;
    public final EObject ruleRelationshipDetail() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_7=null;
        EObject lv_variable_2_0 = null;

        EObject lv_types_4_0 = null;

        EObject lv_range_5_0 = null;

        EObject lv_properties_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5302:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariable ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket ) )
            // InternalOpenCypherParser.g:5303:2: ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariable ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket )
            {
            // InternalOpenCypherParser.g:5303:2: ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariable ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket )
            // InternalOpenCypherParser.g:5304:3: () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariable ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket
            {
            // InternalOpenCypherParser.g:5304:3: ()
            // InternalOpenCypherParser.g:5305:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:5318:3: ( (lv_variable_2_0= ruleVariable ) )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=ALLSHORTESTPATHS && LA69_0<=XOR)||(LA69_0>=AS && LA69_0<=OR)||LA69_0==RULE_SYMBOLIC_NAME) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // InternalOpenCypherParser.g:5319:4: (lv_variable_2_0= ruleVariable )
                    {
                    // InternalOpenCypherParser.g:5319:4: (lv_variable_2_0= ruleVariable )
                    // InternalOpenCypherParser.g:5320:5: lv_variable_2_0= ruleVariable
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getVariableVariableParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_79);
                    lv_variable_2_0=ruleVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"variable",
                      						lv_variable_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5337:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==QuestionMark) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalOpenCypherParser.g:5338:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalOpenCypherParser.g:5338:4: (lv_optional_3_0= QuestionMark )
                    // InternalOpenCypherParser.g:5339:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_80); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getRelationshipDetailRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5351:3: ( (lv_types_4_0= ruleRelationshipTypes ) )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==Colon) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // InternalOpenCypherParser.g:5352:4: (lv_types_4_0= ruleRelationshipTypes )
                    {
                    // InternalOpenCypherParser.g:5352:4: (lv_types_4_0= ruleRelationshipTypes )
                    // InternalOpenCypherParser.g:5353:5: lv_types_4_0= ruleRelationshipTypes
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getTypesRelationshipTypesParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_81);
                    lv_types_4_0=ruleRelationshipTypes();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"types",
                      						lv_types_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipTypes");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5370:3: ( (lv_range_5_0= ruleRangeLiteral ) )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==Asterisk) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalOpenCypherParser.g:5371:4: (lv_range_5_0= ruleRangeLiteral )
                    {
                    // InternalOpenCypherParser.g:5371:4: (lv_range_5_0= ruleRangeLiteral )
                    // InternalOpenCypherParser.g:5372:5: lv_range_5_0= ruleRangeLiteral
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_82);
                    lv_range_5_0=ruleRangeLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"range",
                      						lv_range_5_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.RangeLiteral");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5389:3: ( (lv_properties_6_0= ruleProperties ) )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==DollarSign||LA73_0==LeftCurlyBracket) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalOpenCypherParser.g:5390:4: (lv_properties_6_0= ruleProperties )
                    {
                    // InternalOpenCypherParser.g:5390:4: (lv_properties_6_0= ruleProperties )
                    // InternalOpenCypherParser.g:5391:5: lv_properties_6_0= ruleProperties
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0());
                      				
                    }
                    pushFollow(FOLLOW_32);
                    lv_properties_6_0=ruleProperties();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"properties",
                      						lv_properties_6_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Properties");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipDetail"


    // $ANTLR start "entryRuleProperties"
    // InternalOpenCypherParser.g:5416:1: entryRuleProperties returns [EObject current=null] : iv_ruleProperties= ruleProperties EOF ;
    public final EObject entryRuleProperties() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleProperties = null;


        try {
            // InternalOpenCypherParser.g:5416:51: (iv_ruleProperties= ruleProperties EOF )
            // InternalOpenCypherParser.g:5417:2: iv_ruleProperties= ruleProperties EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertiesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProperties=ruleProperties();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProperties; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProperties"


    // $ANTLR start "ruleProperties"
    // InternalOpenCypherParser.g:5423:1: ruleProperties returns [EObject current=null] : (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter ) ;
    public final EObject ruleProperties() throws RecognitionException {
        EObject current = null;

        EObject this_MapLiteral_0 = null;

        EObject this_Parameter_1 = null;

        EObject this_LegacyParameter_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5429:2: ( (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter ) )
            // InternalOpenCypherParser.g:5430:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )
            {
            // InternalOpenCypherParser.g:5430:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LeftCurlyBracket) ) {
                switch ( input.LA(2) ) {
                case RULE_SYMBOLIC_NAME:
                    {
                    int LA74_3 = input.LA(3);

                    if ( (LA74_3==RightCurlyBracket) ) {
                        alt74=3;
                    }
                    else if ( (LA74_3==Colon) ) {
                        alt74=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case RightCurlyBracket:
                    {
                    alt74=1;
                    }
                    break;
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                    {
                    alt74=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA74_0==DollarSign) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // InternalOpenCypherParser.g:5431:3: this_MapLiteral_0= ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MapLiteral_0=ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MapLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5443:3: this_Parameter_1= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Parameter_1=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Parameter_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:5455:3: this_LegacyParameter_2= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyParameter_2=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyParameter_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProperties"


    // $ANTLR start "entryRuleRelType"
    // InternalOpenCypherParser.g:5470:1: entryRuleRelType returns [String current=null] : iv_ruleRelType= ruleRelType EOF ;
    public final String entryRuleRelType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelType = null;


        try {
            // InternalOpenCypherParser.g:5470:47: (iv_ruleRelType= ruleRelType EOF )
            // InternalOpenCypherParser.g:5471:2: iv_ruleRelType= ruleRelType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelType=ruleRelType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelType"


    // $ANTLR start "ruleRelType"
    // InternalOpenCypherParser.g:5477:1: ruleRelType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Colon this_RelTypeName_1= ruleRelTypeName ) ;
    public final AntlrDatatypeRuleToken ruleRelType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_RelTypeName_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5483:2: ( (kw= Colon this_RelTypeName_1= ruleRelTypeName ) )
            // InternalOpenCypherParser.g:5484:2: (kw= Colon this_RelTypeName_1= ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:5484:2: (kw= Colon this_RelTypeName_1= ruleRelTypeName )
            // InternalOpenCypherParser.g:5485:3: kw= Colon this_RelTypeName_1= ruleRelTypeName
            {
            kw=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getRelTypeAccess().getColonKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_RelTypeName_1=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_RelTypeName_1);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelType"


    // $ANTLR start "entryRuleRelationshipTypes"
    // InternalOpenCypherParser.g:5504:1: entryRuleRelationshipTypes returns [EObject current=null] : iv_ruleRelationshipTypes= ruleRelationshipTypes EOF ;
    public final EObject entryRuleRelationshipTypes() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipTypes = null;


        try {
            // InternalOpenCypherParser.g:5504:58: (iv_ruleRelationshipTypes= ruleRelationshipTypes EOF )
            // InternalOpenCypherParser.g:5505:2: iv_ruleRelationshipTypes= ruleRelationshipTypes EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipTypesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipTypes=ruleRelationshipTypes();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipTypes; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipTypes"


    // $ANTLR start "ruleRelationshipTypes"
    // InternalOpenCypherParser.g:5511:1: ruleRelationshipTypes returns [EObject current=null] : (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* ) ;
    public final EObject ruleRelationshipTypes() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_relTypeName_1_0 = null;

        AntlrDatatypeRuleToken lv_relTypeName_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5517:2: ( (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* ) )
            // InternalOpenCypherParser.g:5518:2: (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* )
            {
            // InternalOpenCypherParser.g:5518:2: (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* )
            // InternalOpenCypherParser.g:5519:3: otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )*
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipTypesAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:5523:3: ( (lv_relTypeName_1_0= ruleRelTypeName ) )
            // InternalOpenCypherParser.g:5524:4: (lv_relTypeName_1_0= ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:5524:4: (lv_relTypeName_1_0= ruleRelTypeName )
            // InternalOpenCypherParser.g:5525:5: lv_relTypeName_1_0= ruleRelTypeName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_83);
            lv_relTypeName_1_0=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipTypesRule());
              					}
              					add(
              						current,
              						"relTypeName",
              						lv_relTypeName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelTypeName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5542:3: (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==VerticalLine) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5543:4: otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) )
            	    {
            	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_84); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:5547:4: (otherlv_3= Colon )?
            	    int alt75=2;
            	    int LA75_0 = input.LA(1);

            	    if ( (LA75_0==Colon) ) {
            	        alt75=1;
            	    }
            	    switch (alt75) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:5548:5: otherlv_3= Colon
            	            {
            	            otherlv_3=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    // InternalOpenCypherParser.g:5553:4: ( (lv_relTypeName_4_0= ruleRelTypeName ) )
            	    // InternalOpenCypherParser.g:5554:5: (lv_relTypeName_4_0= ruleRelTypeName )
            	    {
            	    // InternalOpenCypherParser.g:5554:5: (lv_relTypeName_4_0= ruleRelTypeName )
            	    // InternalOpenCypherParser.g:5555:6: lv_relTypeName_4_0= ruleRelTypeName
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_2_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_83);
            	    lv_relTypeName_4_0=ruleRelTypeName();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRelationshipTypesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"relTypeName",
            	      							lv_relTypeName_4_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.RelTypeName");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipTypes"


    // $ANTLR start "entryRuleNodeLabels"
    // InternalOpenCypherParser.g:5577:1: entryRuleNodeLabels returns [EObject current=null] : iv_ruleNodeLabels= ruleNodeLabels EOF ;
    public final EObject entryRuleNodeLabels() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLabels = null;


        try {
            // InternalOpenCypherParser.g:5577:51: (iv_ruleNodeLabels= ruleNodeLabels EOF )
            // InternalOpenCypherParser.g:5578:2: iv_ruleNodeLabels= ruleNodeLabels EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLabelsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLabels=ruleNodeLabels();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLabels; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLabels"


    // $ANTLR start "ruleNodeLabels"
    // InternalOpenCypherParser.g:5584:1: ruleNodeLabels returns [EObject current=null] : ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* ) ;
    public final EObject ruleNodeLabels() throws RecognitionException {
        EObject current = null;

        EObject lv_nodeLabels_0_0 = null;

        EObject lv_nodeLabels_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5590:2: ( ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* ) )
            // InternalOpenCypherParser.g:5591:2: ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* )
            {
            // InternalOpenCypherParser.g:5591:2: ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* )
            // InternalOpenCypherParser.g:5592:3: ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )*
            {
            // InternalOpenCypherParser.g:5592:3: ( (lv_nodeLabels_0_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:5593:4: (lv_nodeLabels_0_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:5593:4: (lv_nodeLabels_0_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:5594:5: lv_nodeLabels_0_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_85);
            lv_nodeLabels_0_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodeLabelsRule());
              					}
              					add(
              						current,
              						"nodeLabels",
              						lv_nodeLabels_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5611:3: ( (lv_nodeLabels_1_0= ruleNodeLabel ) )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==Colon) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5612:4: (lv_nodeLabels_1_0= ruleNodeLabel )
            	    {
            	    // InternalOpenCypherParser.g:5612:4: (lv_nodeLabels_1_0= ruleNodeLabel )
            	    // InternalOpenCypherParser.g:5613:5: lv_nodeLabels_1_0= ruleNodeLabel
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_85);
            	    lv_nodeLabels_1_0=ruleNodeLabel();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getNodeLabelsRule());
            	      					}
            	      					add(
            	      						current,
            	      						"nodeLabels",
            	      						lv_nodeLabels_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLabels"


    // $ANTLR start "entryRuleNodeLabel"
    // InternalOpenCypherParser.g:5634:1: entryRuleNodeLabel returns [EObject current=null] : iv_ruleNodeLabel= ruleNodeLabel EOF ;
    public final EObject entryRuleNodeLabel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLabel = null;


        try {
            // InternalOpenCypherParser.g:5634:50: (iv_ruleNodeLabel= ruleNodeLabel EOF )
            // InternalOpenCypherParser.g:5635:2: iv_ruleNodeLabel= ruleNodeLabel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLabelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLabel=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLabel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLabel"


    // $ANTLR start "ruleNodeLabel"
    // InternalOpenCypherParser.g:5641:1: ruleNodeLabel returns [EObject current=null] : (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) ) ;
    public final EObject ruleNodeLabel() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        AntlrDatatypeRuleToken lv_labelName_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5647:2: ( (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) ) )
            // InternalOpenCypherParser.g:5648:2: (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) )
            {
            // InternalOpenCypherParser.g:5648:2: (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) )
            // InternalOpenCypherParser.g:5649:3: otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) )
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodeLabelAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:5653:3: ( (lv_labelName_1_0= ruleLabelName ) )
            // InternalOpenCypherParser.g:5654:4: (lv_labelName_1_0= ruleLabelName )
            {
            // InternalOpenCypherParser.g:5654:4: (lv_labelName_1_0= ruleLabelName )
            // InternalOpenCypherParser.g:5655:5: lv_labelName_1_0= ruleLabelName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_labelName_1_0=ruleLabelName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodeLabelRule());
              					}
              					set(
              						current,
              						"labelName",
              						lv_labelName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.LabelName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLabel"


    // $ANTLR start "entryRuleRangeLiteral"
    // InternalOpenCypherParser.g:5676:1: entryRuleRangeLiteral returns [EObject current=null] : iv_ruleRangeLiteral= ruleRangeLiteral EOF ;
    public final EObject entryRuleRangeLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeLiteral = null;


        try {
            // InternalOpenCypherParser.g:5676:53: (iv_ruleRangeLiteral= ruleRangeLiteral EOF )
            // InternalOpenCypherParser.g:5677:2: iv_ruleRangeLiteral= ruleRangeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRangeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRangeLiteral=ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRangeLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRangeLiteral"


    // $ANTLR start "ruleRangeLiteral"
    // InternalOpenCypherParser.g:5683:1: ruleRangeLiteral returns [EObject current=null] : ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? ) ;
    public final EObject ruleRangeLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_lower_2_0 = null;

        AntlrDatatypeRuleToken lv_upper_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5689:2: ( ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? ) )
            // InternalOpenCypherParser.g:5690:2: ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )
            {
            // InternalOpenCypherParser.g:5690:2: ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )
            // InternalOpenCypherParser.g:5691:3: () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )?
            {
            // InternalOpenCypherParser.g:5691:3: ()
            // InternalOpenCypherParser.g:5692:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Asterisk,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:5705:3: ( ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==FullStopFullStop||(LA80_0>=RULE_HEX && LA80_0<=RULE_DECIMAL)) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // InternalOpenCypherParser.g:5706:4: ( (lv_lower_2_0= ruleNumber ) )? otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )?
                    {
                    // InternalOpenCypherParser.g:5706:4: ( (lv_lower_2_0= ruleNumber ) )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( ((LA78_0>=RULE_HEX && LA78_0<=RULE_DECIMAL)) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // InternalOpenCypherParser.g:5707:5: (lv_lower_2_0= ruleNumber )
                            {
                            // InternalOpenCypherParser.g:5707:5: (lv_lower_2_0= ruleNumber )
                            // InternalOpenCypherParser.g:5708:6: lv_lower_2_0= ruleNumber
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0());
                              					
                            }
                            pushFollow(FOLLOW_87);
                            lv_lower_2_0=ruleNumber();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getRangeLiteralRule());
                              						}
                              						set(
                              							current,
                              							"lower",
                              							lv_lower_2_0,
                              							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    otherlv_3=(Token)match(input,FullStopFullStop,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getRangeLiteralAccess().getFullStopFullStopKeyword_2_1());
                      			
                    }
                    // InternalOpenCypherParser.g:5729:4: ( (lv_upper_4_0= ruleNumber ) )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( ((LA79_0>=RULE_HEX && LA79_0<=RULE_DECIMAL)) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // InternalOpenCypherParser.g:5730:5: (lv_upper_4_0= ruleNumber )
                            {
                            // InternalOpenCypherParser.g:5730:5: (lv_upper_4_0= ruleNumber )
                            // InternalOpenCypherParser.g:5731:6: lv_upper_4_0= ruleNumber
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_2_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_upper_4_0=ruleNumber();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getRangeLiteralRule());
                              						}
                              						set(
                              							current,
                              							"upper",
                              							lv_upper_4_0,
                              							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRangeLiteral"


    // $ANTLR start "entryRuleLabelName"
    // InternalOpenCypherParser.g:5753:1: entryRuleLabelName returns [String current=null] : iv_ruleLabelName= ruleLabelName EOF ;
    public final String entryRuleLabelName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLabelName = null;


        try {
            // InternalOpenCypherParser.g:5753:49: (iv_ruleLabelName= ruleLabelName EOF )
            // InternalOpenCypherParser.g:5754:2: iv_ruleLabelName= ruleLabelName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelName=ruleLabelName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLabelName"


    // $ANTLR start "ruleLabelName"
    // InternalOpenCypherParser.g:5760:1: ruleLabelName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleLabelName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5766:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:5767:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLabelName"


    // $ANTLR start "entryRuleRelTypeName"
    // InternalOpenCypherParser.g:5780:1: entryRuleRelTypeName returns [String current=null] : iv_ruleRelTypeName= ruleRelTypeName EOF ;
    public final String entryRuleRelTypeName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelTypeName = null;


        try {
            // InternalOpenCypherParser.g:5780:51: (iv_ruleRelTypeName= ruleRelTypeName EOF )
            // InternalOpenCypherParser.g:5781:2: iv_ruleRelTypeName= ruleRelTypeName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelTypeNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelTypeName=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelTypeName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelTypeName"


    // $ANTLR start "ruleRelTypeName"
    // InternalOpenCypherParser.g:5787:1: ruleRelTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleRelTypeName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5793:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:5794:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelTypeName"


    // $ANTLR start "entryRuleExpression"
    // InternalOpenCypherParser.g:5807:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalOpenCypherParser.g:5807:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalOpenCypherParser.g:5808:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalOpenCypherParser.g:5814:1: ruleExpression returns [EObject current=null] : this_ExpressionOr_0= ruleExpressionOr ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ExpressionOr_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5820:2: (this_ExpressionOr_0= ruleExpressionOr )
            // InternalOpenCypherParser.g:5821:2: this_ExpressionOr_0= ruleExpressionOr
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExpressionAccess().getExpressionOrParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_ExpressionOr_0=ruleExpressionOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_ExpressionOr_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleExpressionOr"
    // InternalOpenCypherParser.g:5835:1: entryRuleExpressionOr returns [EObject current=null] : iv_ruleExpressionOr= ruleExpressionOr EOF ;
    public final EObject entryRuleExpressionOr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionOr = null;


        try {
            // InternalOpenCypherParser.g:5835:53: (iv_ruleExpressionOr= ruleExpressionOr EOF )
            // InternalOpenCypherParser.g:5836:2: iv_ruleExpressionOr= ruleExpressionOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionOrRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionOr=ruleExpressionOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionOr; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionOr"


    // $ANTLR start "ruleExpressionOr"
    // InternalOpenCypherParser.g:5842:1: ruleExpressionOr returns [EObject current=null] : (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* ) ;
    public final EObject ruleExpressionOr() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionXor_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5848:2: ( (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* ) )
            // InternalOpenCypherParser.g:5849:2: (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* )
            {
            // InternalOpenCypherParser.g:5849:2: (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* )
            // InternalOpenCypherParser.g:5850:3: this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionOrAccess().getExpressionXorParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_88);
            this_ExpressionXor_0=ruleExpressionXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionXor_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:5861:3: ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==OR) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5862:4: () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) )
            	    {
            	    // InternalOpenCypherParser.g:5862:4: ()
            	    // InternalOpenCypherParser.g:5863:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionOrAccess().getExpressionOrLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:5872:4: ( (lv_operator_2_0= OR ) )
            	    // InternalOpenCypherParser.g:5873:5: (lv_operator_2_0= OR )
            	    {
            	    // InternalOpenCypherParser.g:5873:5: (lv_operator_2_0= OR )
            	    // InternalOpenCypherParser.g:5874:6: lv_operator_2_0= OR
            	    {
            	    lv_operator_2_0=(Token)match(input,OR,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionOrAccess().getOperatorORKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionOrRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "OR");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:5886:4: ( (lv_right_3_0= ruleExpressionXor ) )
            	    // InternalOpenCypherParser.g:5887:5: (lv_right_3_0= ruleExpressionXor )
            	    {
            	    // InternalOpenCypherParser.g:5887:5: (lv_right_3_0= ruleExpressionXor )
            	    // InternalOpenCypherParser.g:5888:6: lv_right_3_0= ruleExpressionXor
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionOrAccess().getRightExpressionXorParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_88);
            	    lv_right_3_0=ruleExpressionXor();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionOrRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionXor");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionOr"


    // $ANTLR start "entryRuleExpressionXor"
    // InternalOpenCypherParser.g:5910:1: entryRuleExpressionXor returns [EObject current=null] : iv_ruleExpressionXor= ruleExpressionXor EOF ;
    public final EObject entryRuleExpressionXor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionXor = null;


        try {
            // InternalOpenCypherParser.g:5910:54: (iv_ruleExpressionXor= ruleExpressionXor EOF )
            // InternalOpenCypherParser.g:5911:2: iv_ruleExpressionXor= ruleExpressionXor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionXorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionXor=ruleExpressionXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionXor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionXor"


    // $ANTLR start "ruleExpressionXor"
    // InternalOpenCypherParser.g:5917:1: ruleExpressionXor returns [EObject current=null] : (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* ) ;
    public final EObject ruleExpressionXor() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionAnd_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5923:2: ( (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* ) )
            // InternalOpenCypherParser.g:5924:2: (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* )
            {
            // InternalOpenCypherParser.g:5924:2: (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* )
            // InternalOpenCypherParser.g:5925:3: this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionXorAccess().getExpressionAndParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_89);
            this_ExpressionAnd_0=ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionAnd_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:5936:3: ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==XOR) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5937:4: () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) )
            	    {
            	    // InternalOpenCypherParser.g:5937:4: ()
            	    // InternalOpenCypherParser.g:5938:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionXorAccess().getExpressionXorLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:5947:4: ( (lv_operator_2_0= XOR ) )
            	    // InternalOpenCypherParser.g:5948:5: (lv_operator_2_0= XOR )
            	    {
            	    // InternalOpenCypherParser.g:5948:5: (lv_operator_2_0= XOR )
            	    // InternalOpenCypherParser.g:5949:6: lv_operator_2_0= XOR
            	    {
            	    lv_operator_2_0=(Token)match(input,XOR,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionXorAccess().getOperatorXORKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionXorRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "XOR");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:5961:4: ( (lv_right_3_0= ruleExpressionAnd ) )
            	    // InternalOpenCypherParser.g:5962:5: (lv_right_3_0= ruleExpressionAnd )
            	    {
            	    // InternalOpenCypherParser.g:5962:5: (lv_right_3_0= ruleExpressionAnd )
            	    // InternalOpenCypherParser.g:5963:6: lv_right_3_0= ruleExpressionAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionXorAccess().getRightExpressionAndParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_89);
            	    lv_right_3_0=ruleExpressionAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionXorRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionAnd");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionXor"


    // $ANTLR start "entryRuleExpressionAnd"
    // InternalOpenCypherParser.g:5985:1: entryRuleExpressionAnd returns [EObject current=null] : iv_ruleExpressionAnd= ruleExpressionAnd EOF ;
    public final EObject entryRuleExpressionAnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionAnd = null;


        try {
            // InternalOpenCypherParser.g:5985:54: (iv_ruleExpressionAnd= ruleExpressionAnd EOF )
            // InternalOpenCypherParser.g:5986:2: iv_ruleExpressionAnd= ruleExpressionAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnd=ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionAnd"


    // $ANTLR start "ruleExpressionAnd"
    // InternalOpenCypherParser.g:5992:1: ruleExpressionAnd returns [EObject current=null] : (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* ) ;
    public final EObject ruleExpressionAnd() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionNot_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5998:2: ( (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* ) )
            // InternalOpenCypherParser.g:5999:2: (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* )
            {
            // InternalOpenCypherParser.g:5999:2: (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* )
            // InternalOpenCypherParser.g:6000:3: this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAndAccess().getExpressionNotParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_90);
            this_ExpressionNot_0=ruleExpressionNot();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionNot_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6011:3: ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==AND) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6012:4: () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) )
            	    {
            	    // InternalOpenCypherParser.g:6012:4: ()
            	    // InternalOpenCypherParser.g:6013:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionAndAccess().getExpressionAndLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6022:4: ( (lv_operator_2_0= AND ) )
            	    // InternalOpenCypherParser.g:6023:5: (lv_operator_2_0= AND )
            	    {
            	    // InternalOpenCypherParser.g:6023:5: (lv_operator_2_0= AND )
            	    // InternalOpenCypherParser.g:6024:6: lv_operator_2_0= AND
            	    {
            	    lv_operator_2_0=(Token)match(input,AND,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionAndAccess().getOperatorANDKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionAndRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "AND");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:6036:4: ( (lv_right_3_0= ruleExpressionNot ) )
            	    // InternalOpenCypherParser.g:6037:5: (lv_right_3_0= ruleExpressionNot )
            	    {
            	    // InternalOpenCypherParser.g:6037:5: (lv_right_3_0= ruleExpressionNot )
            	    // InternalOpenCypherParser.g:6038:6: lv_right_3_0= ruleExpressionNot
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionAndAccess().getRightExpressionNotParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_90);
            	    lv_right_3_0=ruleExpressionNot();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionAndRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNot");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionAnd"


    // $ANTLR start "entryRuleExpressionNot"
    // InternalOpenCypherParser.g:6060:1: entryRuleExpressionNot returns [EObject current=null] : iv_ruleExpressionNot= ruleExpressionNot EOF ;
    public final EObject entryRuleExpressionNot() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionNot = null;


        try {
            // InternalOpenCypherParser.g:6060:54: (iv_ruleExpressionNot= ruleExpressionNot EOF )
            // InternalOpenCypherParser.g:6061:2: iv_ruleExpressionNot= ruleExpressionNot EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionNotRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionNot=ruleExpressionNot();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionNot; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionNot"


    // $ANTLR start "ruleExpressionNot"
    // InternalOpenCypherParser.g:6067:1: ruleExpressionNot returns [EObject current=null] : ( ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_2= ruleExpressionComparison ) ;
    public final EObject ruleExpressionNot() throws RecognitionException {
        EObject current = null;

        Token lv_operator_0_0=null;
        EObject lv_left_1_0 = null;

        EObject this_ExpressionComparison_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6073:2: ( ( ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_2= ruleExpressionComparison ) )
            // InternalOpenCypherParser.g:6074:2: ( ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_2= ruleExpressionComparison )
            {
            // InternalOpenCypherParser.g:6074:2: ( ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_2= ruleExpressionComparison )
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // InternalOpenCypherParser.g:6075:3: ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) )
                    {
                    // InternalOpenCypherParser.g:6075:3: ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) )
                    // InternalOpenCypherParser.g:6076:4: ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) )
                    {
                    // InternalOpenCypherParser.g:6076:4: ( (lv_operator_0_0= NOT ) )
                    // InternalOpenCypherParser.g:6077:5: (lv_operator_0_0= NOT )
                    {
                    // InternalOpenCypherParser.g:6077:5: (lv_operator_0_0= NOT )
                    // InternalOpenCypherParser.g:6078:6: lv_operator_0_0= NOT
                    {
                    lv_operator_0_0=(Token)match(input,NOT,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_0, grammarAccess.getExpressionNotAccess().getOperatorNOTKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getExpressionNotRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_0, "NOT");
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:6090:4: ( (lv_left_1_0= ruleExpressionNot ) )
                    // InternalOpenCypherParser.g:6091:5: (lv_left_1_0= ruleExpressionNot )
                    {
                    // InternalOpenCypherParser.g:6091:5: (lv_left_1_0= ruleExpressionNot )
                    // InternalOpenCypherParser.g:6092:6: lv_left_1_0= ruleExpressionNot
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionNotAccess().getLeftExpressionNotParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_1_0=ruleExpressionNot();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionNotRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNot");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:6111:3: this_ExpressionComparison_2= ruleExpressionComparison
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExpressionNotAccess().getExpressionComparisonParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionComparison_2=ruleExpressionComparison();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExpressionComparison_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionNot"


    // $ANTLR start "entryRuleExpressionComparison"
    // InternalOpenCypherParser.g:6126:1: entryRuleExpressionComparison returns [EObject current=null] : iv_ruleExpressionComparison= ruleExpressionComparison EOF ;
    public final EObject entryRuleExpressionComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionComparison = null;


        try {
            // InternalOpenCypherParser.g:6126:61: (iv_ruleExpressionComparison= ruleExpressionComparison EOF )
            // InternalOpenCypherParser.g:6127:2: iv_ruleExpressionComparison= ruleExpressionComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionComparison=ruleExpressionComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionComparison"


    // $ANTLR start "ruleExpressionComparison"
    // InternalOpenCypherParser.g:6133:1: ruleExpressionComparison returns [EObject current=null] : (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* ) ;
    public final EObject ruleExpressionComparison() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        Token lv_operator_2_5=null;
        Token lv_operator_2_6=null;
        Token lv_operator_2_7=null;
        EObject this_ExpressionPlusMinus_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6139:2: ( (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* ) )
            // InternalOpenCypherParser.g:6140:2: (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* )
            {
            // InternalOpenCypherParser.g:6140:2: (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* )
            // InternalOpenCypherParser.g:6141:3: this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionComparisonAccess().getExpressionPlusMinusParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_91);
            this_ExpressionPlusMinus_0=ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionPlusMinus_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6152:3: ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==ExclamationMarkEqualsSign||(LA86_0>=LessThanSignEqualsSign && LA86_0<=LessThanSignGreaterThanSign)||LA86_0==GreaterThanSignEqualsSign||(LA86_0>=LessThanSign && LA86_0<=GreaterThanSign)) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6153:4: () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) )
            	    {
            	    // InternalOpenCypherParser.g:6153:4: ()
            	    // InternalOpenCypherParser.g:6154:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionComparisonAccess().getExpressionComparisonLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6163:4: ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) ) )
            	    // InternalOpenCypherParser.g:6164:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) )
            	    {
            	    // InternalOpenCypherParser.g:6164:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign ) )
            	    // InternalOpenCypherParser.g:6165:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign )
            	    {
            	    // InternalOpenCypherParser.g:6165:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= ExclamationMarkEqualsSign | lv_operator_2_4= LessThanSign | lv_operator_2_5= GreaterThanSign | lv_operator_2_6= LessThanSignEqualsSign | lv_operator_2_7= GreaterThanSignEqualsSign )
            	    int alt85=7;
            	    switch ( input.LA(1) ) {
            	    case EqualsSign:
            	        {
            	        alt85=1;
            	        }
            	        break;
            	    case LessThanSignGreaterThanSign:
            	        {
            	        alt85=2;
            	        }
            	        break;
            	    case ExclamationMarkEqualsSign:
            	        {
            	        alt85=3;
            	        }
            	        break;
            	    case LessThanSign:
            	        {
            	        alt85=4;
            	        }
            	        break;
            	    case GreaterThanSign:
            	        {
            	        alt85=5;
            	        }
            	        break;
            	    case LessThanSignEqualsSign:
            	        {
            	        alt85=6;
            	        }
            	        break;
            	    case GreaterThanSignEqualsSign:
            	        {
            	        alt85=7;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 85, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt85) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:6166:7: lv_operator_2_1= EqualsSign
            	            {
            	            lv_operator_2_1=(Token)match(input,EqualsSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionComparisonAccess().getOperatorEqualsSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalOpenCypherParser.g:6177:7: lv_operator_2_2= LessThanSignGreaterThanSign
            	            {
            	            lv_operator_2_2=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalOpenCypherParser.g:6188:7: lv_operator_2_3= ExclamationMarkEqualsSign
            	            {
            	            lv_operator_2_3=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getExpressionComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalOpenCypherParser.g:6199:7: lv_operator_2_4= LessThanSign
            	            {
            	            lv_operator_2_4=(Token)match(input,LessThanSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_4, grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_3());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // InternalOpenCypherParser.g:6210:7: lv_operator_2_5= GreaterThanSign
            	            {
            	            lv_operator_2_5=(Token)match(input,GreaterThanSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_5, grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_4());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_5, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // InternalOpenCypherParser.g:6221:7: lv_operator_2_6= LessThanSignEqualsSign
            	            {
            	            lv_operator_2_6=(Token)match(input,LessThanSignEqualsSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_6, grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_5());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_6, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 7 :
            	            // InternalOpenCypherParser.g:6232:7: lv_operator_2_7= GreaterThanSignEqualsSign
            	            {
            	            lv_operator_2_7=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_7, grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_6());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_7, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalOpenCypherParser.g:6245:4: ( (lv_right_3_0= ruleExpressionPlusMinus ) )
            	    // InternalOpenCypherParser.g:6246:5: (lv_right_3_0= ruleExpressionPlusMinus )
            	    {
            	    // InternalOpenCypherParser.g:6246:5: (lv_right_3_0= ruleExpressionPlusMinus )
            	    // InternalOpenCypherParser.g:6247:6: lv_right_3_0= ruleExpressionPlusMinus
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionComparisonAccess().getRightExpressionPlusMinusParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_91);
            	    lv_right_3_0=ruleExpressionPlusMinus();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionComparisonRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionPlusMinus");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionComparison"


    // $ANTLR start "entryRuleExpressionPlusMinus"
    // InternalOpenCypherParser.g:6269:1: entryRuleExpressionPlusMinus returns [EObject current=null] : iv_ruleExpressionPlusMinus= ruleExpressionPlusMinus EOF ;
    public final EObject entryRuleExpressionPlusMinus() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionPlusMinus = null;


        try {
            // InternalOpenCypherParser.g:6269:60: (iv_ruleExpressionPlusMinus= ruleExpressionPlusMinus EOF )
            // InternalOpenCypherParser.g:6270:2: iv_ruleExpressionPlusMinus= ruleExpressionPlusMinus EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionPlusMinusRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionPlusMinus=ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionPlusMinus; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionPlusMinus"


    // $ANTLR start "ruleExpressionPlusMinus"
    // InternalOpenCypherParser.g:6276:1: ruleExpressionPlusMinus returns [EObject current=null] : (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* ) ;
    public final EObject ruleExpressionPlusMinus() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_ExpressionMulDiv_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6282:2: ( (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* ) )
            // InternalOpenCypherParser.g:6283:2: (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* )
            {
            // InternalOpenCypherParser.g:6283:2: (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* )
            // InternalOpenCypherParser.g:6284:3: this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionPlusMinusAccess().getExpressionMulDivParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_92);
            this_ExpressionMulDiv_0=ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionMulDiv_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6295:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==PlusSign||LA88_0==HyphenMinus) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6296:4: () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) )
            	    {
            	    // InternalOpenCypherParser.g:6296:4: ()
            	    // InternalOpenCypherParser.g:6297:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionPlusMinusAccess().getExpressionPlusMinusLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6306:4: ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) )
            	    // InternalOpenCypherParser.g:6307:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
            	    {
            	    // InternalOpenCypherParser.g:6307:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
            	    // InternalOpenCypherParser.g:6308:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
            	    {
            	    // InternalOpenCypherParser.g:6308:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
            	    int alt87=2;
            	    int LA87_0 = input.LA(1);

            	    if ( (LA87_0==PlusSign) ) {
            	        alt87=1;
            	    }
            	    else if ( (LA87_0==HyphenMinus) ) {
            	        alt87=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 87, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt87) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:6309:7: lv_operator_2_1= PlusSign
            	            {
            	            lv_operator_2_1=(Token)match(input,PlusSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionPlusMinusRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalOpenCypherParser.g:6320:7: lv_operator_2_2= HyphenMinus
            	            {
            	            lv_operator_2_2=(Token)match(input,HyphenMinus,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionPlusMinusRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalOpenCypherParser.g:6333:4: ( (lv_right_3_0= ruleExpressionMulDiv ) )
            	    // InternalOpenCypherParser.g:6334:5: (lv_right_3_0= ruleExpressionMulDiv )
            	    {
            	    // InternalOpenCypherParser.g:6334:5: (lv_right_3_0= ruleExpressionMulDiv )
            	    // InternalOpenCypherParser.g:6335:6: lv_right_3_0= ruleExpressionMulDiv
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionPlusMinusAccess().getRightExpressionMulDivParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_right_3_0=ruleExpressionMulDiv();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionPlusMinusRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionMulDiv");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionPlusMinus"


    // $ANTLR start "entryRuleExpressionMulDiv"
    // InternalOpenCypherParser.g:6357:1: entryRuleExpressionMulDiv returns [EObject current=null] : iv_ruleExpressionMulDiv= ruleExpressionMulDiv EOF ;
    public final EObject entryRuleExpressionMulDiv() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionMulDiv = null;


        try {
            // InternalOpenCypherParser.g:6357:57: (iv_ruleExpressionMulDiv= ruleExpressionMulDiv EOF )
            // InternalOpenCypherParser.g:6358:2: iv_ruleExpressionMulDiv= ruleExpressionMulDiv EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionMulDivRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionMulDiv=ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionMulDiv; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionMulDiv"


    // $ANTLR start "ruleExpressionMulDiv"
    // InternalOpenCypherParser.g:6364:1: ruleExpressionMulDiv returns [EObject current=null] : (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* ) ;
    public final EObject ruleExpressionMulDiv() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        EObject this_ExpressionPower_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6370:2: ( (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* ) )
            // InternalOpenCypherParser.g:6371:2: (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* )
            {
            // InternalOpenCypherParser.g:6371:2: (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* )
            // InternalOpenCypherParser.g:6372:3: this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionMulDivAccess().getExpressionPowerParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_93);
            this_ExpressionPower_0=ruleExpressionPower();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionPower_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6383:3: ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==PercentSign||LA90_0==Asterisk||LA90_0==Solidus) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6384:4: () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) )
            	    {
            	    // InternalOpenCypherParser.g:6384:4: ()
            	    // InternalOpenCypherParser.g:6385:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionMulDivAccess().getExpressionMulDivLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6394:4: ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) )
            	    // InternalOpenCypherParser.g:6395:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) )
            	    {
            	    // InternalOpenCypherParser.g:6395:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) )
            	    // InternalOpenCypherParser.g:6396:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign )
            	    {
            	    // InternalOpenCypherParser.g:6396:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign )
            	    int alt89=3;
            	    switch ( input.LA(1) ) {
            	    case Asterisk:
            	        {
            	        alt89=1;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt89=2;
            	        }
            	        break;
            	    case PercentSign:
            	        {
            	        alt89=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 89, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt89) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:6397:7: lv_operator_2_1= Asterisk
            	            {
            	            lv_operator_2_1=(Token)match(input,Asterisk,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionMulDivAccess().getOperatorAsteriskKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionMulDivRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalOpenCypherParser.g:6408:7: lv_operator_2_2= Solidus
            	            {
            	            lv_operator_2_2=(Token)match(input,Solidus,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionMulDivAccess().getOperatorSolidusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionMulDivRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalOpenCypherParser.g:6419:7: lv_operator_2_3= PercentSign
            	            {
            	            lv_operator_2_3=(Token)match(input,PercentSign,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getExpressionMulDivAccess().getOperatorPercentSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionMulDivRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalOpenCypherParser.g:6432:4: ( (lv_right_3_0= ruleExpressionPower ) )
            	    // InternalOpenCypherParser.g:6433:5: (lv_right_3_0= ruleExpressionPower )
            	    {
            	    // InternalOpenCypherParser.g:6433:5: (lv_right_3_0= ruleExpressionPower )
            	    // InternalOpenCypherParser.g:6434:6: lv_right_3_0= ruleExpressionPower
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionMulDivAccess().getRightExpressionPowerParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_93);
            	    lv_right_3_0=ruleExpressionPower();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionMulDivRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionPower");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionMulDiv"


    // $ANTLR start "entryRuleExpressionPower"
    // InternalOpenCypherParser.g:6456:1: entryRuleExpressionPower returns [EObject current=null] : iv_ruleExpressionPower= ruleExpressionPower EOF ;
    public final EObject entryRuleExpressionPower() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionPower = null;


        try {
            // InternalOpenCypherParser.g:6456:56: (iv_ruleExpressionPower= ruleExpressionPower EOF )
            // InternalOpenCypherParser.g:6457:2: iv_ruleExpressionPower= ruleExpressionPower EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionPowerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionPower=ruleExpressionPower();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionPower; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionPower"


    // $ANTLR start "ruleExpressionPower"
    // InternalOpenCypherParser.g:6463:1: ruleExpressionPower returns [EObject current=null] : (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* ) ;
    public final EObject ruleExpressionPower() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionUnaryPlusMinus_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6469:2: ( (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* ) )
            // InternalOpenCypherParser.g:6470:2: (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* )
            {
            // InternalOpenCypherParser.g:6470:2: (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* )
            // InternalOpenCypherParser.g:6471:3: this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionPowerAccess().getExpressionUnaryPlusMinusParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_94);
            this_ExpressionUnaryPlusMinus_0=ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionUnaryPlusMinus_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6482:3: ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==CircumflexAccent) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6483:4: () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) )
            	    {
            	    // InternalOpenCypherParser.g:6483:4: ()
            	    // InternalOpenCypherParser.g:6484:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionPowerAccess().getExpressionPowerLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6493:4: ( (lv_operator_2_0= CircumflexAccent ) )
            	    // InternalOpenCypherParser.g:6494:5: (lv_operator_2_0= CircumflexAccent )
            	    {
            	    // InternalOpenCypherParser.g:6494:5: (lv_operator_2_0= CircumflexAccent )
            	    // InternalOpenCypherParser.g:6495:6: lv_operator_2_0= CircumflexAccent
            	    {
            	    lv_operator_2_0=(Token)match(input,CircumflexAccent,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionPowerAccess().getOperatorCircumflexAccentKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionPowerRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "^");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:6507:4: ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) )
            	    // InternalOpenCypherParser.g:6508:5: (lv_right_3_0= ruleExpressionUnaryPlusMinus )
            	    {
            	    // InternalOpenCypherParser.g:6508:5: (lv_right_3_0= ruleExpressionUnaryPlusMinus )
            	    // InternalOpenCypherParser.g:6509:6: lv_right_3_0= ruleExpressionUnaryPlusMinus
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionPowerAccess().getRightExpressionUnaryPlusMinusParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_94);
            	    lv_right_3_0=ruleExpressionUnaryPlusMinus();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionPowerRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionUnaryPlusMinus");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionPower"


    // $ANTLR start "entryRuleExpressionUnaryPlusMinus"
    // InternalOpenCypherParser.g:6531:1: entryRuleExpressionUnaryPlusMinus returns [EObject current=null] : iv_ruleExpressionUnaryPlusMinus= ruleExpressionUnaryPlusMinus EOF ;
    public final EObject entryRuleExpressionUnaryPlusMinus() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionUnaryPlusMinus = null;


        try {
            // InternalOpenCypherParser.g:6531:65: (iv_ruleExpressionUnaryPlusMinus= ruleExpressionUnaryPlusMinus EOF )
            // InternalOpenCypherParser.g:6532:2: iv_ruleExpressionUnaryPlusMinus= ruleExpressionUnaryPlusMinus EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionUnaryPlusMinus=ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionUnaryPlusMinus; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionUnaryPlusMinus"


    // $ANTLR start "ruleExpressionUnaryPlusMinus"
    // InternalOpenCypherParser.g:6538:1: ruleExpressionUnaryPlusMinus returns [EObject current=null] : (this_Expression3_0= ruleExpression3 | ( ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) ) ) | ( ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) ) ) ) ;
    public final EObject ruleExpressionUnaryPlusMinus() throws RecognitionException {
        EObject current = null;

        Token lv_operator_1_0=null;
        Token lv_operator_3_0=null;
        EObject this_Expression3_0 = null;

        EObject lv_left_2_0 = null;

        EObject lv_left_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6544:2: ( (this_Expression3_0= ruleExpression3 | ( ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) ) ) | ( ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) ) ) ) )
            // InternalOpenCypherParser.g:6545:2: (this_Expression3_0= ruleExpression3 | ( ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) ) ) | ( ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) ) ) )
            {
            // InternalOpenCypherParser.g:6545:2: (this_Expression3_0= ruleExpression3 | ( ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) ) ) | ( ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) ) ) )
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( ((LA92_0>=ALLSHORTESTPATHS && LA92_0<=XOR)||(LA92_0>=AS && LA92_0<=OR)||LA92_0==DollarSign||LA92_0==LeftParenthesis||LA92_0==LeftSquareBracket||LA92_0==LeftCurlyBracket||LA92_0==RULE_SYMBOLIC_NAME||(LA92_0>=RULE_STRING_LITERAL && LA92_0<=RULE_DECIMAL)) ) {
                alt92=1;
            }
            else if ( (LA92_0==PlusSign) ) {
                alt92=2;
            }
            else if ( (LA92_0==HyphenMinus) && (synpred127_InternalOpenCypherParser())) {
                alt92=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // InternalOpenCypherParser.g:6546:3: this_Expression3_0= ruleExpression3
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusAccess().getExpression3ParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Expression3_0=ruleExpression3();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Expression3_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:6558:3: ( ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) ) )
                    {
                    // InternalOpenCypherParser.g:6558:3: ( ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) ) )
                    // InternalOpenCypherParser.g:6559:4: ( (lv_operator_1_0= PlusSign ) ) ( (lv_left_2_0= ruleExpression3 ) )
                    {
                    // InternalOpenCypherParser.g:6559:4: ( (lv_operator_1_0= PlusSign ) )
                    // InternalOpenCypherParser.g:6560:5: (lv_operator_1_0= PlusSign )
                    {
                    // InternalOpenCypherParser.g:6560:5: (lv_operator_1_0= PlusSign )
                    // InternalOpenCypherParser.g:6561:6: lv_operator_1_0= PlusSign
                    {
                    lv_operator_1_0=(Token)match(input,PlusSign,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_1_0, grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorPlusSignKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getExpressionUnaryPlusMinusRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_1_0, "+");
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:6573:4: ( (lv_left_2_0= ruleExpression3 ) )
                    // InternalOpenCypherParser.g:6574:5: (lv_left_2_0= ruleExpression3 )
                    {
                    // InternalOpenCypherParser.g:6574:5: (lv_left_2_0= ruleExpression3 )
                    // InternalOpenCypherParser.g:6575:6: lv_left_2_0= ruleExpression3
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftExpression3ParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_2_0=ruleExpression3();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionUnaryPlusMinusRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression3");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:6594:3: ( ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) ) )
                    {
                    // InternalOpenCypherParser.g:6594:3: ( ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) ) )
                    // InternalOpenCypherParser.g:6595:4: ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) ) ( (lv_left_4_0= ruleExpression3 ) )
                    {
                    // InternalOpenCypherParser.g:6595:4: ( ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus ) )
                    // InternalOpenCypherParser.g:6596:5: ( ( HyphenMinus ) )=> (lv_operator_3_0= HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:6600:5: (lv_operator_3_0= HyphenMinus )
                    // InternalOpenCypherParser.g:6601:6: lv_operator_3_0= HyphenMinus
                    {
                    lv_operator_3_0=(Token)match(input,HyphenMinus,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_3_0, grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorHyphenMinusKeyword_2_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getExpressionUnaryPlusMinusRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_3_0, "-");
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:6613:4: ( (lv_left_4_0= ruleExpression3 ) )
                    // InternalOpenCypherParser.g:6614:5: (lv_left_4_0= ruleExpression3 )
                    {
                    // InternalOpenCypherParser.g:6614:5: (lv_left_4_0= ruleExpression3 )
                    // InternalOpenCypherParser.g:6615:6: lv_left_4_0= ruleExpression3
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftExpression3ParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_4_0=ruleExpression3();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionUnaryPlusMinusRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_4_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression3");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionUnaryPlusMinus"


    // $ANTLR start "entryRuleExpression3"
    // InternalOpenCypherParser.g:6637:1: entryRuleExpression3 returns [EObject current=null] : iv_ruleExpression3= ruleExpression3 EOF ;
    public final EObject entryRuleExpression3() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression3 = null;


        try {
            // InternalOpenCypherParser.g:6637:52: (iv_ruleExpression3= ruleExpression3 EOF )
            // InternalOpenCypherParser.g:6638:2: iv_ruleExpression3= ruleExpression3 EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpression3Rule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression3=ruleExpression3();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression3; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression3"


    // $ANTLR start "ruleExpression3"
    // InternalOpenCypherParser.g:6644:1: ruleExpression3 returns [EObject current=null] : (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( (lv_expression3Parts_1_0= ruleExpression3Part ) )* ) ;
    public final EObject ruleExpression3() throws RecognitionException {
        EObject current = null;

        EObject this_ExpressionNodeLabelsAndPropertyLookup_0 = null;

        EObject lv_expression3Parts_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6650:2: ( (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( (lv_expression3Parts_1_0= ruleExpression3Part ) )* ) )
            // InternalOpenCypherParser.g:6651:2: (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( (lv_expression3Parts_1_0= ruleExpression3Part ) )* )
            {
            // InternalOpenCypherParser.g:6651:2: (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( (lv_expression3Parts_1_0= ruleExpression3Part ) )* )
            // InternalOpenCypherParser.g:6652:3: this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( (lv_expression3Parts_1_0= ruleExpression3Part ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpression3Access().getExpressionNodeLabelsAndPropertyLookupParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_95);
            this_ExpressionNodeLabelsAndPropertyLookup_0=ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionNodeLabelsAndPropertyLookup_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6663:3: ( (lv_expression3Parts_1_0= ruleExpression3Part ) )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==CONTAINS||LA93_0==STARTS||LA93_0==ENDS||LA93_0==EqualsSignTilde||(LA93_0>=IN && LA93_0<=IS)||LA93_0==LeftSquareBracket) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6664:4: (lv_expression3Parts_1_0= ruleExpression3Part )
            	    {
            	    // InternalOpenCypherParser.g:6664:4: (lv_expression3Parts_1_0= ruleExpression3Part )
            	    // InternalOpenCypherParser.g:6665:5: lv_expression3Parts_1_0= ruleExpression3Part
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getExpression3Access().getExpression3PartsExpression3PartParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_95);
            	    lv_expression3Parts_1_0=ruleExpression3Part();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      					}
            	      					add(
            	      						current,
            	      						"expression3Parts",
            	      						lv_expression3Parts_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Expression3Part");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression3"


    // $ANTLR start "entryRuleExpression3Part"
    // InternalOpenCypherParser.g:6686:1: entryRuleExpression3Part returns [EObject current=null] : iv_ruleExpression3Part= ruleExpression3Part EOF ;
    public final EObject entryRuleExpression3Part() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression3Part = null;


        try {
            // InternalOpenCypherParser.g:6686:56: (iv_ruleExpression3Part= ruleExpression3Part EOF )
            // InternalOpenCypherParser.g:6687:2: iv_ruleExpression3Part= ruleExpression3Part EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpression3PartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression3Part=ruleExpression3Part();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression3Part; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression3Part"


    // $ANTLR start "ruleExpression3Part"
    // InternalOpenCypherParser.g:6693:1: ruleExpression3Part returns [EObject current=null] : ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket ) | ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_24= IS otherlv_25= NULL ) ) | ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) ) ) ;
    public final EObject ruleExpression3Part() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token otherlv_21=null;
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token otherlv_28=null;
        Token otherlv_29=null;
        EObject lv_expression_2_0 = null;

        EObject lv_upper_4_0 = null;

        EObject lv_expression_8_0 = null;

        EObject lv_expression_11_0 = null;

        EObject lv_expression_15_0 = null;

        EObject lv_expression_19_0 = null;

        EObject lv_expression_22_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6699:2: ( ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket ) | ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_24= IS otherlv_25= NULL ) ) | ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) ) ) )
            // InternalOpenCypherParser.g:6700:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket ) | ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_24= IS otherlv_25= NULL ) ) | ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) ) )
            {
            // InternalOpenCypherParser.g:6700:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket ) | ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_24= IS otherlv_25= NULL ) ) | ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) ) )
            int alt95=8;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // InternalOpenCypherParser.g:6701:3: ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket )
                    {
                    // InternalOpenCypherParser.g:6701:3: ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket )
                    // InternalOpenCypherParser.g:6702:4: () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket
                    {
                    // InternalOpenCypherParser.g:6702:4: ()
                    // InternalOpenCypherParser.g:6703:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getIndexAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getExpression3PartAccess().getLeftSquareBracketKeyword_0_1());
                      			
                    }
                    // InternalOpenCypherParser.g:6716:4: ( (lv_expression_2_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:6717:5: (lv_expression_2_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:6717:5: (lv_expression_2_0= ruleExpression )
                    // InternalOpenCypherParser.g:6718:6: lv_expression_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpression3PartAccess().getExpressionExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_96);
                    lv_expression_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:6735:4: (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==FullStopFullStop) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // InternalOpenCypherParser.g:6736:5: otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) )
                            {
                            otherlv_3=(Token)match(input,FullStopFullStop,FOLLOW_37); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getExpression3PartAccess().getFullStopFullStopKeyword_0_3_0());
                              				
                            }
                            // InternalOpenCypherParser.g:6740:5: ( (lv_upper_4_0= ruleExpression ) )
                            // InternalOpenCypherParser.g:6741:6: (lv_upper_4_0= ruleExpression )
                            {
                            // InternalOpenCypherParser.g:6741:6: (lv_upper_4_0= ruleExpression )
                            // InternalOpenCypherParser.g:6742:7: lv_upper_4_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getExpression3PartAccess().getUpperExpressionParserRuleCall_0_3_1_0());
                              						
                            }
                            pushFollow(FOLLOW_32);
                            lv_upper_4_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                              							}
                              							set(
                              								current,
                              								"upper",
                              								lv_upper_4_0,
                              								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getExpression3PartAccess().getRightSquareBracketKeyword_0_4());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:6766:3: ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    {
                    // InternalOpenCypherParser.g:6766:3: ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    // InternalOpenCypherParser.g:6767:4: () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    {
                    // InternalOpenCypherParser.g:6767:4: ()
                    // InternalOpenCypherParser.g:6768:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getRegExpMatchingAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6777:4: (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    // InternalOpenCypherParser.g:6778:5: otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    {
                    otherlv_7=(Token)match(input,EqualsSignTilde,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_7, grammarAccess.getExpression3PartAccess().getEqualsSignTildeKeyword_1_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:6782:5: ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    // InternalOpenCypherParser.g:6783:6: (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    {
                    // InternalOpenCypherParser.g:6783:6: (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    // InternalOpenCypherParser.g:6784:7: lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getExpression3PartAccess().getExpressionExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_8_0=ruleExpressionNodeLabelsAndPropertyLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_8_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:6804:3: ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    {
                    // InternalOpenCypherParser.g:6804:3: ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    // InternalOpenCypherParser.g:6805:4: () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    {
                    // InternalOpenCypherParser.g:6805:4: ()
                    // InternalOpenCypherParser.g:6806:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getInCollectionAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6815:4: (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    // InternalOpenCypherParser.g:6816:5: otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    {
                    otherlv_10=(Token)match(input,IN,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getExpression3PartAccess().getINKeyword_2_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:6820:5: ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    // InternalOpenCypherParser.g:6821:6: (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    {
                    // InternalOpenCypherParser.g:6821:6: (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    // InternalOpenCypherParser.g:6822:7: lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getExpression3PartAccess().getExpressionExpressionNodeLabelsAndPropertyLookupParserRuleCall_2_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_11_0=ruleExpressionNodeLabelsAndPropertyLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_11_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:6842:3: ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    {
                    // InternalOpenCypherParser.g:6842:3: ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    // InternalOpenCypherParser.g:6843:4: () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    {
                    // InternalOpenCypherParser.g:6843:4: ()
                    // InternalOpenCypherParser.g:6844:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getStartsWithAction_3_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6853:4: (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    // InternalOpenCypherParser.g:6854:5: otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    {
                    otherlv_13=(Token)match(input,STARTS,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getExpression3PartAccess().getSTARTSKeyword_3_1_0());
                      				
                    }
                    otherlv_14=(Token)match(input,WITH,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_14, grammarAccess.getExpression3PartAccess().getWITHKeyword_3_1_1());
                      				
                    }
                    // InternalOpenCypherParser.g:6862:5: ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    // InternalOpenCypherParser.g:6863:6: (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    {
                    // InternalOpenCypherParser.g:6863:6: (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    // InternalOpenCypherParser.g:6864:7: lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getExpression3PartAccess().getExpressionExpressionNodeLabelsAndPropertyLookupParserRuleCall_3_1_2_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_15_0=ruleExpressionNodeLabelsAndPropertyLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_15_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:6884:3: ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    {
                    // InternalOpenCypherParser.g:6884:3: ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    // InternalOpenCypherParser.g:6885:4: () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    {
                    // InternalOpenCypherParser.g:6885:4: ()
                    // InternalOpenCypherParser.g:6886:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getEndsWithAction_4_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6895:4: (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    // InternalOpenCypherParser.g:6896:5: otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    {
                    otherlv_17=(Token)match(input,ENDS,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_17, grammarAccess.getExpression3PartAccess().getENDSKeyword_4_1_0());
                      				
                    }
                    otherlv_18=(Token)match(input,WITH,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_18, grammarAccess.getExpression3PartAccess().getWITHKeyword_4_1_1());
                      				
                    }
                    // InternalOpenCypherParser.g:6904:5: ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    // InternalOpenCypherParser.g:6905:6: (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    {
                    // InternalOpenCypherParser.g:6905:6: (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    // InternalOpenCypherParser.g:6906:7: lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getExpression3PartAccess().getExpressionExpressionNodeLabelsAndPropertyLookupParserRuleCall_4_1_2_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_19_0=ruleExpressionNodeLabelsAndPropertyLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_19_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:6926:3: ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    {
                    // InternalOpenCypherParser.g:6926:3: ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) )
                    // InternalOpenCypherParser.g:6927:4: () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    {
                    // InternalOpenCypherParser.g:6927:4: ()
                    // InternalOpenCypherParser.g:6928:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getContainsAction_5_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6937:4: (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
                    // InternalOpenCypherParser.g:6938:5: otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    {
                    otherlv_21=(Token)match(input,CONTAINS,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_21, grammarAccess.getExpression3PartAccess().getCONTAINSKeyword_5_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:6942:5: ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
                    // InternalOpenCypherParser.g:6943:6: (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    {
                    // InternalOpenCypherParser.g:6943:6: (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup )
                    // InternalOpenCypherParser.g:6944:7: lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getExpression3PartAccess().getExpressionExpressionNodeLabelsAndPropertyLookupParserRuleCall_5_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_22_0=ruleExpressionNodeLabelsAndPropertyLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getExpression3PartRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_22_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:6964:3: ( () (otherlv_24= IS otherlv_25= NULL ) )
                    {
                    // InternalOpenCypherParser.g:6964:3: ( () (otherlv_24= IS otherlv_25= NULL ) )
                    // InternalOpenCypherParser.g:6965:4: () (otherlv_24= IS otherlv_25= NULL )
                    {
                    // InternalOpenCypherParser.g:6965:4: ()
                    // InternalOpenCypherParser.g:6966:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getIsNullAction_6_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6975:4: (otherlv_24= IS otherlv_25= NULL )
                    // InternalOpenCypherParser.g:6976:5: otherlv_24= IS otherlv_25= NULL
                    {
                    otherlv_24=(Token)match(input,IS,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_24, grammarAccess.getExpression3PartAccess().getISKeyword_6_1_0());
                      				
                    }
                    otherlv_25=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_25, grammarAccess.getExpression3PartAccess().getNULLKeyword_6_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:6987:3: ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) )
                    {
                    // InternalOpenCypherParser.g:6987:3: ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) )
                    // InternalOpenCypherParser.g:6988:4: () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL )
                    {
                    // InternalOpenCypherParser.g:6988:4: ()
                    // InternalOpenCypherParser.g:6989:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpression3PartAccess().getIsNotNullAction_7_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6998:4: (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL )
                    // InternalOpenCypherParser.g:6999:5: otherlv_27= IS otherlv_28= NOT otherlv_29= NULL
                    {
                    otherlv_27=(Token)match(input,IS,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_27, grammarAccess.getExpression3PartAccess().getISKeyword_7_1_0());
                      				
                    }
                    otherlv_28=(Token)match(input,NOT,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_28, grammarAccess.getExpression3PartAccess().getNOTKeyword_7_1_1());
                      				
                    }
                    otherlv_29=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_29, grammarAccess.getExpression3PartAccess().getNULLKeyword_7_1_2());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression3Part"


    // $ANTLR start "entryRuleExpressionNodeLabelsAndPropertyLookup"
    // InternalOpenCypherParser.g:7017:1: entryRuleExpressionNodeLabelsAndPropertyLookup returns [EObject current=null] : iv_ruleExpressionNodeLabelsAndPropertyLookup= ruleExpressionNodeLabelsAndPropertyLookup EOF ;
    public final EObject entryRuleExpressionNodeLabelsAndPropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionNodeLabelsAndPropertyLookup = null;


        try {
            // InternalOpenCypherParser.g:7017:78: (iv_ruleExpressionNodeLabelsAndPropertyLookup= ruleExpressionNodeLabelsAndPropertyLookup EOF )
            // InternalOpenCypherParser.g:7018:2: iv_ruleExpressionNodeLabelsAndPropertyLookup= ruleExpressionNodeLabelsAndPropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionNodeLabelsAndPropertyLookup=ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionNodeLabelsAndPropertyLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionNodeLabelsAndPropertyLookup"


    // $ANTLR start "ruleExpressionNodeLabelsAndPropertyLookup"
    // InternalOpenCypherParser.g:7024:1: ruleExpressionNodeLabelsAndPropertyLookup returns [EObject current=null] : (this_Atom_0= ruleAtom ( ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) ) | ( (lv_nodeLabelList_3_0= ruleNodeLabel ) ) )* ) ;
    public final EObject ruleExpressionNodeLabelsAndPropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject this_Atom_0 = null;

        EObject lv_propertyLookups_2_0 = null;

        EObject lv_nodeLabelList_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7030:2: ( (this_Atom_0= ruleAtom ( ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) ) | ( (lv_nodeLabelList_3_0= ruleNodeLabel ) ) )* ) )
            // InternalOpenCypherParser.g:7031:2: (this_Atom_0= ruleAtom ( ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) ) | ( (lv_nodeLabelList_3_0= ruleNodeLabel ) ) )* )
            {
            // InternalOpenCypherParser.g:7031:2: (this_Atom_0= ruleAtom ( ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) ) | ( (lv_nodeLabelList_3_0= ruleNodeLabel ) ) )* )
            // InternalOpenCypherParser.g:7032:3: this_Atom_0= ruleAtom ( ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) ) | ( (lv_nodeLabelList_3_0= ruleNodeLabel ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getAtomParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_100);
            this_Atom_0=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Atom_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:7043:3: ( ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) ) | ( (lv_nodeLabelList_3_0= ruleNodeLabel ) ) )*
            loop96:
            do {
                int alt96=3;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==FullStop) ) {
                    alt96=1;
                }
                else if ( (LA96_0==Colon) ) {
                    alt96=2;
                }


                switch (alt96) {
            	case 1 :
            	    // InternalOpenCypherParser.g:7044:4: ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) )
            	    {
            	    // InternalOpenCypherParser.g:7044:4: ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) ) )
            	    // InternalOpenCypherParser.g:7045:5: () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )
            	    {
            	    // InternalOpenCypherParser.g:7045:5: ()
            	    // InternalOpenCypherParser.g:7046:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionNodeLabelsAndPropertyLookupLeftAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    // InternalOpenCypherParser.g:7055:5: ( (lv_propertyLookups_2_0= rulePropertyLookup ) )
            	    // InternalOpenCypherParser.g:7056:6: (lv_propertyLookups_2_0= rulePropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:7056:6: (lv_propertyLookups_2_0= rulePropertyLookup )
            	    // InternalOpenCypherParser.g:7057:7: lv_propertyLookups_2_0= rulePropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_100);
            	    lv_propertyLookups_2_0=rulePropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule());
            	      							}
            	      							add(
            	      								current,
            	      								"propertyLookups",
            	      								lv_propertyLookups_2_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.PropertyLookup");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalOpenCypherParser.g:7076:4: ( (lv_nodeLabelList_3_0= ruleNodeLabel ) )
            	    {
            	    // InternalOpenCypherParser.g:7076:4: ( (lv_nodeLabelList_3_0= ruleNodeLabel ) )
            	    // InternalOpenCypherParser.g:7077:5: (lv_nodeLabelList_3_0= ruleNodeLabel )
            	    {
            	    // InternalOpenCypherParser.g:7077:5: (lv_nodeLabelList_3_0= ruleNodeLabel )
            	    // InternalOpenCypherParser.g:7078:6: lv_nodeLabelList_3_0= ruleNodeLabel
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelListNodeLabelParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_100);
            	    lv_nodeLabelList_3_0=ruleNodeLabel();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule());
            	      						}
            	      						add(
            	      							current,
            	      							"nodeLabelList",
            	      							lv_nodeLabelList_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionNodeLabelsAndPropertyLookup"


    // $ANTLR start "entryRuleAtom"
    // InternalOpenCypherParser.g:7100:1: entryRuleAtom returns [EObject current=null] : iv_ruleAtom= ruleAtom EOF ;
    public final EObject entryRuleAtom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAtom = null;


        try {
            // InternalOpenCypherParser.g:7100:45: (iv_ruleAtom= ruleAtom EOF )
            // InternalOpenCypherParser.g:7101:2: iv_ruleAtom= ruleAtom EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAtomRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAtom=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAtom; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAtom"


    // $ANTLR start "ruleAtom"
    // InternalOpenCypherParser.g:7107:1: ruleAtom returns [EObject current=null] : ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | ( () ( (lv_expression_11_0= ruleCaseExpression ) ) ) | ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis ) | this_MapLiteral_17= ruleMapLiteral | this_ListComprehension_18= ruleListComprehension | ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) ) ;
    public final EObject ruleAtom() throws RecognitionException {
        EObject current = null;

        Token lv_value_3_0=null;
        Token lv_value_7_1=null;
        Token lv_value_7_2=null;
        Token otherlv_9=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_39=null;
        Token otherlv_40=null;
        Token otherlv_42=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token otherlv_52=null;
        Token otherlv_54=null;
        Token otherlv_55=null;
        Token otherlv_57=null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;

        EObject this_Parameter_4 = null;

        EObject this_LegacyParameter_5 = null;

        EObject lv_expression_11_0 = null;

        EObject this_MapLiteral_17 = null;

        EObject this_ListComprehension_18 = null;

        EObject lv_expressions_21_0 = null;

        EObject lv_expressions_23_0 = null;

        EObject lv_filterExpression_28_0 = null;

        EObject lv_expression_30_0 = null;

        EObject this_Reduce_32 = null;

        EObject lv_filterExpression_36_0 = null;

        EObject lv_filterExpression_41_0 = null;

        EObject lv_filterExpression_46_0 = null;

        EObject lv_filterExpression_51_0 = null;

        EObject lv_filterExpression_56_0 = null;

        EObject this_ShortestPathPattern_58 = null;

        EObject this_RelationshipsPattern_59 = null;

        EObject this_ParenthesizedExpression_60 = null;

        EObject this_FunctionInvocation_61 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7113:2: ( ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | ( () ( (lv_expression_11_0= ruleCaseExpression ) ) ) | ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis ) | this_MapLiteral_17= ruleMapLiteral | this_ListComprehension_18= ruleListComprehension | ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) ) )
            // InternalOpenCypherParser.g:7114:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | ( () ( (lv_expression_11_0= ruleCaseExpression ) ) ) | ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis ) | this_MapLiteral_17= ruleMapLiteral | this_ListComprehension_18= ruleListComprehension | ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) )
            {
            // InternalOpenCypherParser.g:7114:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | ( () ( (lv_expression_11_0= ruleCaseExpression ) ) ) | ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis ) | this_MapLiteral_17= ruleMapLiteral | this_ListComprehension_18= ruleListComprehension | ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) )
            int alt100=23;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // InternalOpenCypherParser.g:7115:3: ( () ( (lv_value_1_0= ruleNumber ) ) )
                    {
                    // InternalOpenCypherParser.g:7115:3: ( () ( (lv_value_1_0= ruleNumber ) ) )
                    // InternalOpenCypherParser.g:7116:4: () ( (lv_value_1_0= ruleNumber ) )
                    {
                    // InternalOpenCypherParser.g:7116:4: ()
                    // InternalOpenCypherParser.g:7117:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNumberConstantAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7126:4: ( (lv_value_1_0= ruleNumber ) )
                    // InternalOpenCypherParser.g:7127:5: (lv_value_1_0= ruleNumber )
                    {
                    // InternalOpenCypherParser.g:7127:5: (lv_value_1_0= ruleNumber )
                    // InternalOpenCypherParser.g:7128:6: lv_value_1_0= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getValueNumberParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_1_0=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:7147:3: ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) )
                    {
                    // InternalOpenCypherParser.g:7147:3: ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) )
                    // InternalOpenCypherParser.g:7148:4: () ( (lv_value_3_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalOpenCypherParser.g:7148:4: ()
                    // InternalOpenCypherParser.g:7149:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getStringConstantAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7158:4: ( (lv_value_3_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:7159:5: (lv_value_3_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:7159:5: (lv_value_3_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:7160:6: lv_value_3_0= RULE_STRING_LITERAL
                    {
                    lv_value_3_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_3_0, grammarAccess.getAtomAccess().getValueSTRING_LITERALTerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:7178:3: this_Parameter_4= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getParameterParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Parameter_4=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Parameter_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:7190:3: this_LegacyParameter_5= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyParameter_5=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyParameter_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:7202:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
                    {
                    // InternalOpenCypherParser.g:7202:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
                    // InternalOpenCypherParser.g:7203:4: () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
                    {
                    // InternalOpenCypherParser.g:7203:4: ()
                    // InternalOpenCypherParser.g:7204:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getBoolConstantAction_4_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7213:4: ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
                    // InternalOpenCypherParser.g:7214:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
                    {
                    // InternalOpenCypherParser.g:7214:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
                    // InternalOpenCypherParser.g:7215:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
                    {
                    // InternalOpenCypherParser.g:7215:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==TRUE) ) {
                        alt97=1;
                    }
                    else if ( (LA97_0==FALSE) ) {
                        alt97=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 0, input);

                        throw nvae;
                    }
                    switch (alt97) {
                        case 1 :
                            // InternalOpenCypherParser.g:7216:7: lv_value_7_1= TRUE
                            {
                            lv_value_7_1=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_value_7_1, grammarAccess.getAtomAccess().getValueTRUEKeyword_4_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAtomRule());
                              							}
                              							setWithLastConsumed(current, "value", lv_value_7_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:7227:7: lv_value_7_2= FALSE
                            {
                            lv_value_7_2=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_value_7_2, grammarAccess.getAtomAccess().getValueFALSEKeyword_4_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAtomRule());
                              							}
                              							setWithLastConsumed(current, "value", lv_value_7_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:7242:3: ( () otherlv_9= NULL )
                    {
                    // InternalOpenCypherParser.g:7242:3: ( () otherlv_9= NULL )
                    // InternalOpenCypherParser.g:7243:4: () otherlv_9= NULL
                    {
                    // InternalOpenCypherParser.g:7243:4: ()
                    // InternalOpenCypherParser.g:7244:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNullConstantAction_5_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_9=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getAtomAccess().getNULLKeyword_5_1());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:7259:3: ( () ( (lv_expression_11_0= ruleCaseExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:7259:3: ( () ( (lv_expression_11_0= ruleCaseExpression ) ) )
                    // InternalOpenCypherParser.g:7260:4: () ( (lv_expression_11_0= ruleCaseExpression ) )
                    {
                    // InternalOpenCypherParser.g:7260:4: ()
                    // InternalOpenCypherParser.g:7261:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getCaseExpressionAction_6_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7270:4: ( (lv_expression_11_0= ruleCaseExpression ) )
                    // InternalOpenCypherParser.g:7271:5: (lv_expression_11_0= ruleCaseExpression )
                    {
                    // InternalOpenCypherParser.g:7271:5: (lv_expression_11_0= ruleCaseExpression )
                    // InternalOpenCypherParser.g:7272:6: lv_expression_11_0= ruleCaseExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getExpressionCaseExpressionParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_11_0=ruleCaseExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_11_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.CaseExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:7291:3: ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7291:3: ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis )
                    // InternalOpenCypherParser.g:7292:4: () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7292:4: ()
                    // InternalOpenCypherParser.g:7293:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getCountAction_7_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_13=(Token)match(input,COUNT,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getAtomAccess().getCOUNTKeyword_7_1());
                      			
                    }
                    otherlv_14=(Token)match(input,LeftParenthesis,FOLLOW_101); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2());
                      			
                    }
                    otherlv_15=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_15, grammarAccess.getAtomAccess().getAsteriskKeyword_7_3());
                      			
                    }
                    otherlv_16=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_16, grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:7320:3: this_MapLiteral_17= ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getMapLiteralParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MapLiteral_17=ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MapLiteral_17;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:7332:3: this_ListComprehension_18= ruleListComprehension
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ListComprehension_18=ruleListComprehension();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ListComprehension_18;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:7344:3: ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) )
                    {
                    // InternalOpenCypherParser.g:7344:3: ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) )
                    // InternalOpenCypherParser.g:7345:4: () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket )
                    {
                    // InternalOpenCypherParser.g:7345:4: ()
                    // InternalOpenCypherParser.g:7346:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getExpressionListAction_10_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7355:4: (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket )
                    // InternalOpenCypherParser.g:7356:5: otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket
                    {
                    otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_20, grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_10_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:7360:5: ( (lv_expressions_21_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:7361:6: (lv_expressions_21_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:7361:6: (lv_expressions_21_0= ruleExpression )
                    // InternalOpenCypherParser.g:7362:7: lv_expressions_21_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_10_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_102);
                    lv_expressions_21_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAtomRule());
                      							}
                      							add(
                      								current,
                      								"expressions",
                      								lv_expressions_21_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:7379:5: (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )*
                    loop98:
                    do {
                        int alt98=2;
                        int LA98_0 = input.LA(1);

                        if ( (LA98_0==Comma) ) {
                            alt98=1;
                        }


                        switch (alt98) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:7380:6: otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) )
                    	    {
                    	    otherlv_22=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_22, grammarAccess.getAtomAccess().getCommaKeyword_10_1_2_0());
                    	      					
                    	    }
                    	    // InternalOpenCypherParser.g:7384:6: ( (lv_expressions_23_0= ruleExpression ) )
                    	    // InternalOpenCypherParser.g:7385:7: (lv_expressions_23_0= ruleExpression )
                    	    {
                    	    // InternalOpenCypherParser.g:7385:7: (lv_expressions_23_0= ruleExpression )
                    	    // InternalOpenCypherParser.g:7386:8: lv_expressions_23_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_10_1_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_102);
                    	    lv_expressions_23_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAtomRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"expressions",
                    	      									lv_expressions_23_0,
                    	      									"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop98;
                        }
                    } while (true);

                    otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_24, grammarAccess.getAtomAccess().getRightSquareBracketKeyword_10_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:7411:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7411:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
                    // InternalOpenCypherParser.g:7412:4: () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7412:4: ()
                    // InternalOpenCypherParser.g:7413:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getFilterAction_11_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_26=(Token)match(input,EXTRACT,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_26, grammarAccess.getAtomAccess().getEXTRACTKeyword_11_1());
                      			
                    }
                    otherlv_27=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_27, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_11_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7430:4: ( (lv_filterExpression_28_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7431:5: (lv_filterExpression_28_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7431:5: (lv_filterExpression_28_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7432:6: lv_filterExpression_28_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0());
                      					
                    }
                    pushFollow(FOLLOW_103);
                    lv_filterExpression_28_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_28_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:7449:4: (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==VerticalLine) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // InternalOpenCypherParser.g:7450:5: otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) )
                            {
                            otherlv_29=(Token)match(input,VerticalLine,FOLLOW_37); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_29, grammarAccess.getAtomAccess().getVerticalLineKeyword_11_4_0());
                              				
                            }
                            // InternalOpenCypherParser.g:7454:5: ( (lv_expression_30_0= ruleExpression ) )
                            // InternalOpenCypherParser.g:7455:6: (lv_expression_30_0= ruleExpression )
                            {
                            // InternalOpenCypherParser.g:7455:6: (lv_expression_30_0= ruleExpression )
                            // InternalOpenCypherParser.g:7456:7: lv_expression_30_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_11_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_23);
                            lv_expression_30_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAtomRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_30_0,
                              								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_31=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_31, grammarAccess.getAtomAccess().getRightParenthesisKeyword_11_5());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:7480:3: this_Reduce_32= ruleReduce
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getReduceParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Reduce_32=ruleReduce();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Reduce_32;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:7492:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7492:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
                    // InternalOpenCypherParser.g:7493:4: () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7493:4: ()
                    // InternalOpenCypherParser.g:7494:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getFilterAction_13_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_34=(Token)match(input,FILTER,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_34, grammarAccess.getAtomAccess().getFILTERKeyword_13_1());
                      			
                    }
                    otherlv_35=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_35, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_13_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7511:4: ( (lv_filterExpression_36_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7512:5: (lv_filterExpression_36_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7512:5: (lv_filterExpression_36_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7513:6: lv_filterExpression_36_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_36_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_36_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_37, grammarAccess.getAtomAccess().getRightParenthesisKeyword_13_4());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:7536:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7536:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
                    // InternalOpenCypherParser.g:7537:4: () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7537:4: ()
                    // InternalOpenCypherParser.g:7538:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getAllAction_14_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_39=(Token)match(input,ALL,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_39, grammarAccess.getAtomAccess().getALLKeyword_14_1());
                      			
                    }
                    otherlv_40=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_40, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_14_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7555:4: ( (lv_filterExpression_41_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7556:5: (lv_filterExpression_41_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7556:5: (lv_filterExpression_41_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7557:6: lv_filterExpression_41_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_14_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_41_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_41_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_42=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_42, grammarAccess.getAtomAccess().getRightParenthesisKeyword_14_4());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:7580:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7580:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
                    // InternalOpenCypherParser.g:7581:4: () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7581:4: ()
                    // InternalOpenCypherParser.g:7582:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getAnyAction_15_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_44=(Token)match(input,ANY,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_44, grammarAccess.getAtomAccess().getANYKeyword_15_1());
                      			
                    }
                    otherlv_45=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_45, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_15_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7599:4: ( (lv_filterExpression_46_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7600:5: (lv_filterExpression_46_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7600:5: (lv_filterExpression_46_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7601:6: lv_filterExpression_46_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_15_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_46_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_46_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_47=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_47, grammarAccess.getAtomAccess().getRightParenthesisKeyword_15_4());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:7624:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7624:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
                    // InternalOpenCypherParser.g:7625:4: () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7625:4: ()
                    // InternalOpenCypherParser.g:7626:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNoneAction_16_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_49=(Token)match(input,NONE,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_49, grammarAccess.getAtomAccess().getNONEKeyword_16_1());
                      			
                    }
                    otherlv_50=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_50, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_16_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7643:4: ( (lv_filterExpression_51_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7644:5: (lv_filterExpression_51_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7644:5: (lv_filterExpression_51_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7645:6: lv_filterExpression_51_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_16_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_51_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_51_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_52=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_52, grammarAccess.getAtomAccess().getRightParenthesisKeyword_16_4());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:7668:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7668:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
                    // InternalOpenCypherParser.g:7669:4: () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7669:4: ()
                    // InternalOpenCypherParser.g:7670:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getSingleAction_17_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_54=(Token)match(input,SINGLE,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_54, grammarAccess.getAtomAccess().getSINGLEKeyword_17_1());
                      			
                    }
                    otherlv_55=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_55, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_17_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7687:4: ( (lv_filterExpression_56_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7688:5: (lv_filterExpression_56_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7688:5: (lv_filterExpression_56_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7689:6: lv_filterExpression_56_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_17_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_56_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_56_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_57=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_57, grammarAccess.getAtomAccess().getRightParenthesisKeyword_17_4());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:7712:3: this_ShortestPathPattern_58= ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_18());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ShortestPathPattern_58=ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortestPathPattern_58;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:7724:3: this_RelationshipsPattern_59= ruleRelationshipsPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_19());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RelationshipsPattern_59=ruleRelationshipsPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RelationshipsPattern_59;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:7736:3: this_ParenthesizedExpression_60= ruleParenthesizedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_20());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenthesizedExpression_60=ruleParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenthesizedExpression_60;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:7748:3: this_FunctionInvocation_61= ruleFunctionInvocation
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_21());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionInvocation_61=ruleFunctionInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionInvocation_61;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:7760:3: ( () ( ( ruleSYMBOLIC_NAME_X ) ) )
                    {
                    // InternalOpenCypherParser.g:7760:3: ( () ( ( ruleSYMBOLIC_NAME_X ) ) )
                    // InternalOpenCypherParser.g:7761:4: () ( ( ruleSYMBOLIC_NAME_X ) )
                    {
                    // InternalOpenCypherParser.g:7761:4: ()
                    // InternalOpenCypherParser.g:7762:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getVariableRefAction_22_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7771:4: ( ( ruleSYMBOLIC_NAME_X ) )
                    // InternalOpenCypherParser.g:7772:5: ( ruleSYMBOLIC_NAME_X )
                    {
                    // InternalOpenCypherParser.g:7772:5: ( ruleSYMBOLIC_NAME_X )
                    // InternalOpenCypherParser.g:7773:6: ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getVariableRefVariableCrossReference_22_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAtom"


    // $ANTLR start "entryRuleReduce"
    // InternalOpenCypherParser.g:7795:1: entryRuleReduce returns [EObject current=null] : iv_ruleReduce= ruleReduce EOF ;
    public final EObject entryRuleReduce() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReduce = null;


        try {
            // InternalOpenCypherParser.g:7795:47: (iv_ruleReduce= ruleReduce EOF )
            // InternalOpenCypherParser.g:7796:2: iv_ruleReduce= ruleReduce EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReduceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReduce=ruleReduce();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReduce; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReduce"


    // $ANTLR start "ruleReduce"
    // InternalOpenCypherParser.g:7802:1: ruleReduce returns [EObject current=null] : (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariable ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis ) ;
    public final EObject ruleReduce() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_accumulator_2_0 = null;

        EObject lv_accumulatorExpression_4_0 = null;

        EObject lv_idInColl_6_0 = null;

        EObject lv_expression_8_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7808:2: ( (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariable ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis ) )
            // InternalOpenCypherParser.g:7809:2: (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariable ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis )
            {
            // InternalOpenCypherParser.g:7809:2: (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariable ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis )
            // InternalOpenCypherParser.g:7810:3: otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariable ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis
            {
            otherlv_0=(Token)match(input,REDUCE,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getReduceAccess().getREDUCEKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:7818:3: ( (lv_accumulator_2_0= ruleVariable ) )
            // InternalOpenCypherParser.g:7819:4: (lv_accumulator_2_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:7819:4: (lv_accumulator_2_0= ruleVariable )
            // InternalOpenCypherParser.g:7820:5: lv_accumulator_2_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getAccumulatorVariableParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_accumulator_2_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"accumulator",
              						lv_accumulator_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,EqualsSign,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getReduceAccess().getEqualsSignKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:7841:3: ( (lv_accumulatorExpression_4_0= ruleExpression ) )
            // InternalOpenCypherParser.g:7842:4: (lv_accumulatorExpression_4_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:7842:4: (lv_accumulatorExpression_4_0= ruleExpression )
            // InternalOpenCypherParser.g:7843:5: lv_accumulatorExpression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_accumulatorExpression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"accumulatorExpression",
              						lv_accumulatorExpression_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getReduceAccess().getCommaKeyword_5());
              		
            }
            // InternalOpenCypherParser.g:7864:3: ( (lv_idInColl_6_0= ruleIdInColl ) )
            // InternalOpenCypherParser.g:7865:4: (lv_idInColl_6_0= ruleIdInColl )
            {
            // InternalOpenCypherParser.g:7865:4: (lv_idInColl_6_0= ruleIdInColl )
            // InternalOpenCypherParser.g:7866:5: lv_idInColl_6_0= ruleIdInColl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_52);
            lv_idInColl_6_0=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"idInColl",
              						lv_idInColl_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.IdInColl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,VerticalLine,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getReduceAccess().getVerticalLineKeyword_7());
              		
            }
            // InternalOpenCypherParser.g:7887:3: ( (lv_expression_8_0= ruleExpression ) )
            // InternalOpenCypherParser.g:7888:4: (lv_expression_8_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:7888:4: (lv_expression_8_0= ruleExpression )
            // InternalOpenCypherParser.g:7889:5: lv_expression_8_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_expression_8_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_8_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getReduceAccess().getRightParenthesisKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReduce"


    // $ANTLR start "entryRuleParenthesizedExpression"
    // InternalOpenCypherParser.g:7914:1: entryRuleParenthesizedExpression returns [EObject current=null] : iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF ;
    public final EObject entryRuleParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParenthesizedExpression = null;


        try {
            // InternalOpenCypherParser.g:7914:64: (iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF )
            // InternalOpenCypherParser.g:7915:2: iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenthesizedExpression=ruleParenthesizedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenthesizedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParenthesizedExpression"


    // $ANTLR start "ruleParenthesizedExpression"
    // InternalOpenCypherParser.g:7921:1: ruleParenthesizedExpression returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7927:2: ( (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis ) )
            // InternalOpenCypherParser.g:7928:2: (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis )
            {
            // InternalOpenCypherParser.g:7928:2: (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis )
            // InternalOpenCypherParser.g:7929:3: otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:7933:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:7934:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:7934:4: (lv_expression_1_0= ruleExpression )
            // InternalOpenCypherParser.g:7935:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParenthesizedExpression"


    // $ANTLR start "entryRuleRelationshipsPattern"
    // InternalOpenCypherParser.g:7960:1: entryRuleRelationshipsPattern returns [EObject current=null] : iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF ;
    public final EObject entryRuleRelationshipsPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipsPattern = null;


        try {
            // InternalOpenCypherParser.g:7960:61: (iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF )
            // InternalOpenCypherParser.g:7961:2: iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipsPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipsPattern=ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipsPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipsPattern"


    // $ANTLR start "ruleRelationshipsPattern"
    // InternalOpenCypherParser.g:7967:1: ruleRelationshipsPattern returns [EObject current=null] : ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ ) ;
    public final EObject ruleRelationshipsPattern() throws RecognitionException {
        EObject current = null;

        EObject lv_nodePattern_0_0 = null;

        EObject lv_chain_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7973:2: ( ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ ) )
            // InternalOpenCypherParser.g:7974:2: ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ )
            {
            // InternalOpenCypherParser.g:7974:2: ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ )
            // InternalOpenCypherParser.g:7975:3: ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+
            {
            // InternalOpenCypherParser.g:7975:3: ( (lv_nodePattern_0_0= ruleNodePattern ) )
            // InternalOpenCypherParser.g:7976:4: (lv_nodePattern_0_0= ruleNodePattern )
            {
            // InternalOpenCypherParser.g:7976:4: (lv_nodePattern_0_0= ruleNodePattern )
            // InternalOpenCypherParser.g:7977:5: lv_nodePattern_0_0= ruleNodePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_nodePattern_0_0=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipsPatternRule());
              					}
              					set(
              						current,
              						"nodePattern",
              						lv_nodePattern_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodePattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:7994:3: ( (lv_chain_1_0= rulePatternElementChain ) )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                alt101 = dfa101.predict(input);
                switch (alt101) {
            	case 1 :
            	    // InternalOpenCypherParser.g:7995:4: (lv_chain_1_0= rulePatternElementChain )
            	    {
            	    // InternalOpenCypherParser.g:7995:4: (lv_chain_1_0= rulePatternElementChain )
            	    // InternalOpenCypherParser.g:7996:5: lv_chain_1_0= rulePatternElementChain
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_72);
            	    lv_chain_1_0=rulePatternElementChain();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getRelationshipsPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"chain",
            	      						lv_chain_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.PatternElementChain");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipsPattern"


    // $ANTLR start "entryRuleFilterExpression"
    // InternalOpenCypherParser.g:8017:1: entryRuleFilterExpression returns [EObject current=null] : iv_ruleFilterExpression= ruleFilterExpression EOF ;
    public final EObject entryRuleFilterExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFilterExpression = null;


        try {
            // InternalOpenCypherParser.g:8017:57: (iv_ruleFilterExpression= ruleFilterExpression EOF )
            // InternalOpenCypherParser.g:8018:2: iv_ruleFilterExpression= ruleFilterExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFilterExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFilterExpression=ruleFilterExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFilterExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFilterExpression"


    // $ANTLR start "ruleFilterExpression"
    // InternalOpenCypherParser.g:8024:1: ruleFilterExpression returns [EObject current=null] : ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? ) ;
    public final EObject ruleFilterExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_idInColl_0_0 = null;

        EObject lv_where_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8030:2: ( ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:8031:2: ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:8031:2: ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:8032:3: ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )?
            {
            // InternalOpenCypherParser.g:8032:3: ( (lv_idInColl_0_0= ruleIdInColl ) )
            // InternalOpenCypherParser.g:8033:4: (lv_idInColl_0_0= ruleIdInColl )
            {
            // InternalOpenCypherParser.g:8033:4: (lv_idInColl_0_0= ruleIdInColl )
            // InternalOpenCypherParser.g:8034:5: lv_idInColl_0_0= ruleIdInColl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_55);
            lv_idInColl_0_0=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFilterExpressionRule());
              					}
              					set(
              						current,
              						"idInColl",
              						lv_idInColl_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.IdInColl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8051:3: ( (lv_where_1_0= ruleWhere ) )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==WHERE) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // InternalOpenCypherParser.g:8052:4: (lv_where_1_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:8052:4: (lv_where_1_0= ruleWhere )
                    // InternalOpenCypherParser.g:8053:5: lv_where_1_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_1_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFilterExpressionRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_1_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFilterExpression"


    // $ANTLR start "entryRuleIdInColl"
    // InternalOpenCypherParser.g:8074:1: entryRuleIdInColl returns [EObject current=null] : iv_ruleIdInColl= ruleIdInColl EOF ;
    public final EObject entryRuleIdInColl() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdInColl = null;


        try {
            // InternalOpenCypherParser.g:8074:49: (iv_ruleIdInColl= ruleIdInColl EOF )
            // InternalOpenCypherParser.g:8075:2: iv_ruleIdInColl= ruleIdInColl EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdInCollRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdInColl=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdInColl; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdInColl"


    // $ANTLR start "ruleIdInColl"
    // InternalOpenCypherParser.g:8081:1: ruleIdInColl returns [EObject current=null] : ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) ) ;
    public final EObject ruleIdInColl() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_variable_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8087:2: ( ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:8088:2: ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:8088:2: ( ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:8089:3: ( (lv_variable_0_0= ruleVariable ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) )
            {
            // InternalOpenCypherParser.g:8089:3: ( (lv_variable_0_0= ruleVariable ) )
            // InternalOpenCypherParser.g:8090:4: (lv_variable_0_0= ruleVariable )
            {
            // InternalOpenCypherParser.g:8090:4: (lv_variable_0_0= ruleVariable )
            // InternalOpenCypherParser.g:8091:5: lv_variable_0_0= ruleVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdInCollAccess().getVariableVariableParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_variable_0_0=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdInCollRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Variable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,IN,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIdInCollAccess().getINKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8112:3: ( (lv_expression_2_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8113:4: (lv_expression_2_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8113:4: (lv_expression_2_0= ruleExpression )
            // InternalOpenCypherParser.g:8114:5: lv_expression_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdInCollRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdInColl"


    // $ANTLR start "entryRuleFunctionInvocation"
    // InternalOpenCypherParser.g:8135:1: entryRuleFunctionInvocation returns [EObject current=null] : iv_ruleFunctionInvocation= ruleFunctionInvocation EOF ;
    public final EObject entryRuleFunctionInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionInvocation = null;


        try {
            // InternalOpenCypherParser.g:8135:59: (iv_ruleFunctionInvocation= ruleFunctionInvocation EOF )
            // InternalOpenCypherParser.g:8136:2: iv_ruleFunctionInvocation= ruleFunctionInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionInvocation=ruleFunctionInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionInvocation"


    // $ANTLR start "ruleFunctionInvocation"
    // InternalOpenCypherParser.g:8142:1: ruleFunctionInvocation returns [EObject current=null] : ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) ;
    public final EObject ruleFunctionInvocation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_distinct_2_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_functionName_0_0 = null;

        EObject lv_parameter_3_0 = null;

        EObject lv_parameter_5_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8148:2: ( ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) )
            // InternalOpenCypherParser.g:8149:2: ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            {
            // InternalOpenCypherParser.g:8149:2: ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            // InternalOpenCypherParser.g:8150:3: ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis
            {
            // InternalOpenCypherParser.g:8150:3: ( (lv_functionName_0_0= ruleFunctionName ) )
            // InternalOpenCypherParser.g:8151:4: (lv_functionName_0_0= ruleFunctionName )
            {
            // InternalOpenCypherParser.g:8151:4: (lv_functionName_0_0= ruleFunctionName )
            // InternalOpenCypherParser.g:8152:5: lv_functionName_0_0= ruleFunctionName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_functionName_0_0=ruleFunctionName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
              					}
              					set(
              						current,
              						"functionName",
              						lv_functionName_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.FunctionName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8173:3: ( (lv_distinct_2_0= DISTINCT ) )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==DISTINCT) ) {
                int LA103_1 = input.LA(2);

                if ( (synpred166_InternalOpenCypherParser()) ) {
                    alt103=1;
                }
            }
            switch (alt103) {
                case 1 :
                    // InternalOpenCypherParser.g:8174:4: (lv_distinct_2_0= DISTINCT )
                    {
                    // InternalOpenCypherParser.g:8174:4: (lv_distinct_2_0= DISTINCT )
                    // InternalOpenCypherParser.g:8175:5: lv_distinct_2_0= DISTINCT
                    {
                    lv_distinct_2_0=(Token)match(input,DISTINCT,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distinct_2_0, grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionInvocationRule());
                      					}
                      					setWithLastConsumed(current, "distinct", true, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:8187:3: ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( ((LA105_0>=ALLSHORTESTPATHS && LA105_0<=XOR)||(LA105_0>=AS && LA105_0<=OR)||LA105_0==DollarSign||LA105_0==LeftParenthesis||LA105_0==PlusSign||LA105_0==HyphenMinus||LA105_0==LeftSquareBracket||LA105_0==LeftCurlyBracket||LA105_0==RULE_SYMBOLIC_NAME||(LA105_0>=RULE_STRING_LITERAL && LA105_0<=RULE_DECIMAL)) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalOpenCypherParser.g:8188:4: ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )*
                    {
                    // InternalOpenCypherParser.g:8188:4: ( (lv_parameter_3_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8189:5: (lv_parameter_3_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8189:5: (lv_parameter_3_0= ruleExpression )
                    // InternalOpenCypherParser.g:8190:6: lv_parameter_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_106);
                    lv_parameter_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
                      						}
                      						add(
                      							current,
                      							"parameter",
                      							lv_parameter_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:8207:4: (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )*
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==Comma) ) {
                            alt104=1;
                        }


                        switch (alt104) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:8208:5: otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:8212:5: ( (lv_parameter_5_0= ruleExpression ) )
                    	    // InternalOpenCypherParser.g:8213:6: (lv_parameter_5_0= ruleExpression )
                    	    {
                    	    // InternalOpenCypherParser.g:8213:6: (lv_parameter_5_0= ruleExpression )
                    	    // InternalOpenCypherParser.g:8214:7: lv_parameter_5_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    lv_parameter_5_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"parameter",
                    	      								lv_parameter_5_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop104;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionInvocation"


    // $ANTLR start "entryRuleFunctionName"
    // InternalOpenCypherParser.g:8241:1: entryRuleFunctionName returns [EObject current=null] : iv_ruleFunctionName= ruleFunctionName EOF ;
    public final EObject entryRuleFunctionName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionName = null;


        try {
            // InternalOpenCypherParser.g:8241:53: (iv_ruleFunctionName= ruleFunctionName EOF )
            // InternalOpenCypherParser.g:8242:2: iv_ruleFunctionName= ruleFunctionName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionName=ruleFunctionName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionName"


    // $ANTLR start "ruleFunctionName"
    // InternalOpenCypherParser.g:8248:1: ruleFunctionName returns [EObject current=null] : ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) ) ;
    public final EObject ruleFunctionName() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8254:2: ( ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:8255:2: ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:8255:2: ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:8256:3: (lv_name_0_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:8256:3: (lv_name_0_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:8257:4: lv_name_0_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getFunctionNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionNameRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionName"


    // $ANTLR start "entryRuleListComprehension"
    // InternalOpenCypherParser.g:8277:1: entryRuleListComprehension returns [EObject current=null] : iv_ruleListComprehension= ruleListComprehension EOF ;
    public final EObject entryRuleListComprehension() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleListComprehension = null;


        try {
            // InternalOpenCypherParser.g:8277:58: (iv_ruleListComprehension= ruleListComprehension EOF )
            // InternalOpenCypherParser.g:8278:2: iv_ruleListComprehension= ruleListComprehension EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleListComprehension=ruleListComprehension();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListComprehension; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListComprehension"


    // $ANTLR start "ruleListComprehension"
    // InternalOpenCypherParser.g:8284:1: ruleListComprehension returns [EObject current=null] : (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket ) ;
    public final EObject ruleListComprehension() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_filterExpression_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8290:2: ( (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket ) )
            // InternalOpenCypherParser.g:8291:2: (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket )
            {
            // InternalOpenCypherParser.g:8291:2: (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket )
            // InternalOpenCypherParser.g:8292:3: otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8296:3: ( (lv_filterExpression_1_0= ruleFilterExpression ) )
            // InternalOpenCypherParser.g:8297:4: (lv_filterExpression_1_0= ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:8297:4: (lv_filterExpression_1_0= ruleFilterExpression )
            // InternalOpenCypherParser.g:8298:5: lv_filterExpression_1_0= ruleFilterExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_filterExpression_1_0=ruleFilterExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getListComprehensionRule());
              					}
              					set(
              						current,
              						"filterExpression",
              						lv_filterExpression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8315:3: (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==VerticalLine) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // InternalOpenCypherParser.g:8316:4: otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) )
                    {
                    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0());
                      			
                    }
                    // InternalOpenCypherParser.g:8320:4: ( (lv_expression_3_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8321:5: (lv_expression_3_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8321:5: (lv_expression_3_0= ruleExpression )
                    // InternalOpenCypherParser.g:8322:6: lv_expression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_32);
                    lv_expression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getListComprehensionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListComprehension"


    // $ANTLR start "entryRulePropertyLookup"
    // InternalOpenCypherParser.g:8348:1: entryRulePropertyLookup returns [EObject current=null] : iv_rulePropertyLookup= rulePropertyLookup EOF ;
    public final EObject entryRulePropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyLookup = null;


        try {
            // InternalOpenCypherParser.g:8348:55: (iv_rulePropertyLookup= rulePropertyLookup EOF )
            // InternalOpenCypherParser.g:8349:2: iv_rulePropertyLookup= rulePropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyLookup=rulePropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyLookup"


    // $ANTLR start "rulePropertyLookup"
    // InternalOpenCypherParser.g:8355:1: rulePropertyLookup returns [EObject current=null] : (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) ) ;
    public final EObject rulePropertyLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_propertyOperator_2_1=null;
        Token lv_propertyOperator_2_2=null;
        AntlrDatatypeRuleToken lv_propertyKeyName_1_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8361:2: ( (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) ) )
            // InternalOpenCypherParser.g:8362:2: (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) )
            {
            // InternalOpenCypherParser.g:8362:2: (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) )
            // InternalOpenCypherParser.g:8363:3: otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )
            {
            otherlv_0=(Token)match(input,FullStop,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8367:3: ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==RULE_SYMBOLIC_NAME) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==EOF||(LA108_1>=DESCENDING && LA108_1<=CONTAINS)||LA108_1==OPTIONAL||LA108_1==FOREACH||LA108_1==CREATE||(LA108_1>=DELETE && LA108_1<=DETACH)||(LA108_1>=REMOVE && LA108_1<=RETURN)||LA108_1==STARTS||LA108_1==UNWIND||(LA108_1>=LIMIT && LA108_1<=UNION)||LA108_1==WHERE||LA108_1==DESC||(LA108_1>=ELSE && LA108_1<=ENDS)||LA108_1==LOAD||(LA108_1>=SKIP && LA108_1<=THEN)||(LA108_1>=WHEN && LA108_1<=WITH)||LA108_1==AND||LA108_1==ASC||LA108_1==END||(LA108_1>=SET && LA108_1<=ExclamationMarkEqualsSign)||(LA108_1>=FullStopFullStop && LA108_1<=AS)||(LA108_1>=IN && LA108_1<=OR)||LA108_1==PercentSign||(LA108_1>=RightParenthesis && LA108_1<=GreaterThanSign)||(LA108_1>=LeftSquareBracket && LA108_1<=CircumflexAccent)||(LA108_1>=VerticalLine && LA108_1<=RightCurlyBracket)) ) {
                    alt108=2;
                }
                else if ( (LA108_1==ExclamationMark||LA108_1==QuestionMark) ) {
                    alt108=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // InternalOpenCypherParser.g:8368:4: ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) )
                    {
                    // InternalOpenCypherParser.g:8368:4: ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) )
                    // InternalOpenCypherParser.g:8369:5: ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) )
                    {
                    // InternalOpenCypherParser.g:8369:5: ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) )
                    // InternalOpenCypherParser.g:8370:6: (lv_propertyKeyName_1_0= rulePropertyKeyName )
                    {
                    // InternalOpenCypherParser.g:8370:6: (lv_propertyKeyName_1_0= rulePropertyKeyName )
                    // InternalOpenCypherParser.g:8371:7: lv_propertyKeyName_1_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_108);
                    lv_propertyKeyName_1_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyLookupRule());
                      							}
                      							set(
                      								current,
                      								"propertyKeyName",
                      								lv_propertyKeyName_1_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:8388:5: ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) )
                    // InternalOpenCypherParser.g:8389:6: ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) )
                    {
                    // InternalOpenCypherParser.g:8389:6: ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) )
                    // InternalOpenCypherParser.g:8390:7: (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark )
                    {
                    // InternalOpenCypherParser.g:8390:7: (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark )
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==QuestionMark) ) {
                        alt107=1;
                    }
                    else if ( (LA107_0==ExclamationMark) ) {
                        alt107=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 0, input);

                        throw nvae;
                    }
                    switch (alt107) {
                        case 1 :
                            // InternalOpenCypherParser.g:8391:8: lv_propertyOperator_2_1= QuestionMark
                            {
                            lv_propertyOperator_2_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								newLeafNode(lv_propertyOperator_2_1, grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0());
                              							
                            }
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getPropertyLookupRule());
                              								}
                              								setWithLastConsumed(current, "propertyOperator", lv_propertyOperator_2_1, null);
                              							
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:8402:8: lv_propertyOperator_2_2= ExclamationMark
                            {
                            lv_propertyOperator_2_2=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								newLeafNode(lv_propertyOperator_2_2, grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1());
                              							
                            }
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getPropertyLookupRule());
                              								}
                              								setWithLastConsumed(current, "propertyOperator", lv_propertyOperator_2_2, null);
                              							
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:8417:4: ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) )
                    {
                    // InternalOpenCypherParser.g:8417:4: ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) )
                    // InternalOpenCypherParser.g:8418:5: (lv_propertyKeyName_3_0= rulePropertyKeyName )
                    {
                    // InternalOpenCypherParser.g:8418:5: (lv_propertyKeyName_3_0= rulePropertyKeyName )
                    // InternalOpenCypherParser.g:8419:6: lv_propertyKeyName_3_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_propertyKeyName_3_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyLookupRule());
                      						}
                      						set(
                      							current,
                      							"propertyKeyName",
                      							lv_propertyKeyName_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyLookup"


    // $ANTLR start "entryRuleCaseExpression"
    // InternalOpenCypherParser.g:8441:1: entryRuleCaseExpression returns [EObject current=null] : iv_ruleCaseExpression= ruleCaseExpression EOF ;
    public final EObject entryRuleCaseExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseExpression = null;


        try {
            // InternalOpenCypherParser.g:8441:55: (iv_ruleCaseExpression= ruleCaseExpression EOF )
            // InternalOpenCypherParser.g:8442:2: iv_ruleCaseExpression= ruleCaseExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseExpression=ruleCaseExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseExpression"


    // $ANTLR start "ruleCaseExpression"
    // InternalOpenCypherParser.g:8448:1: ruleCaseExpression returns [EObject current=null] : ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END ) ;
    public final EObject ruleCaseExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_caseAlternatives_1_0 = null;

        EObject lv_caseExpression_3_0 = null;

        EObject lv_caseAlternatives_4_0 = null;

        EObject lv_elseExpression_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8454:2: ( ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END ) )
            // InternalOpenCypherParser.g:8455:2: ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END )
            {
            // InternalOpenCypherParser.g:8455:2: ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END )
            // InternalOpenCypherParser.g:8456:3: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END
            {
            // InternalOpenCypherParser.g:8456:3: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==CASE) ) {
                int LA111_1 = input.LA(2);

                if ( (synpred173_InternalOpenCypherParser()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // InternalOpenCypherParser.g:8457:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
                    {
                    // InternalOpenCypherParser.g:8457:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
                    // InternalOpenCypherParser.g:8458:5: otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
                    {
                    otherlv_0=(Token)match(input,CASE,FOLLOW_109); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0());
                      				
                    }
                    // InternalOpenCypherParser.g:8462:5: ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
                    int cnt109=0;
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==WHEN) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:8463:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
                    	    {
                    	    // InternalOpenCypherParser.g:8463:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
                    	    // InternalOpenCypherParser.g:8464:7: lv_caseAlternatives_1_0= ruleCaseAlternatives
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_110);
                    	    lv_caseAlternatives_1_0=ruleCaseAlternatives();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"caseAlternatives",
                    	      								lv_caseAlternatives_1_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.CaseAlternatives");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt109 >= 1 ) break loop109;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(109, input);
                                throw eee;
                        }
                        cnt109++;
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:8483:4: (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ )
                    {
                    // InternalOpenCypherParser.g:8483:4: (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ )
                    // InternalOpenCypherParser.g:8484:5: otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+
                    {
                    otherlv_2=(Token)match(input,CASE,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:8488:5: ( (lv_caseExpression_3_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8489:6: (lv_caseExpression_3_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8489:6: (lv_caseExpression_3_0= ruleExpression )
                    // InternalOpenCypherParser.g:8490:7: lv_caseExpression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_109);
                    lv_caseExpression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                      							}
                      							set(
                      								current,
                      								"caseExpression",
                      								lv_caseExpression_3_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:8507:5: ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+
                    int cnt110=0;
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==WHEN) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:8508:6: (lv_caseAlternatives_4_0= ruleCaseAlternatives )
                    	    {
                    	    // InternalOpenCypherParser.g:8508:6: (lv_caseAlternatives_4_0= ruleCaseAlternatives )
                    	    // InternalOpenCypherParser.g:8509:7: lv_caseAlternatives_4_0= ruleCaseAlternatives
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_110);
                    	    lv_caseAlternatives_4_0=ruleCaseAlternatives();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"caseAlternatives",
                    	      								lv_caseAlternatives_4_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.CaseAlternatives");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt110 >= 1 ) break loop110;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(110, input);
                                throw eee;
                        }
                        cnt110++;
                    } while (true);


                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:8528:3: (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==ELSE) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalOpenCypherParser.g:8529:4: otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) )
                    {
                    otherlv_5=(Token)match(input,ELSE,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0());
                      			
                    }
                    // InternalOpenCypherParser.g:8533:4: ( (lv_elseExpression_6_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8534:5: (lv_elseExpression_6_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8534:5: (lv_elseExpression_6_0= ruleExpression )
                    // InternalOpenCypherParser.g:8535:6: lv_elseExpression_6_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_111);
                    lv_elseExpression_6_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                      						}
                      						set(
                      							current,
                      							"elseExpression",
                      							lv_elseExpression_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getCaseExpressionAccess().getENDKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseExpression"


    // $ANTLR start "entryRuleCaseAlternatives"
    // InternalOpenCypherParser.g:8561:1: entryRuleCaseAlternatives returns [EObject current=null] : iv_ruleCaseAlternatives= ruleCaseAlternatives EOF ;
    public final EObject entryRuleCaseAlternatives() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseAlternatives = null;


        try {
            // InternalOpenCypherParser.g:8561:57: (iv_ruleCaseAlternatives= ruleCaseAlternatives EOF )
            // InternalOpenCypherParser.g:8562:2: iv_ruleCaseAlternatives= ruleCaseAlternatives EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseAlternativesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseAlternatives=ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseAlternatives; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseAlternatives"


    // $ANTLR start "ruleCaseAlternatives"
    // InternalOpenCypherParser.g:8568:1: ruleCaseAlternatives returns [EObject current=null] : (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) ) ;
    public final EObject ruleCaseAlternatives() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_when_1_0 = null;

        EObject lv_then_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8574:2: ( (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:8575:2: (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:8575:2: (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:8576:3: otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,WHEN,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8580:3: ( (lv_when_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8581:4: (lv_when_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8581:4: (lv_when_1_0= ruleExpression )
            // InternalOpenCypherParser.g:8582:5: lv_when_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_112);
            lv_when_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativesRule());
              					}
              					set(
              						current,
              						"when",
              						lv_when_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,THEN,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:8603:3: ( (lv_then_3_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8604:4: (lv_then_3_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8604:4: (lv_then_3_0= ruleExpression )
            // InternalOpenCypherParser.g:8605:5: lv_then_3_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_then_3_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativesRule());
              					}
              					set(
              						current,
              						"then",
              						lv_then_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseAlternatives"


    // $ANTLR start "entryRuleVariable"
    // InternalOpenCypherParser.g:8626:1: entryRuleVariable returns [EObject current=null] : iv_ruleVariable= ruleVariable EOF ;
    public final EObject entryRuleVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariable = null;


        try {
            // InternalOpenCypherParser.g:8626:49: (iv_ruleVariable= ruleVariable EOF )
            // InternalOpenCypherParser.g:8627:2: iv_ruleVariable= ruleVariable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariable=ruleVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariable"


    // $ANTLR start "ruleVariable"
    // InternalOpenCypherParser.g:8633:1: ruleVariable returns [EObject current=null] : ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) ) ;
    public final EObject ruleVariable() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8639:2: ( ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:8640:2: ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:8640:2: ( (lv_name_0_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:8641:3: (lv_name_0_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:8641:3: (lv_name_0_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:8642:4: lv_name_0_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getVariableAccess().getNameSYMBOLIC_NAME_XParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getVariableRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariable"


    // $ANTLR start "entryRuleMapLiteral"
    // InternalOpenCypherParser.g:8662:1: entryRuleMapLiteral returns [EObject current=null] : iv_ruleMapLiteral= ruleMapLiteral EOF ;
    public final EObject entryRuleMapLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMapLiteral = null;


        try {
            // InternalOpenCypherParser.g:8662:51: (iv_ruleMapLiteral= ruleMapLiteral EOF )
            // InternalOpenCypherParser.g:8663:2: iv_ruleMapLiteral= ruleMapLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMapLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMapLiteral=ruleMapLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMapLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMapLiteral"


    // $ANTLR start "ruleMapLiteral"
    // InternalOpenCypherParser.g:8669:1: ruleMapLiteral returns [EObject current=null] : ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket ) ;
    public final EObject ruleMapLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_entries_2_0 = null;

        EObject lv_entries_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8675:2: ( ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket ) )
            // InternalOpenCypherParser.g:8676:2: ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:8676:2: ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket )
            // InternalOpenCypherParser.g:8677:3: () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket
            {
            // InternalOpenCypherParser.g:8677:3: ()
            // InternalOpenCypherParser.g:8678:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getMapLiteralAccess().getMapLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_113); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8691:3: ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==RULE_SYMBOLIC_NAME) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // InternalOpenCypherParser.g:8692:4: ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )*
                    {
                    // InternalOpenCypherParser.g:8692:4: ( (lv_entries_2_0= ruleMapLiteralEntry ) )
                    // InternalOpenCypherParser.g:8693:5: (lv_entries_2_0= ruleMapLiteralEntry )
                    {
                    // InternalOpenCypherParser.g:8693:5: (lv_entries_2_0= ruleMapLiteralEntry )
                    // InternalOpenCypherParser.g:8694:6: lv_entries_2_0= ruleMapLiteralEntry
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_114);
                    lv_entries_2_0=ruleMapLiteralEntry();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMapLiteralRule());
                      						}
                      						add(
                      							current,
                      							"entries",
                      							lv_entries_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.MapLiteralEntry");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:8711:4: (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==Comma) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:8712:5: otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:8716:5: ( (lv_entries_4_0= ruleMapLiteralEntry ) )
                    	    // InternalOpenCypherParser.g:8717:6: (lv_entries_4_0= ruleMapLiteralEntry )
                    	    {
                    	    // InternalOpenCypherParser.g:8717:6: (lv_entries_4_0= ruleMapLiteralEntry )
                    	    // InternalOpenCypherParser.g:8718:7: lv_entries_4_0= ruleMapLiteralEntry
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_114);
                    	    lv_entries_4_0=ruleMapLiteralEntry();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getMapLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_4_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.MapLiteralEntry");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMapLiteral"


    // $ANTLR start "entryRuleMapLiteralEntry"
    // InternalOpenCypherParser.g:8745:1: entryRuleMapLiteralEntry returns [EObject current=null] : iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF ;
    public final EObject entryRuleMapLiteralEntry() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMapLiteralEntry = null;


        try {
            // InternalOpenCypherParser.g:8745:56: (iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF )
            // InternalOpenCypherParser.g:8746:2: iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMapLiteralEntryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMapLiteralEntry=ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMapLiteralEntry; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMapLiteralEntry"


    // $ANTLR start "ruleMapLiteralEntry"
    // InternalOpenCypherParser.g:8752:1: ruleMapLiteralEntry returns [EObject current=null] : ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) ) ;
    public final EObject ruleMapLiteralEntry() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_key_0_0 = null;

        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8758:2: ( ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:8759:2: ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:8759:2: ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:8760:3: ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) )
            {
            // InternalOpenCypherParser.g:8760:3: ( (lv_key_0_0= rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:8761:4: (lv_key_0_0= rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:8761:4: (lv_key_0_0= rulePropertyKeyName )
            // InternalOpenCypherParser.g:8762:5: lv_key_0_0= rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_key_0_0=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMapLiteralEntryRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8783:3: ( (lv_value_2_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8784:4: (lv_value_2_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8784:4: (lv_value_2_0= ruleExpression )
            // InternalOpenCypherParser.g:8785:5: lv_value_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMapLiteralEntryRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMapLiteralEntry"


    // $ANTLR start "entryRuleLegacyParameter"
    // InternalOpenCypherParser.g:8806:1: entryRuleLegacyParameter returns [EObject current=null] : iv_ruleLegacyParameter= ruleLegacyParameter EOF ;
    public final EObject entryRuleLegacyParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLegacyParameter = null;


        try {
            // InternalOpenCypherParser.g:8806:56: (iv_ruleLegacyParameter= ruleLegacyParameter EOF )
            // InternalOpenCypherParser.g:8807:2: iv_ruleLegacyParameter= ruleLegacyParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyParameter=ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLegacyParameter"


    // $ANTLR start "ruleLegacyParameter"
    // InternalOpenCypherParser.g:8813:1: ruleLegacyParameter returns [EObject current=null] : (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket ) ;
    public final EObject ruleLegacyParameter() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_parameter_1_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_parameter_1_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8819:2: ( (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket ) )
            // InternalOpenCypherParser.g:8820:2: (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:8820:2: (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket )
            // InternalOpenCypherParser.g:8821:3: otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_115); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8825:3: ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) )
            // InternalOpenCypherParser.g:8826:4: ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:8826:4: ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) )
            // InternalOpenCypherParser.g:8827:5: (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber )
            {
            // InternalOpenCypherParser.g:8827:5: (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==RULE_SYMBOLIC_NAME) ) {
                alt115=1;
            }
            else if ( ((LA115_0>=RULE_HEX && LA115_0<=RULE_DECIMAL)) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // InternalOpenCypherParser.g:8828:6: lv_parameter_1_1= RULE_SYMBOLIC_NAME
                    {
                    lv_parameter_1_1=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_parameter_1_1, grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAMETerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLegacyParameterRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"parameter",
                      							lv_parameter_1_1,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:8843:6: lv_parameter_1_2= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_116);
                    lv_parameter_1_2=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLegacyParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_2,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLegacyParameter"


    // $ANTLR start "entryRuleParameter"
    // InternalOpenCypherParser.g:8869:1: entryRuleParameter returns [EObject current=null] : iv_ruleParameter= ruleParameter EOF ;
    public final EObject entryRuleParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameter = null;


        try {
            // InternalOpenCypherParser.g:8869:50: (iv_ruleParameter= ruleParameter EOF )
            // InternalOpenCypherParser.g:8870:2: iv_ruleParameter= ruleParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameter=ruleParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameter"


    // $ANTLR start "ruleParameter"
    // InternalOpenCypherParser.g:8876:1: ruleParameter returns [EObject current=null] : (otherlv_0= DollarSign ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) ) ;
    public final EObject ruleParameter() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_parameter_1_1=null;
        AntlrDatatypeRuleToken lv_parameter_1_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8882:2: ( (otherlv_0= DollarSign ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) ) )
            // InternalOpenCypherParser.g:8883:2: (otherlv_0= DollarSign ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) )
            {
            // InternalOpenCypherParser.g:8883:2: (otherlv_0= DollarSign ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) ) )
            // InternalOpenCypherParser.g:8884:3: otherlv_0= DollarSign ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) )
            {
            otherlv_0=(Token)match(input,DollarSign,FOLLOW_115); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getDollarSignKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8888:3: ( ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) ) )
            // InternalOpenCypherParser.g:8889:4: ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:8889:4: ( (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber ) )
            // InternalOpenCypherParser.g:8890:5: (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber )
            {
            // InternalOpenCypherParser.g:8890:5: (lv_parameter_1_1= RULE_SYMBOLIC_NAME | lv_parameter_1_2= ruleNumber )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==RULE_SYMBOLIC_NAME) ) {
                alt116=1;
            }
            else if ( ((LA116_0>=RULE_HEX && LA116_0<=RULE_DECIMAL)) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // InternalOpenCypherParser.g:8891:6: lv_parameter_1_1= RULE_SYMBOLIC_NAME
                    {
                    lv_parameter_1_1=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_parameter_1_1, grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAMETerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"parameter",
                      							lv_parameter_1_1,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME");
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:8906:6: lv_parameter_1_2= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_parameter_1_2=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_2,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameter"


    // $ANTLR start "entryRulePropertyExpression"
    // InternalOpenCypherParser.g:8928:1: entryRulePropertyExpression returns [EObject current=null] : iv_rulePropertyExpression= rulePropertyExpression EOF ;
    public final EObject entryRulePropertyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyExpression = null;


        try {
            // InternalOpenCypherParser.g:8928:59: (iv_rulePropertyExpression= rulePropertyExpression EOF )
            // InternalOpenCypherParser.g:8929:2: iv_rulePropertyExpression= rulePropertyExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyExpression=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyExpression"


    // $ANTLR start "rulePropertyExpression"
    // InternalOpenCypherParser.g:8935:1: rulePropertyExpression returns [EObject current=null] : (this_Atom_0= ruleAtom ( (lv_propertyLookup_1_0= rulePropertyLookup ) )+ ) ;
    public final EObject rulePropertyExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Atom_0 = null;

        EObject lv_propertyLookup_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8941:2: ( (this_Atom_0= ruleAtom ( (lv_propertyLookup_1_0= rulePropertyLookup ) )+ ) )
            // InternalOpenCypherParser.g:8942:2: (this_Atom_0= ruleAtom ( (lv_propertyLookup_1_0= rulePropertyLookup ) )+ )
            {
            // InternalOpenCypherParser.g:8942:2: (this_Atom_0= ruleAtom ( (lv_propertyLookup_1_0= rulePropertyLookup ) )+ )
            // InternalOpenCypherParser.g:8943:3: this_Atom_0= ruleAtom ( (lv_propertyLookup_1_0= rulePropertyLookup ) )+
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPropertyExpressionAccess().getAtomParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_Atom_0=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Atom_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:8954:3: ( (lv_propertyLookup_1_0= rulePropertyLookup ) )+
            int cnt117=0;
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==FullStop) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8955:4: (lv_propertyLookup_1_0= rulePropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:8955:4: (lv_propertyLookup_1_0= rulePropertyLookup )
            	    // InternalOpenCypherParser.g:8956:5: lv_propertyLookup_1_0= rulePropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getPropertyExpressionAccess().getPropertyLookupPropertyLookupParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_propertyLookup_1_0=rulePropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyExpressionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"propertyLookup",
            	      						lv_propertyLookup_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyLookup");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt117 >= 1 ) break loop117;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(117, input);
                        throw eee;
                }
                cnt117++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyExpression"


    // $ANTLR start "entryRulePropertyKeyName"
    // InternalOpenCypherParser.g:8977:1: entryRulePropertyKeyName returns [String current=null] : iv_rulePropertyKeyName= rulePropertyKeyName EOF ;
    public final String entryRulePropertyKeyName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePropertyKeyName = null;


        try {
            // InternalOpenCypherParser.g:8977:55: (iv_rulePropertyKeyName= rulePropertyKeyName EOF )
            // InternalOpenCypherParser.g:8978:2: iv_rulePropertyKeyName= rulePropertyKeyName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyKeyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyKeyName=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyKeyName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyKeyName"


    // $ANTLR start "rulePropertyKeyName"
    // InternalOpenCypherParser.g:8984:1: rulePropertyKeyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME ;
    public final AntlrDatatypeRuleToken rulePropertyKeyName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_SYMBOLIC_NAME_0=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:8990:2: (this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME )
            // InternalOpenCypherParser.g:8991:2: this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME
            {
            this_SYMBOLIC_NAME_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_SYMBOLIC_NAME_0, grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAMETerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyKeyName"


    // $ANTLR start "entryRuleLeftArrowHead"
    // InternalOpenCypherParser.g:9001:1: entryRuleLeftArrowHead returns [String current=null] : iv_ruleLeftArrowHead= ruleLeftArrowHead EOF ;
    public final String entryRuleLeftArrowHead() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLeftArrowHead = null;


        try {
            // InternalOpenCypherParser.g:9001:53: (iv_ruleLeftArrowHead= ruleLeftArrowHead EOF )
            // InternalOpenCypherParser.g:9002:2: iv_ruleLeftArrowHead= ruleLeftArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftArrowHead=ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftArrowHead.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLeftArrowHead"


    // $ANTLR start "ruleLeftArrowHead"
    // InternalOpenCypherParser.g:9008:1: ruleLeftArrowHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= LessThanSign ;
    public final AntlrDatatypeRuleToken ruleLeftArrowHead() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9014:2: (kw= LessThanSign )
            // InternalOpenCypherParser.g:9015:2: kw= LessThanSign
            {
            kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLeftArrowHead"


    // $ANTLR start "entryRuleRightArrowHead"
    // InternalOpenCypherParser.g:9023:1: entryRuleRightArrowHead returns [String current=null] : iv_ruleRightArrowHead= ruleRightArrowHead EOF ;
    public final String entryRuleRightArrowHead() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRightArrowHead = null;


        try {
            // InternalOpenCypherParser.g:9023:54: (iv_ruleRightArrowHead= ruleRightArrowHead EOF )
            // InternalOpenCypherParser.g:9024:2: iv_ruleRightArrowHead= ruleRightArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRightArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRightArrowHead=ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRightArrowHead.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRightArrowHead"


    // $ANTLR start "ruleRightArrowHead"
    // InternalOpenCypherParser.g:9030:1: ruleRightArrowHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= GreaterThanSign ;
    public final AntlrDatatypeRuleToken ruleRightArrowHead() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9036:2: (kw= GreaterThanSign )
            // InternalOpenCypherParser.g:9037:2: kw= GreaterThanSign
            {
            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRightArrowHead"


    // $ANTLR start "entryRuleDash"
    // InternalOpenCypherParser.g:9045:1: entryRuleDash returns [String current=null] : iv_ruleDash= ruleDash EOF ;
    public final String entryRuleDash() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDash = null;


        try {
            // InternalOpenCypherParser.g:9045:44: (iv_ruleDash= ruleDash EOF )
            // InternalOpenCypherParser.g:9046:2: iv_ruleDash= ruleDash EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDashRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDash=ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDash.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDash"


    // $ANTLR start "ruleDash"
    // InternalOpenCypherParser.g:9052:1: ruleDash returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= HyphenMinus ;
    public final AntlrDatatypeRuleToken ruleDash() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9058:2: (kw= HyphenMinus )
            // InternalOpenCypherParser.g:9059:2: kw= HyphenMinus
            {
            kw=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getDashAccess().getHyphenMinusKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDash"


    // $ANTLR start "entryRuleDecimalInteger"
    // InternalOpenCypherParser.g:9067:1: entryRuleDecimalInteger returns [EObject current=null] : iv_ruleDecimalInteger= ruleDecimalInteger EOF ;
    public final EObject entryRuleDecimalInteger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDecimalInteger = null;


        try {
            // InternalOpenCypherParser.g:9067:55: (iv_ruleDecimalInteger= ruleDecimalInteger EOF )
            // InternalOpenCypherParser.g:9068:2: iv_ruleDecimalInteger= ruleDecimalInteger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDecimalIntegerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDecimalInteger=ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDecimalInteger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDecimalInteger"


    // $ANTLR start "ruleDecimalInteger"
    // InternalOpenCypherParser.g:9074:1: ruleDecimalInteger returns [EObject current=null] : ( () ( (lv_value_1_0= ruleNumber ) ) ) ;
    public final EObject ruleDecimalInteger() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9080:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) )
            // InternalOpenCypherParser.g:9081:2: ( () ( (lv_value_1_0= ruleNumber ) ) )
            {
            // InternalOpenCypherParser.g:9081:2: ( () ( (lv_value_1_0= ruleNumber ) ) )
            // InternalOpenCypherParser.g:9082:3: () ( (lv_value_1_0= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:9082:3: ()
            // InternalOpenCypherParser.g:9083:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:9092:3: ( (lv_value_1_0= ruleNumber ) )
            // InternalOpenCypherParser.g:9093:4: (lv_value_1_0= ruleNumber )
            {
            // InternalOpenCypherParser.g:9093:4: (lv_value_1_0= ruleNumber )
            // InternalOpenCypherParser.g:9094:5: lv_value_1_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDecimalIntegerRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Number");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDecimalInteger"


    // $ANTLR start "entryRuleNumber"
    // InternalOpenCypherParser.g:9115:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:9117:2: (iv_ruleNumber= ruleNumber EOF )
            // InternalOpenCypherParser.g:9118:2: iv_ruleNumber= ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumber=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumber.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalOpenCypherParser.g:9127:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_HEX_0=null;
        Token this_INT_1=null;
        Token this_DECIMAL_2=null;
        Token kw=null;
        Token this_INT_4=null;
        Token this_DECIMAL_5=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:9134:2: ( (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) )
            // InternalOpenCypherParser.g:9135:2: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            {
            // InternalOpenCypherParser.g:9135:2: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==RULE_HEX) ) {
                alt121=1;
            }
            else if ( ((LA121_0>=RULE_INT && LA121_0<=RULE_DECIMAL)) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // InternalOpenCypherParser.g:9136:3: this_HEX_0= RULE_HEX
                    {
                    this_HEX_0=(Token)match(input,RULE_HEX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_HEX_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9144:3: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    {
                    // InternalOpenCypherParser.g:9144:3: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    // InternalOpenCypherParser.g:9145:4: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    {
                    // InternalOpenCypherParser.g:9145:4: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL )
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==RULE_INT) ) {
                        alt118=1;
                    }
                    else if ( (LA118_0==RULE_DECIMAL) ) {
                        alt118=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 0, input);

                        throw nvae;
                    }
                    switch (alt118) {
                        case 1 :
                            // InternalOpenCypherParser.g:9146:5: this_INT_1= RULE_INT
                            {
                            this_INT_1=(Token)match(input,RULE_INT,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_INT_1);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:9154:5: this_DECIMAL_2= RULE_DECIMAL
                            {
                            this_DECIMAL_2=(Token)match(input,RULE_DECIMAL,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_DECIMAL_2);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalOpenCypherParser.g:9162:4: (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==FullStop) ) {
                        int LA120_1 = input.LA(2);

                        if ( ((LA120_1>=RULE_INT && LA120_1<=RULE_DECIMAL)) ) {
                            alt120=1;
                        }
                    }
                    switch (alt120) {
                        case 1 :
                            // InternalOpenCypherParser.g:9163:5: kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            {
                            kw=(Token)match(input,FullStop,FOLLOW_119); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0());
                              				
                            }
                            // InternalOpenCypherParser.g:9168:5: (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            int alt119=2;
                            int LA119_0 = input.LA(1);

                            if ( (LA119_0==RULE_INT) ) {
                                alt119=1;
                            }
                            else if ( (LA119_0==RULE_DECIMAL) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 0, input);

                                throw nvae;
                            }
                            switch (alt119) {
                                case 1 :
                                    // InternalOpenCypherParser.g:9169:6: this_INT_4= RULE_INT
                                    {
                                    this_INT_4=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current.merge(this_INT_4);
                                      					
                                    }
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0());
                                      					
                                    }

                                    }
                                    break;
                                case 2 :
                                    // InternalOpenCypherParser.g:9177:6: this_DECIMAL_5= RULE_DECIMAL
                                    {
                                    this_DECIMAL_5=(Token)match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current.merge(this_DECIMAL_5);
                                      					
                                    }
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1());
                                      					
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:9194:1: entryRuleSYMBOLIC_NAME_X returns [String current=null] : iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF ;
    public final String entryRuleSYMBOLIC_NAME_X() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSYMBOLIC_NAME_X = null;


        try {
            // InternalOpenCypherParser.g:9194:55: (iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF )
            // InternalOpenCypherParser.g:9195:2: iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSYMBOLIC_NAME_X=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSYMBOLIC_NAME_X.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSYMBOLIC_NAME_X"


    // $ANTLR start "ruleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:9201:1: ruleSYMBOLIC_NAME_X returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN ) ;
    public final AntlrDatatypeRuleToken ruleSYMBOLIC_NAME_X() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_SYMBOLIC_NAME_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9207:2: ( (this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN ) )
            // InternalOpenCypherParser.g:9208:2: (this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN )
            {
            // InternalOpenCypherParser.g:9208:2: (this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN )
            int alt122=76;
            switch ( input.LA(1) ) {
            case RULE_SYMBOLIC_NAME:
                {
                alt122=1;
                }
                break;
            case CYPHER:
                {
                alt122=2;
                }
                break;
            case EXPLAIN:
                {
                alt122=3;
                }
                break;
            case PROFILE:
                {
                alt122=4;
                }
                break;
            case USING:
                {
                alt122=5;
                }
                break;
            case PERIODIC:
                {
                alt122=6;
                }
                break;
            case COMMIT:
                {
                alt122=7;
                }
                break;
            case UNION:
                {
                alt122=8;
                }
                break;
            case ALL:
                {
                alt122=9;
                }
                break;
            case CREATE:
                {
                alt122=10;
                }
                break;
            case INDEX:
                {
                alt122=11;
                }
                break;
            case ON:
                {
                alt122=12;
                }
                break;
            case DROP:
                {
                alt122=13;
                }
                break;
            case CONSTRAINT:
                {
                alt122=14;
                }
                break;
            case ASSERT:
                {
                alt122=15;
                }
                break;
            case IS:
                {
                alt122=16;
                }
                break;
            case UNIQUE:
                {
                alt122=17;
                }
                break;
            case EXISTS:
                {
                alt122=18;
                }
                break;
            case LOAD:
                {
                alt122=19;
                }
                break;
            case CSV:
                {
                alt122=20;
                }
                break;
            case WITH:
                {
                alt122=21;
                }
                break;
            case HEADERS:
                {
                alt122=22;
                }
                break;
            case FROM:
                {
                alt122=23;
                }
                break;
            case AS:
                {
                alt122=24;
                }
                break;
            case FIELDTERMINATOR:
                {
                alt122=25;
                }
                break;
            case OPTIONAL:
                {
                alt122=26;
                }
                break;
            case MATCH:
                {
                alt122=27;
                }
                break;
            case UNWIND:
                {
                alt122=28;
                }
                break;
            case MERGE:
                {
                alt122=29;
                }
                break;
            case SET:
                {
                alt122=30;
                }
                break;
            case DELETE:
                {
                alt122=31;
                }
                break;
            case DETACH:
                {
                alt122=32;
                }
                break;
            case REMOVE:
                {
                alt122=33;
                }
                break;
            case FOREACH:
                {
                alt122=34;
                }
                break;
            case IN:
                {
                alt122=35;
                }
                break;
            case DISTINCT:
                {
                alt122=36;
                }
                break;
            case RETURN:
                {
                alt122=37;
                }
                break;
            case ORDER:
                {
                alt122=38;
                }
                break;
            case BY:
                {
                alt122=39;
                }
                break;
            case SKIP:
                {
                alt122=40;
                }
                break;
            case LIMIT:
                {
                alt122=41;
                }
                break;
            case DESCENDING:
                {
                alt122=42;
                }
                break;
            case DESC:
                {
                alt122=43;
                }
                break;
            case ASCENDING:
                {
                alt122=44;
                }
                break;
            case ASC:
                {
                alt122=45;
                }
                break;
            case JOIN:
                {
                alt122=46;
                }
                break;
            case SCAN:
                {
                alt122=47;
                }
                break;
            case START:
                {
                alt122=48;
                }
                break;
            case NODE:
                {
                alt122=49;
                }
                break;
            case RELATIONSHIP:
                {
                alt122=50;
                }
                break;
            case REL:
                {
                alt122=51;
                }
                break;
            case WHERE:
                {
                alt122=52;
                }
                break;
            case SHORTESTPATH:
                {
                alt122=53;
                }
                break;
            case ALLSHORTESTPATHS:
                {
                alt122=54;
                }
                break;
            case OR:
                {
                alt122=55;
                }
                break;
            case XOR:
                {
                alt122=56;
                }
                break;
            case AND:
                {
                alt122=57;
                }
                break;
            case NOT:
                {
                alt122=58;
                }
                break;
            case STARTS:
                {
                alt122=59;
                }
                break;
            case ENDS:
                {
                alt122=60;
                }
                break;
            case CONTAINS:
                {
                alt122=61;
                }
                break;
            case NULL:
                {
                alt122=62;
                }
                break;
            case TRUE:
                {
                alt122=63;
                }
                break;
            case FALSE:
                {
                alt122=64;
                }
                break;
            case COUNT:
                {
                alt122=65;
                }
                break;
            case FILTER:
                {
                alt122=66;
                }
                break;
            case EXTRACT:
                {
                alt122=67;
                }
                break;
            case ANY:
                {
                alt122=68;
                }
                break;
            case NONE:
                {
                alt122=69;
                }
                break;
            case SINGLE:
                {
                alt122=70;
                }
                break;
            case REDUCE:
                {
                alt122=71;
                }
                break;
            case CASE:
                {
                alt122=72;
                }
                break;
            case ELSE:
                {
                alt122=73;
                }
                break;
            case END:
                {
                alt122=74;
                }
                break;
            case WHEN:
                {
                alt122=75;
                }
                break;
            case THEN:
                {
                alt122=76;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // InternalOpenCypherParser.g:9209:3: this_SYMBOLIC_NAME_0= RULE_SYMBOLIC_NAME
                    {
                    this_SYMBOLIC_NAME_0=(Token)match(input,RULE_SYMBOLIC_NAME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SYMBOLIC_NAME_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SYMBOLIC_NAME_0, grammarAccess.getSYMBOLIC_NAME_XAccess().getSYMBOLIC_NAMETerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9217:3: kw= CYPHER
                    {
                    kw=(Token)match(input,CYPHER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:9223:3: kw= EXPLAIN
                    {
                    kw=(Token)match(input,EXPLAIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:9229:3: kw= PROFILE
                    {
                    kw=(Token)match(input,PROFILE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:9235:3: kw= USING
                    {
                    kw=(Token)match(input,USING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:9241:3: kw= PERIODIC
                    {
                    kw=(Token)match(input,PERIODIC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:9247:3: kw= COMMIT
                    {
                    kw=(Token)match(input,COMMIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:9253:3: kw= UNION
                    {
                    kw=(Token)match(input,UNION,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:9259:3: kw= ALL
                    {
                    kw=(Token)match(input,ALL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:9265:3: kw= CREATE
                    {
                    kw=(Token)match(input,CREATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:9271:3: kw= INDEX
                    {
                    kw=(Token)match(input,INDEX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:9277:3: kw= ON
                    {
                    kw=(Token)match(input,ON,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:9283:3: kw= DROP
                    {
                    kw=(Token)match(input,DROP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:9289:3: kw= CONSTRAINT
                    {
                    kw=(Token)match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:9295:3: kw= ASSERT
                    {
                    kw=(Token)match(input,ASSERT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:9301:3: kw= IS
                    {
                    kw=(Token)match(input,IS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:9307:3: kw= UNIQUE
                    {
                    kw=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:9313:3: kw= EXISTS
                    {
                    kw=(Token)match(input,EXISTS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:9319:3: kw= LOAD
                    {
                    kw=(Token)match(input,LOAD,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:9325:3: kw= CSV
                    {
                    kw=(Token)match(input,CSV,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:9331:3: kw= WITH
                    {
                    kw=(Token)match(input,WITH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:9337:3: kw= HEADERS
                    {
                    kw=(Token)match(input,HEADERS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:9343:3: kw= FROM
                    {
                    kw=(Token)match(input,FROM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalOpenCypherParser.g:9349:3: kw= AS
                    {
                    kw=(Token)match(input,AS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalOpenCypherParser.g:9355:3: kw= FIELDTERMINATOR
                    {
                    kw=(Token)match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    // InternalOpenCypherParser.g:9361:3: kw= OPTIONAL
                    {
                    kw=(Token)match(input,OPTIONAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    // InternalOpenCypherParser.g:9367:3: kw= MATCH
                    {
                    kw=(Token)match(input,MATCH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    // InternalOpenCypherParser.g:9373:3: kw= UNWIND
                    {
                    kw=(Token)match(input,UNWIND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    // InternalOpenCypherParser.g:9379:3: kw= MERGE
                    {
                    kw=(Token)match(input,MERGE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    // InternalOpenCypherParser.g:9385:3: kw= SET
                    {
                    kw=(Token)match(input,SET,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    // InternalOpenCypherParser.g:9391:3: kw= DELETE
                    {
                    kw=(Token)match(input,DELETE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    // InternalOpenCypherParser.g:9397:3: kw= DETACH
                    {
                    kw=(Token)match(input,DETACH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    // InternalOpenCypherParser.g:9403:3: kw= REMOVE
                    {
                    kw=(Token)match(input,REMOVE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    // InternalOpenCypherParser.g:9409:3: kw= FOREACH
                    {
                    kw=(Token)match(input,FOREACH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    // InternalOpenCypherParser.g:9415:3: kw= IN
                    {
                    kw=(Token)match(input,IN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    // InternalOpenCypherParser.g:9421:3: kw= DISTINCT
                    {
                    kw=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    // InternalOpenCypherParser.g:9427:3: kw= RETURN
                    {
                    kw=(Token)match(input,RETURN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36());
                      		
                    }

                    }
                    break;
                case 38 :
                    // InternalOpenCypherParser.g:9433:3: kw= ORDER
                    {
                    kw=(Token)match(input,ORDER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37());
                      		
                    }

                    }
                    break;
                case 39 :
                    // InternalOpenCypherParser.g:9439:3: kw= BY
                    {
                    kw=(Token)match(input,BY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38());
                      		
                    }

                    }
                    break;
                case 40 :
                    // InternalOpenCypherParser.g:9445:3: kw= SKIP
                    {
                    kw=(Token)match(input,SKIP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39());
                      		
                    }

                    }
                    break;
                case 41 :
                    // InternalOpenCypherParser.g:9451:3: kw= LIMIT
                    {
                    kw=(Token)match(input,LIMIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40());
                      		
                    }

                    }
                    break;
                case 42 :
                    // InternalOpenCypherParser.g:9457:3: kw= DESCENDING
                    {
                    kw=(Token)match(input,DESCENDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41());
                      		
                    }

                    }
                    break;
                case 43 :
                    // InternalOpenCypherParser.g:9463:3: kw= DESC
                    {
                    kw=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42());
                      		
                    }

                    }
                    break;
                case 44 :
                    // InternalOpenCypherParser.g:9469:3: kw= ASCENDING
                    {
                    kw=(Token)match(input,ASCENDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43());
                      		
                    }

                    }
                    break;
                case 45 :
                    // InternalOpenCypherParser.g:9475:3: kw= ASC
                    {
                    kw=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44());
                      		
                    }

                    }
                    break;
                case 46 :
                    // InternalOpenCypherParser.g:9481:3: kw= JOIN
                    {
                    kw=(Token)match(input,JOIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45());
                      		
                    }

                    }
                    break;
                case 47 :
                    // InternalOpenCypherParser.g:9487:3: kw= SCAN
                    {
                    kw=(Token)match(input,SCAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46());
                      		
                    }

                    }
                    break;
                case 48 :
                    // InternalOpenCypherParser.g:9493:3: kw= START
                    {
                    kw=(Token)match(input,START,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47());
                      		
                    }

                    }
                    break;
                case 49 :
                    // InternalOpenCypherParser.g:9499:3: kw= NODE
                    {
                    kw=(Token)match(input,NODE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48());
                      		
                    }

                    }
                    break;
                case 50 :
                    // InternalOpenCypherParser.g:9505:3: kw= RELATIONSHIP
                    {
                    kw=(Token)match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49());
                      		
                    }

                    }
                    break;
                case 51 :
                    // InternalOpenCypherParser.g:9511:3: kw= REL
                    {
                    kw=(Token)match(input,REL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50());
                      		
                    }

                    }
                    break;
                case 52 :
                    // InternalOpenCypherParser.g:9517:3: kw= WHERE
                    {
                    kw=(Token)match(input,WHERE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51());
                      		
                    }

                    }
                    break;
                case 53 :
                    // InternalOpenCypherParser.g:9523:3: kw= SHORTESTPATH
                    {
                    kw=(Token)match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52());
                      		
                    }

                    }
                    break;
                case 54 :
                    // InternalOpenCypherParser.g:9529:3: kw= ALLSHORTESTPATHS
                    {
                    kw=(Token)match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53());
                      		
                    }

                    }
                    break;
                case 55 :
                    // InternalOpenCypherParser.g:9535:3: kw= OR
                    {
                    kw=(Token)match(input,OR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54());
                      		
                    }

                    }
                    break;
                case 56 :
                    // InternalOpenCypherParser.g:9541:3: kw= XOR
                    {
                    kw=(Token)match(input,XOR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55());
                      		
                    }

                    }
                    break;
                case 57 :
                    // InternalOpenCypherParser.g:9547:3: kw= AND
                    {
                    kw=(Token)match(input,AND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56());
                      		
                    }

                    }
                    break;
                case 58 :
                    // InternalOpenCypherParser.g:9553:3: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57());
                      		
                    }

                    }
                    break;
                case 59 :
                    // InternalOpenCypherParser.g:9559:3: kw= STARTS
                    {
                    kw=(Token)match(input,STARTS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58());
                      		
                    }

                    }
                    break;
                case 60 :
                    // InternalOpenCypherParser.g:9565:3: kw= ENDS
                    {
                    kw=(Token)match(input,ENDS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59());
                      		
                    }

                    }
                    break;
                case 61 :
                    // InternalOpenCypherParser.g:9571:3: kw= CONTAINS
                    {
                    kw=(Token)match(input,CONTAINS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60());
                      		
                    }

                    }
                    break;
                case 62 :
                    // InternalOpenCypherParser.g:9577:3: kw= NULL
                    {
                    kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61());
                      		
                    }

                    }
                    break;
                case 63 :
                    // InternalOpenCypherParser.g:9583:3: kw= TRUE
                    {
                    kw=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62());
                      		
                    }

                    }
                    break;
                case 64 :
                    // InternalOpenCypherParser.g:9589:3: kw= FALSE
                    {
                    kw=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63());
                      		
                    }

                    }
                    break;
                case 65 :
                    // InternalOpenCypherParser.g:9595:3: kw= COUNT
                    {
                    kw=(Token)match(input,COUNT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64());
                      		
                    }

                    }
                    break;
                case 66 :
                    // InternalOpenCypherParser.g:9601:3: kw= FILTER
                    {
                    kw=(Token)match(input,FILTER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65());
                      		
                    }

                    }
                    break;
                case 67 :
                    // InternalOpenCypherParser.g:9607:3: kw= EXTRACT
                    {
                    kw=(Token)match(input,EXTRACT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66());
                      		
                    }

                    }
                    break;
                case 68 :
                    // InternalOpenCypherParser.g:9613:3: kw= ANY
                    {
                    kw=(Token)match(input,ANY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67());
                      		
                    }

                    }
                    break;
                case 69 :
                    // InternalOpenCypherParser.g:9619:3: kw= NONE
                    {
                    kw=(Token)match(input,NONE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68());
                      		
                    }

                    }
                    break;
                case 70 :
                    // InternalOpenCypherParser.g:9625:3: kw= SINGLE
                    {
                    kw=(Token)match(input,SINGLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69());
                      		
                    }

                    }
                    break;
                case 71 :
                    // InternalOpenCypherParser.g:9631:3: kw= REDUCE
                    {
                    kw=(Token)match(input,REDUCE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70());
                      		
                    }

                    }
                    break;
                case 72 :
                    // InternalOpenCypherParser.g:9637:3: kw= CASE
                    {
                    kw=(Token)match(input,CASE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71());
                      		
                    }

                    }
                    break;
                case 73 :
                    // InternalOpenCypherParser.g:9643:3: kw= ELSE
                    {
                    kw=(Token)match(input,ELSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72());
                      		
                    }

                    }
                    break;
                case 74 :
                    // InternalOpenCypherParser.g:9649:3: kw= END
                    {
                    kw=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73());
                      		
                    }

                    }
                    break;
                case 75 :
                    // InternalOpenCypherParser.g:9655:3: kw= WHEN
                    {
                    kw=(Token)match(input,WHEN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74());
                      		
                    }

                    }
                    break;
                case 76 :
                    // InternalOpenCypherParser.g:9661:3: kw= THEN
                    {
                    kw=(Token)match(input,THEN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSYMBOLIC_NAME_X"

    // $ANTLR start synpred2_InternalOpenCypherParser
    public final void synpred2_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_explain_2_0=null;

        // InternalOpenCypherParser.g:179:4: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) )
        // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
        {
        // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
        // InternalOpenCypherParser.g:180:5: {...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalOpenCypherParser.g:180:109: ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
        // InternalOpenCypherParser.g:181:6: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
        // InternalOpenCypherParser.g:184:9: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
        // InternalOpenCypherParser.g:184:10: {...}? => ( (lv_explain_2_0= EXPLAIN ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalOpenCypherParser", "true");
        }
        // InternalOpenCypherParser.g:184:19: ( (lv_explain_2_0= EXPLAIN ) )
        // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
        {
        // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
        // InternalOpenCypherParser.g:185:10: lv_explain_2_0= EXPLAIN
        {
        lv_explain_2_0=(Token)match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred2_InternalOpenCypherParser

    // $ANTLR start synpred3_InternalOpenCypherParser
    public final void synpred3_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_profile_3_0=null;

        // InternalOpenCypherParser.g:202:4: ( ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) )
        // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
        {
        // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
        // InternalOpenCypherParser.g:203:5: {...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalOpenCypherParser.g:203:109: ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
        // InternalOpenCypherParser.g:204:6: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
        // InternalOpenCypherParser.g:207:9: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
        // InternalOpenCypherParser.g:207:10: {...}? => ( (lv_profile_3_0= PROFILE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_InternalOpenCypherParser", "true");
        }
        // InternalOpenCypherParser.g:207:19: ( (lv_profile_3_0= PROFILE ) )
        // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
        {
        // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
        // InternalOpenCypherParser.g:208:10: lv_profile_3_0= PROFILE
        {
        lv_profile_3_0=(Token)match(input,PROFILE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred3_InternalOpenCypherParser

    // $ANTLR start synpred4_InternalOpenCypherParser
    public final void synpred4_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_cypherOption_4_0 = null;


        // InternalOpenCypherParser.g:230:10: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )
        // InternalOpenCypherParser.g:230:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred4_InternalOpenCypherParser", "true");
        }
        // InternalOpenCypherParser.g:230:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
        // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        {
        // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        // InternalOpenCypherParser.g:231:10: lv_cypherOption_4_0= ruleCypherOption
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_cypherOption_4_0=ruleCypherOption();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred4_InternalOpenCypherParser

    // $ANTLR start synpred5_InternalOpenCypherParser
    public final void synpred5_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_cypherOption_4_0 = null;


        // InternalOpenCypherParser.g:225:4: ( ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )
        // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
        {
        // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
        // InternalOpenCypherParser.g:226:5: {...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred5_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
        }
        // InternalOpenCypherParser.g:226:109: ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
        // InternalOpenCypherParser.g:227:6: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
        // InternalOpenCypherParser.g:230:9: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
        int cnt123=0;
        loop123:
        do {
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==CYPHER) && ((true))) {
                alt123=1;
            }


            switch (alt123) {
        	case 1 :
        	    // InternalOpenCypherParser.g:230:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred5_InternalOpenCypherParser", "true");
        	    }
        	    // InternalOpenCypherParser.g:230:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
        	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        	    {
        	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        	    // InternalOpenCypherParser.g:231:10: lv_cypherOption_4_0= ruleCypherOption
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_cypherOption_4_0=ruleCypherOption();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt123 >= 1 ) break loop123;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(123, input);
                    throw eee;
            }
            cnt123++;
        } while (true);


        }


        }


        }
    }
    // $ANTLR end synpred5_InternalOpenCypherParser

    // $ANTLR start synpred26_InternalOpenCypherParser
    public final void synpred26_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateIndex_0 = null;


        // InternalOpenCypherParser.g:1042:3: (this_CreateIndex_0= ruleCreateIndex )
        // InternalOpenCypherParser.g:1042:3: this_CreateIndex_0= ruleCreateIndex
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateIndex_0=ruleCreateIndex();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_InternalOpenCypherParser

    // $ANTLR start synpred27_InternalOpenCypherParser
    public final void synpred27_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_DropIndex_1 = null;


        // InternalOpenCypherParser.g:1054:3: (this_DropIndex_1= ruleDropIndex )
        // InternalOpenCypherParser.g:1054:3: this_DropIndex_1= ruleDropIndex
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropIndex_1=ruleDropIndex();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_InternalOpenCypherParser

    // $ANTLR start synpred28_InternalOpenCypherParser
    public final void synpred28_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateUniqueConstraint_2 = null;


        // InternalOpenCypherParser.g:1066:3: (this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint )
        // InternalOpenCypherParser.g:1066:3: this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateUniqueConstraint_2=ruleCreateUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_InternalOpenCypherParser

    // $ANTLR start synpred29_InternalOpenCypherParser
    public final void synpred29_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_DropUniqueConstraint_3 = null;


        // InternalOpenCypherParser.g:1078:3: (this_DropUniqueConstraint_3= ruleDropUniqueConstraint )
        // InternalOpenCypherParser.g:1078:3: this_DropUniqueConstraint_3= ruleDropUniqueConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropUniqueConstraint_3=ruleDropUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_InternalOpenCypherParser

    // $ANTLR start synpred30_InternalOpenCypherParser
    public final void synpred30_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateNodePropertyExistenceConstraint_4 = null;


        // InternalOpenCypherParser.g:1090:3: (this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:1090:3: this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateNodePropertyExistenceConstraint_4=ruleCreateNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_InternalOpenCypherParser

    // $ANTLR start synpred31_InternalOpenCypherParser
    public final void synpred31_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_DropNodePropertyExistenceConstraint_5 = null;


        // InternalOpenCypherParser.g:1102:3: (this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:1102:3: this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropNodePropertyExistenceConstraint_5=ruleDropNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_InternalOpenCypherParser

    // $ANTLR start synpred32_InternalOpenCypherParser
    public final void synpred32_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateRelationshipPropertyExistenceConstraint_6 = null;


        // InternalOpenCypherParser.g:1114:3: (this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint )
        // InternalOpenCypherParser.g:1114:3: this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateRelationshipPropertyExistenceConstraint_6=ruleCreateRelationshipPropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_InternalOpenCypherParser

    // $ANTLR start synpred52_InternalOpenCypherParser
    public final void synpred52_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_distint_1_0=null;

        // InternalOpenCypherParser.g:3054:4: ( (lv_distint_1_0= DISTINCT ) )
        // InternalOpenCypherParser.g:3054:4: (lv_distint_1_0= DISTINCT )
        {
        // InternalOpenCypherParser.g:3054:4: (lv_distint_1_0= DISTINCT )
        // InternalOpenCypherParser.g:3055:5: lv_distint_1_0= DISTINCT
        {
        lv_distint_1_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred52_InternalOpenCypherParser

    // $ANTLR start synpred54_InternalOpenCypherParser
    public final void synpred54_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_distinct_1_0=null;

        // InternalOpenCypherParser.g:3139:4: ( (lv_distinct_1_0= DISTINCT ) )
        // InternalOpenCypherParser.g:3139:4: (lv_distinct_1_0= DISTINCT )
        {
        // InternalOpenCypherParser.g:3139:4: (lv_distinct_1_0= DISTINCT )
        // InternalOpenCypherParser.g:3140:5: lv_distinct_1_0= DISTINCT
        {
        lv_distinct_1_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred54_InternalOpenCypherParser

    // $ANTLR start synpred111_InternalOpenCypherParser
    public final void synpred111_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_operator_0_0=null;
        EObject lv_left_1_0 = null;


        // InternalOpenCypherParser.g:6075:3: ( ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) ) )
        // InternalOpenCypherParser.g:6075:3: ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) )
        {
        // InternalOpenCypherParser.g:6075:3: ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) )
        // InternalOpenCypherParser.g:6076:4: ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) )
        {
        // InternalOpenCypherParser.g:6076:4: ( (lv_operator_0_0= NOT ) )
        // InternalOpenCypherParser.g:6077:5: (lv_operator_0_0= NOT )
        {
        // InternalOpenCypherParser.g:6077:5: (lv_operator_0_0= NOT )
        // InternalOpenCypherParser.g:6078:6: lv_operator_0_0= NOT
        {
        lv_operator_0_0=(Token)match(input,NOT,FOLLOW_37); if (state.failed) return ;

        }


        }

        // InternalOpenCypherParser.g:6090:4: ( (lv_left_1_0= ruleExpressionNot ) )
        // InternalOpenCypherParser.g:6091:5: (lv_left_1_0= ruleExpressionNot )
        {
        // InternalOpenCypherParser.g:6091:5: (lv_left_1_0= ruleExpressionNot )
        // InternalOpenCypherParser.g:6092:6: lv_left_1_0= ruleExpressionNot
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getExpressionNotAccess().getLeftExpressionNotParserRuleCall_0_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_left_1_0=ruleExpressionNot();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred111_InternalOpenCypherParser

    // $ANTLR start synpred127_InternalOpenCypherParser
    public final void synpred127_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:6596:5: ( ( HyphenMinus ) )
        // InternalOpenCypherParser.g:6596:6: ( HyphenMinus )
        {
        // InternalOpenCypherParser.g:6596:6: ( HyphenMinus )
        // InternalOpenCypherParser.g:6597:6: HyphenMinus
        {
        match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred127_InternalOpenCypherParser

    // $ANTLR start synpred142_InternalOpenCypherParser
    public final void synpred142_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_LegacyParameter_5 = null;


        // InternalOpenCypherParser.g:7190:3: (this_LegacyParameter_5= ruleLegacyParameter )
        // InternalOpenCypherParser.g:7190:3: this_LegacyParameter_5= ruleLegacyParameter
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_LegacyParameter_5=ruleLegacyParameter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_InternalOpenCypherParser

    // $ANTLR start synpred144_InternalOpenCypherParser
    public final void synpred144_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_value_7_1=null;
        Token lv_value_7_2=null;

        // InternalOpenCypherParser.g:7202:3: ( ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) )
        // InternalOpenCypherParser.g:7202:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
        {
        // InternalOpenCypherParser.g:7202:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
        // InternalOpenCypherParser.g:7203:4: () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
        {
        // InternalOpenCypherParser.g:7203:4: ()
        // InternalOpenCypherParser.g:7204:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalOpenCypherParser.g:7213:4: ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
        // InternalOpenCypherParser.g:7214:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
        {
        // InternalOpenCypherParser.g:7214:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
        // InternalOpenCypherParser.g:7215:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
        {
        // InternalOpenCypherParser.g:7215:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
        int alt135=2;
        int LA135_0 = input.LA(1);

        if ( (LA135_0==TRUE) ) {
            alt135=1;
        }
        else if ( (LA135_0==FALSE) ) {
            alt135=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 135, 0, input);

            throw nvae;
        }
        switch (alt135) {
            case 1 :
                // InternalOpenCypherParser.g:7216:7: lv_value_7_1= TRUE
                {
                lv_value_7_1=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return ;

                }
                break;
            case 2 :
                // InternalOpenCypherParser.g:7227:7: lv_value_7_2= FALSE
                {
                lv_value_7_2=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred144_InternalOpenCypherParser

    // $ANTLR start synpred145_InternalOpenCypherParser
    public final void synpred145_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;

        // InternalOpenCypherParser.g:7242:3: ( ( () otherlv_9= NULL ) )
        // InternalOpenCypherParser.g:7242:3: ( () otherlv_9= NULL )
        {
        // InternalOpenCypherParser.g:7242:3: ( () otherlv_9= NULL )
        // InternalOpenCypherParser.g:7243:4: () otherlv_9= NULL
        {
        // InternalOpenCypherParser.g:7243:4: ()
        // InternalOpenCypherParser.g:7244:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_9=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred145_InternalOpenCypherParser

    // $ANTLR start synpred146_InternalOpenCypherParser
    public final void synpred146_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_expression_11_0 = null;


        // InternalOpenCypherParser.g:7259:3: ( ( () ( (lv_expression_11_0= ruleCaseExpression ) ) ) )
        // InternalOpenCypherParser.g:7259:3: ( () ( (lv_expression_11_0= ruleCaseExpression ) ) )
        {
        // InternalOpenCypherParser.g:7259:3: ( () ( (lv_expression_11_0= ruleCaseExpression ) ) )
        // InternalOpenCypherParser.g:7260:4: () ( (lv_expression_11_0= ruleCaseExpression ) )
        {
        // InternalOpenCypherParser.g:7260:4: ()
        // InternalOpenCypherParser.g:7261:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalOpenCypherParser.g:7270:4: ( (lv_expression_11_0= ruleCaseExpression ) )
        // InternalOpenCypherParser.g:7271:5: (lv_expression_11_0= ruleCaseExpression )
        {
        // InternalOpenCypherParser.g:7271:5: (lv_expression_11_0= ruleCaseExpression )
        // InternalOpenCypherParser.g:7272:6: lv_expression_11_0= ruleCaseExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getExpressionCaseExpressionParserRuleCall_6_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_expression_11_0=ruleCaseExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred146_InternalOpenCypherParser

    // $ANTLR start synpred147_InternalOpenCypherParser
    public final void synpred147_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;

        // InternalOpenCypherParser.g:7291:3: ( ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis ) )
        // InternalOpenCypherParser.g:7291:3: ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7291:3: ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis )
        // InternalOpenCypherParser.g:7292:4: () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis
        {
        // InternalOpenCypherParser.g:7292:4: ()
        // InternalOpenCypherParser.g:7293:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_13=(Token)match(input,COUNT,FOLLOW_22); if (state.failed) return ;
        otherlv_14=(Token)match(input,LeftParenthesis,FOLLOW_101); if (state.failed) return ;
        otherlv_15=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return ;
        otherlv_16=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred147_InternalOpenCypherParser

    // $ANTLR start synpred148_InternalOpenCypherParser
    public final void synpred148_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_MapLiteral_17 = null;


        // InternalOpenCypherParser.g:7320:3: (this_MapLiteral_17= ruleMapLiteral )
        // InternalOpenCypherParser.g:7320:3: this_MapLiteral_17= ruleMapLiteral
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_MapLiteral_17=ruleMapLiteral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_InternalOpenCypherParser

    // $ANTLR start synpred149_InternalOpenCypherParser
    public final void synpred149_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_ListComprehension_18 = null;


        // InternalOpenCypherParser.g:7332:3: (this_ListComprehension_18= ruleListComprehension )
        // InternalOpenCypherParser.g:7332:3: this_ListComprehension_18= ruleListComprehension
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ListComprehension_18=ruleListComprehension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_InternalOpenCypherParser

    // $ANTLR start synpred151_InternalOpenCypherParser
    public final void synpred151_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        EObject lv_expressions_21_0 = null;

        EObject lv_expressions_23_0 = null;


        // InternalOpenCypherParser.g:7344:3: ( ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) ) )
        // InternalOpenCypherParser.g:7344:3: ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) )
        {
        // InternalOpenCypherParser.g:7344:3: ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) )
        // InternalOpenCypherParser.g:7345:4: () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket )
        {
        // InternalOpenCypherParser.g:7345:4: ()
        // InternalOpenCypherParser.g:7346:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalOpenCypherParser.g:7355:4: (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket )
        // InternalOpenCypherParser.g:7356:5: otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket
        {
        otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_37); if (state.failed) return ;
        // InternalOpenCypherParser.g:7360:5: ( (lv_expressions_21_0= ruleExpression ) )
        // InternalOpenCypherParser.g:7361:6: (lv_expressions_21_0= ruleExpression )
        {
        // InternalOpenCypherParser.g:7361:6: (lv_expressions_21_0= ruleExpression )
        // InternalOpenCypherParser.g:7362:7: lv_expressions_21_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          							newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_10_1_1_0());
          						
        }
        pushFollow(FOLLOW_102);
        lv_expressions_21_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalOpenCypherParser.g:7379:5: (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )*
        loop136:
        do {
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==Comma) ) {
                alt136=1;
            }


            switch (alt136) {
        	case 1 :
        	    // InternalOpenCypherParser.g:7380:6: otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) )
        	    {
        	    otherlv_22=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return ;
        	    // InternalOpenCypherParser.g:7384:6: ( (lv_expressions_23_0= ruleExpression ) )
        	    // InternalOpenCypherParser.g:7385:7: (lv_expressions_23_0= ruleExpression )
        	    {
        	    // InternalOpenCypherParser.g:7385:7: (lv_expressions_23_0= ruleExpression )
        	    // InternalOpenCypherParser.g:7386:8: lv_expressions_23_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      								newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_10_1_2_1_0());
        	      							
        	    }
        	    pushFollow(FOLLOW_102);
        	    lv_expressions_23_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop136;
            }
        } while (true);

        otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred151_InternalOpenCypherParser

    // $ANTLR start synpred153_InternalOpenCypherParser
    public final void synpred153_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        EObject lv_filterExpression_28_0 = null;

        EObject lv_expression_30_0 = null;


        // InternalOpenCypherParser.g:7411:3: ( ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) )
        // InternalOpenCypherParser.g:7411:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7411:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
        // InternalOpenCypherParser.g:7412:4: () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis
        {
        // InternalOpenCypherParser.g:7412:4: ()
        // InternalOpenCypherParser.g:7413:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_26=(Token)match(input,EXTRACT,FOLLOW_22); if (state.failed) return ;
        otherlv_27=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return ;
        // InternalOpenCypherParser.g:7430:4: ( (lv_filterExpression_28_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7431:5: (lv_filterExpression_28_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7431:5: (lv_filterExpression_28_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7432:6: lv_filterExpression_28_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0());
          					
        }
        pushFollow(FOLLOW_103);
        lv_filterExpression_28_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalOpenCypherParser.g:7449:4: (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )?
        int alt137=2;
        int LA137_0 = input.LA(1);

        if ( (LA137_0==VerticalLine) ) {
            alt137=1;
        }
        switch (alt137) {
            case 1 :
                // InternalOpenCypherParser.g:7450:5: otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) )
                {
                otherlv_29=(Token)match(input,VerticalLine,FOLLOW_37); if (state.failed) return ;
                // InternalOpenCypherParser.g:7454:5: ( (lv_expression_30_0= ruleExpression ) )
                // InternalOpenCypherParser.g:7455:6: (lv_expression_30_0= ruleExpression )
                {
                // InternalOpenCypherParser.g:7455:6: (lv_expression_30_0= ruleExpression )
                // InternalOpenCypherParser.g:7456:7: lv_expression_30_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  							newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_11_4_1_0());
                  						
                }
                pushFollow(FOLLOW_23);
                lv_expression_30_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        otherlv_31=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred153_InternalOpenCypherParser

    // $ANTLR start synpred154_InternalOpenCypherParser
    public final void synpred154_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_Reduce_32 = null;


        // InternalOpenCypherParser.g:7480:3: (this_Reduce_32= ruleReduce )
        // InternalOpenCypherParser.g:7480:3: this_Reduce_32= ruleReduce
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_Reduce_32=ruleReduce();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_InternalOpenCypherParser

    // $ANTLR start synpred155_InternalOpenCypherParser
    public final void synpred155_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_filterExpression_36_0 = null;


        // InternalOpenCypherParser.g:7492:3: ( ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) )
        // InternalOpenCypherParser.g:7492:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7492:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
        // InternalOpenCypherParser.g:7493:4: () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis
        {
        // InternalOpenCypherParser.g:7493:4: ()
        // InternalOpenCypherParser.g:7494:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_34=(Token)match(input,FILTER,FOLLOW_22); if (state.failed) return ;
        otherlv_35=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return ;
        // InternalOpenCypherParser.g:7511:4: ( (lv_filterExpression_36_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7512:5: (lv_filterExpression_36_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7512:5: (lv_filterExpression_36_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7513:6: lv_filterExpression_36_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_36_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred155_InternalOpenCypherParser

    // $ANTLR start synpred156_InternalOpenCypherParser
    public final void synpred156_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_39=null;
        Token otherlv_40=null;
        Token otherlv_42=null;
        EObject lv_filterExpression_41_0 = null;


        // InternalOpenCypherParser.g:7536:3: ( ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) )
        // InternalOpenCypherParser.g:7536:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7536:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
        // InternalOpenCypherParser.g:7537:4: () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis
        {
        // InternalOpenCypherParser.g:7537:4: ()
        // InternalOpenCypherParser.g:7538:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_39=(Token)match(input,ALL,FOLLOW_22); if (state.failed) return ;
        otherlv_40=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return ;
        // InternalOpenCypherParser.g:7555:4: ( (lv_filterExpression_41_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7556:5: (lv_filterExpression_41_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7556:5: (lv_filterExpression_41_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7557:6: lv_filterExpression_41_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_14_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_41_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_42=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred156_InternalOpenCypherParser

    // $ANTLR start synpred157_InternalOpenCypherParser
    public final void synpred157_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        EObject lv_filterExpression_46_0 = null;


        // InternalOpenCypherParser.g:7580:3: ( ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) )
        // InternalOpenCypherParser.g:7580:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7580:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
        // InternalOpenCypherParser.g:7581:4: () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis
        {
        // InternalOpenCypherParser.g:7581:4: ()
        // InternalOpenCypherParser.g:7582:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_44=(Token)match(input,ANY,FOLLOW_22); if (state.failed) return ;
        otherlv_45=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return ;
        // InternalOpenCypherParser.g:7599:4: ( (lv_filterExpression_46_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7600:5: (lv_filterExpression_46_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7600:5: (lv_filterExpression_46_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7601:6: lv_filterExpression_46_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_15_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_46_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_47=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred157_InternalOpenCypherParser

    // $ANTLR start synpred158_InternalOpenCypherParser
    public final void synpred158_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token otherlv_52=null;
        EObject lv_filterExpression_51_0 = null;


        // InternalOpenCypherParser.g:7624:3: ( ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) )
        // InternalOpenCypherParser.g:7624:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7624:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
        // InternalOpenCypherParser.g:7625:4: () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis
        {
        // InternalOpenCypherParser.g:7625:4: ()
        // InternalOpenCypherParser.g:7626:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_49=(Token)match(input,NONE,FOLLOW_22); if (state.failed) return ;
        otherlv_50=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return ;
        // InternalOpenCypherParser.g:7643:4: ( (lv_filterExpression_51_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7644:5: (lv_filterExpression_51_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7644:5: (lv_filterExpression_51_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7645:6: lv_filterExpression_51_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_16_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_51_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_52=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred158_InternalOpenCypherParser

    // $ANTLR start synpred159_InternalOpenCypherParser
    public final void synpred159_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_54=null;
        Token otherlv_55=null;
        Token otherlv_57=null;
        EObject lv_filterExpression_56_0 = null;


        // InternalOpenCypherParser.g:7668:3: ( ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) )
        // InternalOpenCypherParser.g:7668:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7668:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
        // InternalOpenCypherParser.g:7669:4: () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis
        {
        // InternalOpenCypherParser.g:7669:4: ()
        // InternalOpenCypherParser.g:7670:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_54=(Token)match(input,SINGLE,FOLLOW_22); if (state.failed) return ;
        otherlv_55=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return ;
        // InternalOpenCypherParser.g:7687:4: ( (lv_filterExpression_56_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7688:5: (lv_filterExpression_56_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7688:5: (lv_filterExpression_56_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7689:6: lv_filterExpression_56_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_17_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_56_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_57=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred159_InternalOpenCypherParser

    // $ANTLR start synpred160_InternalOpenCypherParser
    public final void synpred160_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_ShortestPathPattern_58 = null;


        // InternalOpenCypherParser.g:7712:3: (this_ShortestPathPattern_58= ruleShortestPathPattern )
        // InternalOpenCypherParser.g:7712:3: this_ShortestPathPattern_58= ruleShortestPathPattern
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ShortestPathPattern_58=ruleShortestPathPattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_InternalOpenCypherParser

    // $ANTLR start synpred161_InternalOpenCypherParser
    public final void synpred161_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_RelationshipsPattern_59 = null;


        // InternalOpenCypherParser.g:7724:3: (this_RelationshipsPattern_59= ruleRelationshipsPattern )
        // InternalOpenCypherParser.g:7724:3: this_RelationshipsPattern_59= ruleRelationshipsPattern
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_RelationshipsPattern_59=ruleRelationshipsPattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_InternalOpenCypherParser

    // $ANTLR start synpred162_InternalOpenCypherParser
    public final void synpred162_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_ParenthesizedExpression_60 = null;


        // InternalOpenCypherParser.g:7736:3: (this_ParenthesizedExpression_60= ruleParenthesizedExpression )
        // InternalOpenCypherParser.g:7736:3: this_ParenthesizedExpression_60= ruleParenthesizedExpression
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ParenthesizedExpression_60=ruleParenthesizedExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_InternalOpenCypherParser

    // $ANTLR start synpred163_InternalOpenCypherParser
    public final void synpred163_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_FunctionInvocation_61 = null;


        // InternalOpenCypherParser.g:7748:3: (this_FunctionInvocation_61= ruleFunctionInvocation )
        // InternalOpenCypherParser.g:7748:3: this_FunctionInvocation_61= ruleFunctionInvocation
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_FunctionInvocation_61=ruleFunctionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_InternalOpenCypherParser

    // $ANTLR start synpred164_InternalOpenCypherParser
    public final void synpred164_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_chain_1_0 = null;


        // InternalOpenCypherParser.g:7995:4: ( (lv_chain_1_0= rulePatternElementChain ) )
        // InternalOpenCypherParser.g:7995:4: (lv_chain_1_0= rulePatternElementChain )
        {
        // InternalOpenCypherParser.g:7995:4: (lv_chain_1_0= rulePatternElementChain )
        // InternalOpenCypherParser.g:7996:5: lv_chain_1_0= rulePatternElementChain
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_chain_1_0=rulePatternElementChain();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred164_InternalOpenCypherParser

    // $ANTLR start synpred166_InternalOpenCypherParser
    public final void synpred166_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_distinct_2_0=null;

        // InternalOpenCypherParser.g:8174:4: ( (lv_distinct_2_0= DISTINCT ) )
        // InternalOpenCypherParser.g:8174:4: (lv_distinct_2_0= DISTINCT )
        {
        // InternalOpenCypherParser.g:8174:4: (lv_distinct_2_0= DISTINCT )
        // InternalOpenCypherParser.g:8175:5: lv_distinct_2_0= DISTINCT
        {
        lv_distinct_2_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred166_InternalOpenCypherParser

    // $ANTLR start synpred173_InternalOpenCypherParser
    public final void synpred173_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_0=null;
        EObject lv_caseAlternatives_1_0 = null;


        // InternalOpenCypherParser.g:8457:4: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) )
        // InternalOpenCypherParser.g:8457:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
        {
        // InternalOpenCypherParser.g:8457:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
        // InternalOpenCypherParser.g:8458:5: otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
        {
        otherlv_0=(Token)match(input,CASE,FOLLOW_109); if (state.failed) return ;
        // InternalOpenCypherParser.g:8462:5: ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
        int cnt140=0;
        loop140:
        do {
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==WHEN) ) {
                alt140=1;
            }


            switch (alt140) {
        	case 1 :
        	    // InternalOpenCypherParser.g:8463:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
        	    {
        	    // InternalOpenCypherParser.g:8463:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
        	    // InternalOpenCypherParser.g:8464:7: lv_caseAlternatives_1_0= ruleCaseAlternatives
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0());
        	      						
        	    }
        	    pushFollow(FOLLOW_120);
        	    lv_caseAlternatives_1_0=ruleCaseAlternatives();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt140 >= 1 ) break loop140;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(140, input);
                    throw eee;
            }
            cnt140++;
        } while (true);


        }


        }
    }
    // $ANTLR end synpred173_InternalOpenCypherParser

    // Delegated rules

    public final boolean synpred31_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA14 dfa14 = new DFA14(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    static final String dfa_1s = "\13\uffff";
    static final String dfa_2s = "\1\26\2\0\10\uffff";
    static final String dfa_3s = "\1\60\2\0\10\uffff";
    static final String dfa_4s = "\3\uffff\1\1\1\3\1\5\1\7\1\2\1\4\1\6\1\10";
    static final String dfa_5s = "\1\uffff\1\0\1\1\10\uffff}>";
    static final String[] dfa_6s = {
            "\1\1\31\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "1041:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalOpenCypherParser()) ) {s = 3;}

                        else if ( (synpred28_InternalOpenCypherParser()) ) {s = 4;}

                        else if ( (synpred30_InternalOpenCypherParser()) ) {s = 5;}

                        else if ( (synpred32_InternalOpenCypherParser()) ) {s = 6;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (synpred29_InternalOpenCypherParser()) ) {s = 8;}

                        else if ( (synpred31_InternalOpenCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\121\uffff";
    static final String dfa_8s = "\1\4\1\uffff\3\112\1\4\110\112\3\uffff";
    static final String dfa_9s = "\1\164\1\uffff\3\144\1\164\110\144\3\uffff";
    static final String dfa_10s = "\1\uffff\1\1\114\uffff\1\3\1\2\1\4";
    static final String dfa_11s = "\121\uffff}>";
    static final String[] dfa_12s = {
            "\1\17\1\47\1\100\1\16\1\34\1\70\1\72\1\111\1\62\1\50\1\25\1\22\1\7\1\60\1\44\1\23\1\35\1\26\1\30\1\21\1\55\1\56\1\40\1\11\1\10\1\57\1\63\1\15\1\107\1\37\1\52\1\6\1\3\1\31\1\67\1\51\1\53\1\64\1\76\1\27\1\24\1\102\1\5\1\71\1\33\1\112\1\110\1\45\1\74\1\41\1\77\1\14\1\4\1\75\1\66\1\115\1\2\1\114\1\43\1\12\1\105\1\13\1\73\1\42\1\113\1\106\1\101\1\54\1\104\7\uffff\1\46\1\65\1\61\1\36\1\32\1\103\1\uffff\1\1\1\uffff\1\1\15\uffff\1\1\2\uffff\1\1\2\uffff\1\20\3\uffff\4\1",
            "",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\105\1\1\uffff\1\116\5\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\120\2\uffff\1\117\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "2539:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariable ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariable ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariable ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) )";
        }
    }
    static final String dfa_13s = "\117\uffff";
    static final String dfa_14s = "\1\4\107\131\1\4\4\131\2\uffff";
    static final String dfa_15s = "\1\164\107\141\1\164\4\141\2\uffff";
    static final String dfa_16s = "\115\uffff\1\2\1\1";
    static final String dfa_17s = "\117\uffff}>";
    static final String[] dfa_18s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\7\uffff\1\30\1\47\1\43\1\20\1\14\1\67\1\uffff\1\115\1\uffff\1\115\15\uffff\1\115\2\uffff\1\115\2\uffff\1\1\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\105\115\7\uffff\6\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\1\uffff\2\115\1\uffff\1\116\5\uffff\1\115\2\uffff\1\115\2\uffff\1\115\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "2881:2: ( ( ( (lv_variable_0_0= ruleVariable ) ) ( (lv_nodeLabels_1_0= ruleNodeLabels ) ) ) | this_PropertyExpression_2= rulePropertyExpression )";
        }
    }
    static final String dfa_19s = "\131\uffff";
    static final String dfa_20s = "\1\4\1\0\127\uffff";
    static final String dfa_21s = "\1\164\1\0\127\uffff";
    static final String dfa_22s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_23s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_24s = {
            "\10\2\1\1\74\2\7\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "3053:3: ( (lv_distint_1_0= DISTINCT ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "3138:3: ( (lv_distinct_1_0= DISTINCT ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_1 = input.LA(1);

                         
                        int index34_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index34_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\130\uffff";
    static final String dfa_26s = "\1\4\1\0\126\uffff";
    static final String dfa_27s = "\1\164\1\0\126\uffff";
    static final String dfa_28s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_29s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_30s = {
            "\101\2\1\1\3\2\7\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[][] dfa_30 = unpackEncodedStringArray(dfa_30s);

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = dfa_25;
            this.eof = dfa_25;
            this.min = dfa_26;
            this.max = dfa_27;
            this.accept = dfa_28;
            this.special = dfa_29;
            this.transition = dfa_30;
        }
        public String getDescription() {
            return "6074:2: ( ( ( (lv_operator_0_0= NOT ) ) ( (lv_left_1_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_2= ruleExpressionComparison )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_31s = "\12\uffff";
    static final String dfa_32s = "\1\13\6\uffff\1\70\2\uffff";
    static final String dfa_33s = "\1\147\6\uffff\1\105\2\uffff";
    static final String dfa_34s = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10";
    static final String dfa_35s = "\12\uffff}>";
    static final String[] dfa_36s = {
            "\1\6\24\uffff\1\4\21\uffff\1\5\33\uffff\1\2\3\uffff\1\3\1\7\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\14\uffff\1\11",
            "",
            ""
    };

    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final char[] dfa_32 = DFA.unpackEncodedStringToUnsignedChars(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[][] dfa_36 = unpackEncodedStringArray(dfa_36s);

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = dfa_31;
            this.eof = dfa_31;
            this.min = dfa_32;
            this.max = dfa_33;
            this.accept = dfa_34;
            this.special = dfa_35;
            this.transition = dfa_36;
        }
        public String getDescription() {
            return "6700:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_expression_2_0= ruleExpression ) ) (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleExpression ) ) )? otherlv_5= RightSquareBracket ) | ( () (otherlv_7= EqualsSignTilde ( (lv_expression_8_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_10= IN ( (lv_expression_11_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_13= STARTS otherlv_14= WITH ( (lv_expression_15_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_17= ENDS otherlv_18= WITH ( (lv_expression_19_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_21= CONTAINS ( (lv_expression_22_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) ) | ( () (otherlv_24= IS otherlv_25= NULL ) ) | ( () (otherlv_27= IS otherlv_28= NOT otherlv_29= NULL ) ) )";
        }
    }
    static final String dfa_37s = "\151\uffff";
    static final String dfa_38s = "\1\4\5\uffff\117\0\24\uffff";
    static final String dfa_39s = "\1\164\5\uffff\117\0\24\uffff";
    static final String dfa_40s = "\1\uffff\1\1\2\uffff\1\2\1\3\117\uffff\1\4\1\11\1\5\1\26\1\27\1\6\1\7\1\10\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25";
    static final String dfa_41s = "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\24\uffff}>";
    static final String[] dfa_42s = {
            "\1\25\1\56\1\107\1\24\1\43\1\77\1\101\1\120\1\71\1\57\1\34\1\31\1\15\1\67\1\53\1\32\1\44\1\35\1\37\1\30\1\64\1\65\1\47\1\17\1\16\1\66\1\72\1\23\1\116\1\46\1\61\1\13\1\10\1\40\1\76\1\60\1\62\1\73\1\105\1\36\1\33\1\111\1\12\1\100\1\42\1\121\1\117\1\54\1\103\1\50\1\106\1\22\1\11\1\104\1\75\1\124\1\7\1\123\1\52\1\20\1\114\1\21\1\102\1\51\1\122\1\115\1\110\1\63\1\113\7\uffff\1\55\1\74\1\70\1\45\1\41\1\112\1\uffff\1\5\1\uffff\1\26\15\uffff\1\14\2\uffff\1\6\2\uffff\1\27\3\uffff\1\4\3\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final short[][] dfa_42 = unpackEncodedStringArray(dfa_42s);

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_37;
            this.eof = dfa_37;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_41;
            this.transition = dfa_42;
        }
        public String getDescription() {
            return "7114:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | ( () ( (lv_expression_11_0= ruleCaseExpression ) ) ) | ( () otherlv_13= COUNT otherlv_14= LeftParenthesis otherlv_15= Asterisk otherlv_16= RightParenthesis ) | this_MapLiteral_17= ruleMapLiteral | this_ListComprehension_18= ruleListComprehension | ( () (otherlv_20= LeftSquareBracket ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_6 = input.LA(1);

                         
                        int index100_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (synpred148_InternalOpenCypherParser()) ) {s = 86;}

                         
                        input.seek(index100_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA100_7 = input.LA(1);

                         
                        int index100_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA100_8 = input.LA(1);

                         
                        int index100_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA100_9 = input.LA(1);

                         
                        int index100_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalOpenCypherParser()) ) {s = 90;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA100_10 = input.LA(1);

                         
                        int index100_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalOpenCypherParser()) ) {s = 91;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA100_11 = input.LA(1);

                         
                        int index100_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalOpenCypherParser()) ) {s = 92;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA100_12 = input.LA(1);

                         
                        int index100_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_InternalOpenCypherParser()) ) {s = 93;}

                        else if ( (synpred151_InternalOpenCypherParser()) ) {s = 94;}

                         
                        input.seek(index100_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA100_13 = input.LA(1);

                         
                        int index100_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_InternalOpenCypherParser()) ) {s = 95;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA100_14 = input.LA(1);

                         
                        int index100_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalOpenCypherParser()) ) {s = 96;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA100_15 = input.LA(1);

                         
                        int index100_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalOpenCypherParser()) ) {s = 97;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA100_16 = input.LA(1);

                         
                        int index100_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_InternalOpenCypherParser()) ) {s = 98;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA100_17 = input.LA(1);

                         
                        int index100_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_InternalOpenCypherParser()) ) {s = 99;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA100_18 = input.LA(1);

                         
                        int index100_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred158_InternalOpenCypherParser()) ) {s = 100;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA100_19 = input.LA(1);

                         
                        int index100_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred159_InternalOpenCypherParser()) ) {s = 101;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA100_20 = input.LA(1);

                         
                        int index100_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_InternalOpenCypherParser()) ) {s = 102;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA100_21 = input.LA(1);

                         
                        int index100_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_InternalOpenCypherParser()) ) {s = 102;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA100_22 = input.LA(1);

                         
                        int index100_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_InternalOpenCypherParser()) ) {s = 103;}

                        else if ( (synpred162_InternalOpenCypherParser()) ) {s = 104;}

                         
                        input.seek(index100_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA100_23 = input.LA(1);

                         
                        int index100_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA100_24 = input.LA(1);

                         
                        int index100_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA100_25 = input.LA(1);

                         
                        int index100_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA100_26 = input.LA(1);

                         
                        int index100_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA100_27 = input.LA(1);

                         
                        int index100_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA100_28 = input.LA(1);

                         
                        int index100_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA100_29 = input.LA(1);

                         
                        int index100_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_29);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA100_30 = input.LA(1);

                         
                        int index100_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA100_31 = input.LA(1);

                         
                        int index100_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA100_32 = input.LA(1);

                         
                        int index100_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA100_33 = input.LA(1);

                         
                        int index100_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA100_34 = input.LA(1);

                         
                        int index100_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA100_35 = input.LA(1);

                         
                        int index100_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA100_36 = input.LA(1);

                         
                        int index100_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA100_37 = input.LA(1);

                         
                        int index100_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA100_38 = input.LA(1);

                         
                        int index100_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA100_39 = input.LA(1);

                         
                        int index100_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA100_40 = input.LA(1);

                         
                        int index100_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA100_41 = input.LA(1);

                         
                        int index100_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA100_42 = input.LA(1);

                         
                        int index100_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA100_43 = input.LA(1);

                         
                        int index100_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA100_44 = input.LA(1);

                         
                        int index100_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA100_45 = input.LA(1);

                         
                        int index100_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA100_46 = input.LA(1);

                         
                        int index100_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA100_47 = input.LA(1);

                         
                        int index100_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_47);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA100_48 = input.LA(1);

                         
                        int index100_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_48);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA100_49 = input.LA(1);

                         
                        int index100_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA100_50 = input.LA(1);

                         
                        int index100_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_50);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA100_51 = input.LA(1);

                         
                        int index100_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_51);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA100_52 = input.LA(1);

                         
                        int index100_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA100_53 = input.LA(1);

                         
                        int index100_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_53);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA100_54 = input.LA(1);

                         
                        int index100_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA100_55 = input.LA(1);

                         
                        int index100_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_55);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA100_56 = input.LA(1);

                         
                        int index100_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_56);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA100_57 = input.LA(1);

                         
                        int index100_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA100_58 = input.LA(1);

                         
                        int index100_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_58);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA100_59 = input.LA(1);

                         
                        int index100_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_59);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA100_60 = input.LA(1);

                         
                        int index100_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_60);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA100_61 = input.LA(1);

                         
                        int index100_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_61);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA100_62 = input.LA(1);

                         
                        int index100_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_62);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA100_63 = input.LA(1);

                         
                        int index100_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_63);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA100_64 = input.LA(1);

                         
                        int index100_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_64);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA100_65 = input.LA(1);

                         
                        int index100_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_65);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA100_66 = input.LA(1);

                         
                        int index100_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_66);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA100_67 = input.LA(1);

                         
                        int index100_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_67);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA100_68 = input.LA(1);

                         
                        int index100_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_68);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA100_69 = input.LA(1);

                         
                        int index100_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_69);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA100_70 = input.LA(1);

                         
                        int index100_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_70);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA100_71 = input.LA(1);

                         
                        int index100_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_71);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA100_72 = input.LA(1);

                         
                        int index100_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_72);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA100_73 = input.LA(1);

                         
                        int index100_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_73);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA100_74 = input.LA(1);

                         
                        int index100_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_74);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA100_75 = input.LA(1);

                         
                        int index100_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_75);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA100_76 = input.LA(1);

                         
                        int index100_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_76);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA100_77 = input.LA(1);

                         
                        int index100_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_77);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA100_78 = input.LA(1);

                         
                        int index100_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_78);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA100_79 = input.LA(1);

                         
                        int index100_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_79);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA100_80 = input.LA(1);

                         
                        int index100_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_80);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA100_81 = input.LA(1);

                         
                        int index100_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_81);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA100_82 = input.LA(1);

                         
                        int index100_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_82);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA100_83 = input.LA(1);

                         
                        int index100_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_83);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA100_84 = input.LA(1);

                         
                        int index100_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index100_84);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_43s = "\100\uffff";
    static final String dfa_44s = "\1\1\77\uffff";
    static final String dfa_45s = "\1\11\16\uffff\1\0\3\uffff\1\0\54\uffff";
    static final String dfa_46s = "\1\154\16\uffff\1\0\3\uffff\1\0\54\uffff";
    static final String dfa_47s = "\1\uffff\1\2\75\uffff\1\1";
    static final String dfa_48s = "\17\uffff\1\0\3\uffff\1\1\54\uffff}>";
    static final String[] dfa_49s = {
            "\3\1\1\uffff\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\1\uffff\6\1\1\uffff\4\1\2\uffff\1\1\1\uffff\4\1\1\17\4\1\1\23\2\1\1\uffff\3\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[][] dfa_49 = unpackEncodedStringArray(dfa_49s);

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = dfa_43;
            this.eof = dfa_44;
            this.min = dfa_45;
            this.max = dfa_46;
            this.accept = dfa_47;
            this.special = dfa_48;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "()+ loopback of 7994:3: ( (lv_chain_1_0= rulePatternElementChain ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_15 = input.LA(1);

                         
                        int index101_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalOpenCypherParser()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index101_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_19 = input.LA(1);

                         
                        int index101_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalOpenCypherParser()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index101_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x4021158463422000L,0x0000000000000080L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000888002L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000002L,0x001C200000000000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x4020058463422002L,0x0000000000000080L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000002L,0x001C000000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0xC020058463422000L,0x0000000000000080L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x4020058463422000L,0x0000000000000080L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00002000003F01FFL});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x001E248002BF01FFL});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x4008000000000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x001E248052BF01FFL});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00002000023F01FFL});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000300000000002L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000008000400000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x4020058463422000L,0x0000000004000080L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x001E24805ABF01FFL});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0400024000000002L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0400004000000002L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000800000000602L,0x0000000000000004L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000200000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000040L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000202000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0002040000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0002000000800000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x001C000008800000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x001C000000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000002L,0x0000000840000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x0000240204BF01FFL});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000040204800000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000040004800000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000008840000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x0000254208BF01FFL});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000054208800000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000050208800000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000050008800000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000050000800000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00002002003F01FFL});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x001C000000000800L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x000000380000B200L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000000050000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0000000109000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0004000100000802L,0x00000080000C4000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000800L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000010020000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000080004000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x001E248056BF01FFL});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000000024000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000090000000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000000L,0x0000004000400000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x2002000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000300000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000100020000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x001C200000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000000L,0x0018000000000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x2000000000000002L});

}
