package ingraph.optimization.patterns

import "http://ingraph/relalg";

/*
    parentOperator
          |
          | *input
          V
    expandOperator
          |
          | input
          V
  getVerticesOperator

*/
// 1st transformation for eliminating expand operators
pattern expandVertex(getVerticesOperator : GetVerticesOperator, expandOperator : ExpandOperator, parentOperator : Operator) {
	find parentOperator(parentOperator, expandOperator);
	ExpandOperator.input(expandOperator, getVerticesOperator);
	GetVerticesOperator(getVerticesOperator);
}

/*
    parentOperator
          |
          | *input
          V
    expandOperator
*/
// 2nd transformation for eliminating expand operators
pattern expandOperator(expandOperator : ExpandOperator, parentOperator : Operator) {
	find parentOperator(parentOperator, expandOperator);
	ExpandOperator(expandOperator);
}

/*
      container              //parentOperator
          |
          | rootExpression   //*input
          V
     topOperator (skips/limits a given amount of tuples)
          |
          | *input
          V
     sortOperator (orders the tuples according to some variables and asc/desc directions)
*/
pattern sortAndTopOperator(sortOperator : SortOperator, topOperator : TopOperator, topLevelContainer : RelalgContainer) { //, parentOperator : Operator) {
//  find parentOperator(parentOperator, topOperator);
  RelalgContainer.rootExpression(topLevelContainer, topOperator);
  TopOperator.input(topOperator, sortOperator);
}
