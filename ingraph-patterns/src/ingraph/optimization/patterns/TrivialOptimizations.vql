package ingraph.optimization.patterns

import "http://ingraph/relalg";

// AND expressions are cascadable
pattern
CascadableSelection(parentOperator : Operator, selectionOperator : SelectionOperator, leftOperand : LogicalExpression, rightOperand : LogicalExpression) {
	find parentOperator(parentOperator, selectionOperator);

	SelectionOperator.condition(selectionOperator, condition);

	// condition: leftOperand AND rightOperand
	BinaryLogicalExpression.operator(condition, ::AND);
	BinaryLogicalExpression.leftOperand(condition, leftOperand);
	BinaryLogicalExpression.rightOperand(condition, rightOperand);
}

// swap two adjacent selection operators
pattern
SwappableSelection(parentOperator : Operator, selectionOperator1 : SelectionOperator, selectionOperator2 : SelectionOperator) {
	find parentOperator(parentOperator, selectionOperator1);
	SelectionOperator.input(selectionOperator1, selectionOperator2);
}

// joins are commutative: a op b = b op a
pattern
CommutativeOperator(op : CommutativeBinaryOperator, leftInput : Operator, rightInput : Operator) {
	CommutativeBinaryOperator.leftInput(op, leftInput);
	CommutativeBinaryOperator.rightInput(op, rightInput);
}

// (a op1 b) op2 c = a op1 (b op2 c)
pattern
AssociativeOperator(op1 : JoinOperator, op2 : JoinOperator, a : Operator, b : Operator, c : Operator) {
	JoinOperator.leftInput(op2, op1);
	JoinOperator.rightInput(op2, c);
	
	JoinOperator.leftInput(op1, a);
	JoinOperator.rightInput(op1, b);
}

pattern FoldableConstantExpression(e, v1: Literal, v2: Literal) {
	BinaryArithmeticOperationExpression.leftOperand(e, v1);
	BinaryArithmeticOperationExpression.rightOperand(e, v2);
} or {
	ArithmeticComparisonExpression.leftOperand(e, v1);
	ArithmeticComparisonExpression.rightOperand(e, v2);
} or {
	BinaryLogicalExpression.leftOperand(e, v1);
	BinaryLogicalExpression.rightOperand(e, v2);
}
